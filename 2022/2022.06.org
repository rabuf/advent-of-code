#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 06
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2022-06)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2022-06
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2022-06)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun process-stream (in)
    (read-line in))
  (defun read-input (file)
    (with-open-file (in file)
      (process-stream in)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/06.txt"))
#+END_SRC
** Part 1
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun all-different (sequence)
    (= (length sequence)
       (length (remove-duplicates sequence))))

  (defun start-of-packet-marker (message)
    (loop for i from 4
          when (all-different (subseq message (- i 4) i))
            do (return i)))

  (defun problem-a () (format t "Problem 06 A: ~a~%" (start-of-packet-marker *input*)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent

  (defun start-of-message-marker (message)
    (loop for i from 14 to (length message)
          when (all-different (subseq message (- i 14) i))
            do (return i)))
        

  (defun problem-b () (format t "Problem 06 B: ~a~%" (start-of-message-marker *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 06 A: 1804
: Problem 06 B: 2508
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both :noweb yes
  <<better-finder>>
  (def-suite aoc.2022.06)
  (in-suite aoc.2022.06)

  (defparameter *samples*
    '(("mjqjpqmgbljsphdztnvjfqwrcgsmlb" 7 19)
      ("bvwbjplbgvbhsrlpgdmjqwftvncz" 5 23)
      ("nppdvjthqldpwncqszvftbrmjlhg" 6 23)
      ("nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg" 10 29)
      ("zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw" 11 26)))

  (test part-1
    (loop for (tx expected _) in *samples*
          do (is (= expected (start-of-marker tx 4)))
             (is (= expected (start-of-packet-marker tx)))))
  (test part-2
    (loop for (tx _ expected) in *samples*
          do (is (= expected (start-of-marker tx 14)))
             (is (= expected (start-of-message-marker tx)))))

  (run! 'aoc.2022.06)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2022.06
:  Running test PART-1 ..........
:  Running test PART-2 ..........
:  Did 20 checks.
:     Pass: 20 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
Better version of the above that simplifies it a bit.
#+NAME: better-finder
#+BEGIN_SRC lisp :results silent
  (defun start-of-marker (message &optional (length 4))
    (loop for i from length to (length message)
          when (= length (length (remove-duplicates (subseq message (- i length) i))))
            do (return i)))

#+END_SRC
