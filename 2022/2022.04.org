#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 04
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2022-04)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2022-04
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2022-04)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun process-stream (in)
    (loop for line = (read-line in nil)
          while line
          collect (cl-ppcre:register-groups-bind ((#'parse-integer a b c d))
                      ("(\\d+)-(\\d+),(\\d+)-(\\d+)" line)
                    (list a b c d))))
  (defun read-input (file)
    (with-open-file (in file)
      (process-stream in)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/04.txt"))
#+END_SRC
** Part 1
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun containsp (ranges)
    (destructuring-bind (a b c d) ranges
      (or (<= a c d b)
          (<= c a b d))))

  (defun problem-a () (format t "Problem 04 A: ~a~%" (count-if #'containsp *input*)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun overlapp (ranges)
    (destructuring-bind (a b c d) ranges
      (or (<= a c b)
          (<= a d b)
          (<= c a d)
          (<= c b d))))

  (defun problem-b () (format t "Problem 04 B: ~a~%" (count-if #'overlapp *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 04 A: 441
: Problem 04 B: 861
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2022.04)
  (in-suite aoc.2022.04)

  (defparameter *sample-input*
    "2-4,6-8
  2-3,4-5
  5-7,7-9
  2-8,3-7
  6-6,4-6
  2-6,4-8")

  (test count-contains
    (with-input-from-string (in *sample-input*)
      (let ((ranges (process-stream in)))
        (is (= 2 (count-if #'containsp ranges))))))
  (test count-overlaps
    (with-input-from-string (in *sample-input*)
      (let ((ranges (process-stream in)))
        (is (= 4 (count-if #'overlapp ranges))))))

  (run! 'aoc.2022.04)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2022.04
:  Running test COUNT-CONTAINS .
:  Running test COUNT-OVERLAPS .
:  Did 2 checks.
:     Pass: 2 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
