#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 03
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2022-03)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2022-03
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2022-03)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun process-stream (in)
    (loop
      for line = (read-line in nil)
      while line
      collect line))

  (defun read-input (file)
    (with-open-file (in file)
      (process-stream in)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/03.txt"))
#+END_SRC
** Part 1
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun priority-value (c)
    (cond ((upper-case-p c)
           (+ (- (char-code c) (char-code #\A)) 27))
          (t
           (+ (- (char-code c) (char-code #\a)) 1))))
  (defun priority (rucksack)
    (let* ((mid (floor (length rucksack) 2))
           (first (subseq rucksack 0 mid))
           (second (subseq rucksack mid)))
      (loop for c across first
            while (not (position c second))
            finally (return (priority-value c)))))


  (defun solve (rucksacks)
    (reduce #'+ (mapcar #'priority rucksacks)))

  (defun problem-a () (format t "Problem 03 A: ~a~%" (solve *input*)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun badge (rucksacks)
    (loop for i from 0 by 3
          while (< i (length rucksacks))
          sum (let ((group (subseq rucksacks i (+ i 3))))
                (loop for c across (first group)
                      while (not (and (position c (second group))
                                      (position c (third group))))
                      finally (return (priority-value c))))))

  (defun problem-b () (format t "Problem 03 B: ~a~%" (badge *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 03 A: 7821
: Problem 03 B: 2752
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2022.03)
  (in-suite aoc.2022.03)
  (defparameter *sample-input*
    "vJrwpWtwJgWrhcsFMMfFFhFp
  jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL
  PmmdzqPrVvPwwTWBwg
  wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn
  ttgJtRGJQctTZtZT
  CrZsJsPPZsGzwwsLwLmpwMDw")

  (test priority
    (with-input-from-string (in *sample-input*)
      (let ((rucksacks (process-stream in))
            (expected '(16 38 42 22 20 19)))
        (loop for r in rucksacks
              for e in expected
              do (is (= (priority r) e))))))

  (test priority-sum
    (with-input-from-string (in *sample-input*)
      (let ((rucksacks (process-stream in)))
        (is (= 157 (solve rucksacks))))))
  (run! 'aoc.2022.03)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2022.03
:  Running test PRIORITY ......
:  Running test PRIORITY-SUM .
:  Did 7 checks.
:     Pass: 7 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
