#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 01
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2022-01)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2022-01
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2022-01)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun parse-stream (in)
    (loop
      while (peek-char t in nil nil)
      collect
          (loop
            for line = (read-line in nil)
            while (not (string= "" line))
            while line
            collect (parse-integer line))))

  (defun read-input (file)
    (with-open-file (in file)
      (parse-stream in)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/01.txt"))
#+END_SRC
** Part 1
#+NAME: most-calories
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun most-calories (elves)
    (reduce #'max (mapcar (lambda (elf) (reduce #'+ elf)) elves)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 01 A: ~a~%" (most-calories *input*)))
#+END_SRC
** Part 2
#+NAME: top-three-calories
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun top-three-calories (elves)
    (reduce #'+ (sort (mapcar (lambda (elf) (reduce #'+ elf)) elves) #'>) :end 3))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 01 B: ~a~%" (top-three-calories *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<most-calories>>
  <<problem-a>>
  <<top-three-calories>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 01 A: 74711
: Problem 01 B: 209481
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2022.01)
  (in-suite aoc.2022.01)

  (defvar *test-input*
    "1000
  2000
  3000

  4000

  5000
  6000

  7000
  8000
  9000

  10000")

  (test calories
    (with-input-from-string (in *test-input*)
      (let ((input (parse-stream in)))
        (is (= 24000 (most-calories input)))
        (is (= 45000 (top-three-calories input))))))

  (run! 'aoc.2022.01)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2022.01
:  Running test CALORIES ..
:  Did 2 checks.
:     Pass: 2 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
