#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 05
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2022-05)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2022-05
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2022-05)
#+END_SRC
** Input
Much more complicated parsing, not awful though.

#+BEGIN_EXPORT ascii
    [D]    
[N] [C]    
[Z] [M] [P]
 1   2   3 

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2
#+END_EXPORT

So I'm splitting the input into two, the crate names are in consistent
positions. Index $1 + 3 \times i$ for 0 <= i < n.

#+NAME: read-input
#+BEGIN_SRC lisp :results silent :noweb yes
  <<parse-moves>>
  (defun get-current-stacks (in)
    (loop for line = (read-line in nil)
          until (zerop (length line))
          collect line))

  (defun get-move-list (in)
    (loop for line = (read-line in nil)
          while line
          collect line))

  (defun process-stream (in)
    (list (get-current-stacks in)
          (parse-moves (get-move-list in))))

  (defun read-input (file)
    (with-open-file (in file)
      (process-stream in)))
#+END_SRC

#+NAME: parse-crates
#+BEGIN_SRC lisp :results silent
  (defun number-of-stacks (last-row)
    (count-if #'digit-char-p last-row))

  (defun parse-crates (crates)
    (let* ((number-stacks (number-of-stacks (first (last crates))))
           (stacks (make-array number-stacks :initial-element nil))
           (to-process (reverse (butlast crates))))
      (loop for row in to-process
            do (loop for i from 1 to (length row) by 4
                     for c = (elt row i)
                     when (alpha-char-p c)
                     do (push (elt row i) (aref stacks (floor i 4)))))
      stacks))
#+END_SRC

#+NAME: parse-moves
#+BEGIN_SRC lisp :results silent
  (defun parse-move (move)
    (cl-ppcre:register-groups-bind
        ((#'parse-integer count src dst))
        ("move (\\d+) from (\\d+) to (\\d+)" move)
      (list count src dst)))

  (defun parse-moves (moves)
    (mapcar #'parse-move moves))
#+END_SRC

#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/05.txt"))
#+END_SRC
** Part 1
#+NAME: solve-a
#+BEGIN_SRC lisp :results silent
  (defun apply-moves (stacks moves)
    (let ((stacks (parse-crates stacks)))
      (loop for (count src dst) in moves
            do (loop repeat count
                     do (push (pop (aref stacks (1- src))) (aref stacks (1- dst)))))
      (map 'string #'first stacks)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 05 A: ~a~%" (apply-moves (first *input*) (second *input*))))
#+END_SRC
** Part 2
#+NAME: solve-b
#+BEGIN_SRC lisp :results silent
  (defun apply-moves-9001 (stacks moves)
    (let ((stacks (parse-crates stacks)))
      (loop for (count src dst) in moves
            for stack = (aref stacks (1- src))
            for top = (butlast stack (- (length stack) count))
            for bottom = (nthcdr count stack)
            do (setf (aref stacks (1- src)) bottom)
               (setf (aref stacks (1- dst)) (append top (aref stacks (1- dst)))))
      (map 'string #'first stacks)))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 05 B: ~a~%" (apply-moves-9001 (first *input*) (second *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<parse-crates>>
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<solve-a>>
  <<solve-b>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 05 A: BSDMQFLSP
: Problem 05 B: PGSQBFLDP
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2022.05)
  (in-suite aoc.2022.05)
  (defparameter *test-input*
    "    [D]    
  [N] [C]    
  [Z] [M] [P]
   1   2   3 

  move 1 from 2 to 1
  move 3 from 1 to 3
  move 2 from 2 to 1
  move 1 from 1 to 2")

  (test apply-moves
    (with-input-from-string (in *test-input*)
      (destructuring-bind (stacks moves) (process-stream in)
        (is (string= "CMZ" (apply-moves stacks moves)))
        (is (string= "MCD" (apply-moves-9001 stacks moves))))))

  (run! 'aoc.2022.05)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2022.05
:  Running test APPLY-MOVES ..
:  Did 2 checks.
:     Pass: 2 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
