#+STARTUP: indent content
#+OPTIONS: num:nil toc:nil
* Day 9
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2018-09)=
4. Typing =C-c C-c= in the block [[answers][answers]].
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
    <<packages>>
    (defpackage :aoc-2018-09
      (:use
       :common-lisp
       :iterate
       :parseq
       :fiveam)
      (:export
       :problem-a
       :problem-b))
    (in-package :aoc-2018-09)
#+END_SRC
** Input
The input was a file with a single string. I'll skip parsing it today.
#+BEGIN_EXAMPLE
  441 players; last marble is worth 71032 points
#+END_EXAMPLE

#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input* (list 441 71032))
#+END_SRC
** Part 1
The objective is to simulate an Elven game. The good thing is that
it's fully deterministic. The bad thing is that it's tedious to
understand.

There are =n= players and =m+1= marbles. Each marble is numbered in
ascending order from 0 to =m=
#+NAME: make-marbles
#+BEGIN_SRC lisp :results silent
  (defun make-marbles (m)
    (iter (for i from 1 to m)
          (collect i)))
#+END_SRC
The game begins with marble =0= placed in the circle. Then each player
takes turns adding a marble two spaces *right* from the current
position. I'll use the fact that lisp lists are linked lists and
implement =insert-marble=.
#+NAME: insert-marble
#+BEGIN_SRC lisp :results silent
  (defun insert-marble (marble-number marbles position)
    (push marble-number (cdr (nthcdr position marbles)))
    marbles)
#+END_SRC
#+NAME: remove-marble
#+BEGIN_SRC lisp :results silent
  (defun remove-marble (marbles position)
    (iter (for m in marbles)
          (for i from 0)
          (unless (= i position) (collect m))))
#+END_SRC

Ok, so to play the game we need to track which elf's turn it is (to
track their score). Track the current position of the last placed
marble. And then insert all the marbles.
#+NAME: play-game
#+BEGIN_SRC lisp :results none
  (defun play-game (player-count marble-count)
    (let ((scores (make-array player-count :initial-element 0)))
      (iter (with current-player = 1)
            (for m from 2 to marble-count)
            (with field = (list 0 1))
            (with len = 2)
            (with position = 1)
            ;; normal play
            (unless (= 0 (mod m 23))
              (setf field (insert-marble m field (mod (1+ position) len)))
              (setf position (1+ (mod (1+ position) len)));(position m field))
              (incf len))
            ;; someone gets points
            (when (= 0 (mod m 23))
              (incf (aref scores current-player) m)
              ;; remove marble 7 spaces CCW from position
              (setf position (mod (- position 7) len))
              (incf (aref scores current-player) (nth position field))
              (setf field (remove-marble field position))
              (decf len))
            (setf current-player (mod (1+ current-player) player-count)))
      (iter (for score in-vector scores)
            (maximize score))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 9a: ~a~%" (play-game-fast 441 71032)))
#+END_SRC
** Part 2
This is not very efficient, and I imagine all the inserting and
removing is not helping.

So to improve things I have an idea, I'll work on this while the above
code executes for the x100 case.

Rather than putting stuff into the list, we'll keep a front and
back. Position no longer needs to be tracked. WHenever any movement
causes us to move beyond the front or back we just reverse the other
and swap them.
#+NAME: play-game-fast
#+BEGIN_SRC lisp :results none
  (defun play-game-fast (player-count marble-count)
    (let ((scores (make-array player-count :initial-element 0)))
      (iter (with current-player = 0)
            (for m from 1 to marble-count)
            (with left = nil)
            (with right =  nil)
            (with position = 0)
            (unless (= 0 (mod m 23))
              (push position left)
              (when (null right)
                (setf right (reverse left))
                (setf left nil))
              (push (pop right) left)
              (setf position m))
            (when (= 0 (mod m 23))
              (iter (repeat 7)
                    (when (null left)
                      (setf left (reverse right))
                      (setf right nil))
                    (push position right)
                    (setf position (pop left)))
              (incf (aref scores current-player) m)
              (incf (aref scores current-player) position)
              (when (null right)
                (setf right (reverse left))
                (setf left nil))
              (setf position (pop right)))
            (setf current-player (mod (1+ current-player) player-count)))
      (iter (for score in-vector scores)
            (maximize score))))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes
  (defun problem-b () (format t "Problem 9b: ~a~%" (play-game-fast 441 (* 100 71032))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<make-marbles>>
  <<insert-marble>>
  <<remove-marble>>
  <<rotate-clockwise>>
  <<play-game>>
  <<play-game-fast>>
#+END_SRC

#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.09.lisp
  <<initialize>>
  <<structs>>
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 9a: 393229
: Problem 9b: 3273405195
** Test cases
#+BEGIN_QUOTE
- 7 players; last marble is worth 25 points: high score is 32
- 10 players; last marble is worth 1618 points: high score is 8317
- 13 players; last marble is worth 7999 points: high score is 146373
- 17 players; last marble is worth 1104 points: high score is 2764
- 21 players; last marble is worth 6111 points: high score is 54718
- 30 players; last marble is worth 5807 points: high score is 37305
#+END_QUOTE
#+BEGIN_SRC lisp :results output :exports both
  (def-suite game-tests)
  (in-suite game-tests)
  (test game
    (is (= (play-game 9 25) 32))
    (is (= (play-game 10 1618) 8317))
    (is (= (play-game 13 7999) 146373))
    (is (= (play-game 17 1104) 2764))
    (is (= (play-game 21 6111) 54718))
    (is (= (play-game 30 5807) 37305)))
  (test game-fast
    (is (= (play-game-fast 9 25) 32))
    (is (= (play-game-fast 10 1618) 8317))
    (is (= (play-game-fast 13 7999) 146373))
    (is (= (play-game-fast 17 1104) 2764))
    (is (= (play-game-fast 21 6111) 54718))
    (is (= (play-game-fast 30 5807) 37305)))
  (run! 'game-tests)
#+END_SRC

#+RESULTS:
: 
: Running test suite GAME-TESTS
:  Running test GAME ......
:  Running test GAME-FAST ......
:  Did 12 checks.
:     Pass: 12 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)

** Thoughts
The first version wasn't wrong, it produced correct answers. But it
was incredibly slow. I optimized it as much as I could, but it still
required too many list operations and traversals.

For the curious, here is the result of timing the two programs:
#+BEGIN_EXAMPLE
AOC-2018-09> (time (play-game-fast 441 71032))
Evaluation took:
  0.016 seconds of real time
  0.016905 seconds of total run time (0.015776 user, 0.001129 system)
  [ Run times consist of 0.008 seconds GC time, and 0.009 seconds non-GC time. ]
  106.25% CPU
  50,534,674 processor cycles
  3,643,664 bytes consed
  
393229
AOC-2018-09> (time (play-game 441 71032))
Evaluation took:
  2.893 seconds of real time
  2.899166 seconds of total run time (2.815097 user, 0.084069 system)
  [ Run times consist of 0.176 seconds GC time, and 2.724 seconds non-GC time. ]
  100.21% CPU
  8,955,466,067 processor cycles
  1,603,681,968 bytes consed
  
393229
#+END_EXAMPLE
The final fast version runs in 0.5% of the time of the first, or 180x
faster.

For grins, here are both running with *twice* as many marbles:
#+BEGIN_EXAMPLE
AOC-2018-09> (time (play-game-fast 441 (* 2 71032)))
Evaluation took:
  0.014 seconds of real time
  0.014085 seconds of total run time (0.014010 user, 0.000075 system)
  100.00% CPU
  43,898,623 processor cycles
  7,304,192 bytes consed
  
1459374
AOC-2018-09> (time (play-game 441 (* 2 71032)))
Evaluation took:
  10.862 seconds of real time
  10.897570 seconds of total run time (10.501822 user, 0.395748 system)
  [ Run times consist of 0.843 seconds GC time, and 10.055 seconds non-GC time. ]
  100.33% CPU
  33,628,531,918 processor cycles
  6,411,307,200 bytes consed
  
1459374
#+END_EXAMPLE
So the slow version took 5x as long for 2x the marbles, while the fast
version ran in about the same time.

Here's the output of timing the fast version with 100x the marbles (Part B):
#+BEGIN_EXAMPLE
AOC-2018-09> (time (play-game-fast 441 (* 100 71032)))
Evaluation took:
  1.351 seconds of real time
  1.354386 seconds of total run time (1.153401 user, 0.200985 system)
  [ Run times consist of 0.801 seconds GC time, and 0.554 seconds non-GC time. ]
  100.22% CPU
  4,184,227,408 processor cycles
  600,833,168 bytes consed
  
3273405195
#+END_EXAMPLE
