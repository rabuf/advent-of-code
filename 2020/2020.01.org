#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 01
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-01)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-01
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-01)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/01.txt"))
#+END_SRC
** Part 1
The task is to find a pair of numbers summing to 2020, and then return
their product.
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (input)
    (loop for i from 0 below (length input)
       do (let ((rest (subseq input (1+ i)))
                (value (nth i input)))
            (loop for other in rest
               do (when (= 2020 (+ other value))
                    (return-from solve-a (* other value)))))))
  (defun problem-a () (format t "Problem 01 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
Same problem but a triple. I'll just duplicate the code and add one
more loop.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (input)
    (loop for i from 0 below (length input)
       do (let ((rest-01 (subseq input (1+ i)))
                (a (nth i input)))
            (loop for j from 0 below (length rest-01)
               do (let ((rest-02 (subseq input (1+ j)))
                        (b (nth j rest-01)))
                    (loop for c in rest-02
                         do (when (= 2020 (+ a b c))
                              (return-from solve-b (* a b c)))))))))
  (defun problem-b () (format t "Problem 01 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2020.01.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
#+begin_example
Problem 01 A: 982464
Problem 01 B: (1864 1880 1300 1961 1577 1900 1307 1818 1736 1846 1417 1372 1351
               1860 1738 1525 1798 1218 1723 1936 1725 1998 1466 1922 1782 1947
               1717 1914 1843 1732 1918 814 1771 1712 1804 1213 1859 1820 1793
               1870 1993 1787 1824 1849 1646 1489 1348 1978 1628 1781 2002 1297
               1829 1596 1819 1313 1413 1726 1449 1810 1295 1679 1358 1949 1644
               1825 1891 490 1962 1939 1228 1889 1977 1980 1763 1752 1983 1785
               1678 2000 1857 1658 1863 1330 1380 1799 1789 1633 1663 296 1985
               1117 1239 1854 1960 2004 1940 1876 1739 1858 1283 1423 1982 1836
               1451 1840 1347 1652 1695 1210 1861 1199 1346 1786 1814 1958 1853
               1974 1917 1308 654 1743 1847 1367 1559 1614 1897 2003 1886 1885
               1682 1204 1986 1816 1994 1817 1751 1701 1619 1970 816 1852 1832
               1631 703 1604 1444 1842 1984 1259 1948 1620 1681 1822 1865 1521
               1741 1455 1909 1764 261 1464 1905 1325 1766 1749 1292 1874 1267
               1269 1969 1991 1219 1345 1976 1369 1942 1388 1776 1629 1987 1684
               1813 1203 1965 1729 1930 1609 1801 1402 121 1833 1898 1957 1051
               1430 1893 1784 1800 1910)
#+end_example
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2020.01)
  (in-suite aoc.2020.01)

  (run! 'aoc.2020.01)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
