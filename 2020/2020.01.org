#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 01
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-01)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-01
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-01)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/01.txt"))
#+END_SRC
** Part 1
The task is to find a pair of numbers summing to 2020, and then return
their product.
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (input)
    (loop for i from 0 below (length input)
       do (let ((rest (subseq input (1+ i)))
                (value (nth i input)))
            (loop for other in rest
               do (when (= 2020 (+ other value))
                    (return-from solve-a (* other value)))))))
  (defun problem-a () (format t "Problem 01 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
Same problem but a triple. I'll just duplicate the code and add one
more loop.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (input)
    (loop for i from 0 below (length input)
       do (let ((rest-01 (subseq input (1+ i)))
                (a (nth i input)))
            (loop for j from 0 below (length rest-01)
               do (let ((rest-02 (subseq input (1+ j)))
                        (b (nth j rest-01)))
                    (loop for c in rest-02
                         do (when (= 2020 (+ a b c))
                              (return-from solve-b (* a b c)))))))))
  (defun problem-b () (format t "Problem 01 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 01 A: 982464
: Problem 01 B: 162292410
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2020.01)
  (in-suite aoc.2020.01)
  (test part-1
    (is (= 514579 (solve-a '(1721 979 366 299 675 1456)))))
  (test part-2
    (is (= 241861950 (solve-b '(1721 979 366 299 675 1456)))))
  (run! 'aoc.2020.01)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2020.01
:  Running test PART-1 .
:  Running test PART-2 .
:  Did 2 checks.
:     Pass: 2 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
Straightforward, as expected for Day 1. Now I'm going to attempt it in
Ada. Which also wasn't bad.
** Ada
#+BEGIN_SRC ada :tangle ada/aoc2020-day01.ads
  with Ada.Containers.Vectors;

  package AOC2020.Day01 is
     function Solve_01 return Integer;
     function Solve_02 return Integer;
  end AOC2020.Day01;
#+END_SRC

#+BEGIN_SRC ada :tangle ada/aoc2020-day01.adb
  with Ada.Containers.Hashed_Sets;
  with Text_IO; use Text_IO;
  with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

  package body AOC2020.Day01 is

     function Hash (Value : Integer) return Ada.Containers.Hash_Type is
       (Ada.Containers.Hash_Type'Mod(Value));
     package Integer_Sets is new Ada.Containers.Hashed_Sets
       (Element_Type => Integer,
        Hash => Hash,
        Equivalent_Elements => "=");
     use Integer_Sets;

     Input : Set;

     function Solve_01 return Integer is
        Result : Integer := -1;
     begin
        for I in Input.Iterate loop
           if Input.Contains(2020 - Input(I))
           then
              return Input(I) * (2020 - Input(I));
           end if;
        end loop;
        return Result;
     end Solve_01;

     function Solve_02 return Integer is
        Result : Integer := -1;
     begin
        for I in Input.Iterate loop
           for J in Input.Iterate loop
              if Input.Contains (2020 - Input(I) - Input(J))
              then
                 return (2020 - Input(I) - Input(J)) * Input(I) * Input(J);
              end if;
           end loop;
        end loop;
        return Result;
     end Solve_02;

  begin
     declare
        input_file : file_type;
        line : integer;
     begin
        Open (Input_File, in_file, "../input/01.txt");
        loop
           exit when end_of_file (input_file);
           Get (input_file, Line);
           Input.Insert (Line);
        end loop;
     end;
     Put_Line("Advent of Code 2020 - Day 01:"); New_Line;
     Put_Line("The result for part 1 is: " & Integer'Image(Solve_01));
     Put_Line("The result for Part 2 is: " & Integer'Image(Solve_02));
  end AOC2020.Day01;
#+END_SRC

#+BEGIN_SRC ada :tangle ada/day01.adb
  with AOC2020.Day01;
  procedure Day01 is
  begin
    null;
  end Day01;
#+END_SRC

In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day01
  ./day01
#+END_SRC

#+RESULTS:
: Advent of Code 2020 - Day 01:
: 
: The result for part 1 is:  982464
: The result for Part 2 is:  162292410
