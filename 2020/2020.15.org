#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 15
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-15)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-15
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-15)
#+END_SRC
** Input
The input is a small set of numbers:
#+BEGIN_QUOTE
5,2,8,16,18,0,1
#+END_QUOTE
I'll hard code them.
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input* '(5 2 8 16 18 0 1))
#+END_SRC
** Part 1
After the initial sequence of numbers, the next number spoken is
either =0= if it's the first time the number is spoken or =age= of the
number otherwise. What's the 2020th number?

Since we only need 2020, for this part I'll just use a vector. It
won't be efficient if we're expected to go much longer in part 2.
#+NAME: slower-memory
#+BEGIN_SRC lisp :results silent
  (defun number-age (number vector)
    (loop for i from (- (length vector) 2) downto 0
       if (= number (aref vector i))
       do (return-from number-age (1- (- (length vector) i))))
    0)
  (defun slower-memory (initial target)
    (let ((numbers (make-array target :initial-element 0 :fill-pointer 0)))
      (loop for i in initial
         do (vector-push i numbers))
      (loop for i from (length initial) below target
         for number = (aref numbers (1- i))
         for age = (number-age number numbers)
         do (vector-push age numbers))
      (aref numbers (1- target))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 15 A: ~a~%" (slower-memory *input* 2020)))
#+END_SRC
** Part 2
I was right, second part is with a *much* larger target
point. 30000000. I've decided to start it up while I contemplate a
more efficient solution.

So the *faster* way will be to use a hash table per number. I'll
update its age based on the current count.
#+NAME: faster-memory
#+BEGIN_SRC lisp :results silent
  (defun faster-memory (initial target)
    (let ((numbers (make-hash-table)))
      (loop for i in initial
         for index from 1
         do (setf (gethash i numbers) index))
      (loop for i from (length initial) below target
         with number = (last initial)
         for index = (gethash number numbers 0)
         do (setf (gethash number numbers) i)
           (if (zerop index)
               (setf number 0)
               (setf number (- i index)))
         finally (return number))))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 15 B: ~a~%" (faster-memory *input* 30000000)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<input>>
  <<slower-memory>>
  <<faster-memory>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 15 A: 517
: Problem 15 B: 1047739
** Test Cases
A lot of test cases were provided for today, might as well use them.
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2020.15)
  (in-suite aoc.2020.15)
  (test slower
    (is (= 0 (slower-memory '(0 3 6) 10)))
    (is (= 436 (slower-memory '(0 3 6) 2020)))
    (is (= 1 (slower-memory '(1 3 2) 2020)))
    (is (= 10 (slower-memory '(2 1 3) 2020)))
    (is (= 27 (slower-memory '(1 2 3) 2020)))
    (is (= 78 (slower-memory '(2 3 1) 2020)))
    (is (= 438 (slower-memory '(3 2 1) 2020)))
    (is (= 1836 (slower-memory '(3 1 2) 2020))))

  (test faster
    (is (= 0 (faster-memory '(0 3 6) 10)))
    (is (= 436 (faster-memory '(0 3 6) 2020)))
    (is (= 1 (faster-memory '(1 3 2) 2020)))
    (is (= 10 (faster-memory '(2 1 3) 2020)))
    (is (= 27 (faster-memory '(1 2 3) 2020)))
    (is (= 78 (faster-memory '(2 3 1) 2020)))
    (is (= 438 (faster-memory '(3 2 1) 2020)))
    (is (= 1836 (faster-memory '(3 1 2) 2020))))

  (run! 'aoc.2020.15)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2020.15
:  Running test SLOWER ........
:  Running test FASTER ........
:  Did 16 checks.
:     Pass: 16 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day15.adb
  with AOC2020.Day15;
  procedure Day15 is
  begin
    AOC2020.Day15.Run;
  end Day15;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2020-day15.ads
  package AOC2020.Day15 is
     procedure Run;
  end AOC2020.Day15;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2020-day15.adb
  <<ada-packages>>
  package body AOC2020.Day15 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2020 - Day 15");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2020.Day15;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day15
  ./day15
#+END_SRC

#+RESULTS:
