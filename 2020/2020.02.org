#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 02
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-02)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-02
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-02)
#+END_SRC
** Input
I wrote tw versions of the parser. The first, a hack just splitting
the string on spaces and then doing some cleanup:
#+BEGIN_SRC lisp :tangle no :results silent
  (defun parse-input (line)
    (let ((split (cl-ppcre:split " " line)))
      (list (mapcar #'parse-integer (cl-ppcre:split "-" (first split)))
            (char (second split) 0)
            (third split))))
#+END_SRC
The second using the =parseq= package to write something a bit more
coherent:
#+NAME: parse-input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun parse-input (line)
    (with-local-rules
      (defrule numbers () (+ digit) (:string) (:function #'parse-integer))
      (defrule letter () (char "a-z"))
      (defrule password () (+ (char "a-z")) (:string))
      (defrule line () (and numbers "-" numbers " " letter ": " password)
        (:choose 0 2 4 6))
      (parseq 'line line)))
#+END_SRC
#+NAME: read-input
#+BEGIN_SRC lisp :noweb yes :results silent
  <<parse-input>>
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-input line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/02.txt"))
#+END_SRC
** Part 1
The task is to count how many passwords are valid. Each line of input
contains the minimum and maximum number of times a character (after
the numbers) should appear in the following password.
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun old-is-valid (password-and-rule)
    (destructuring-bind (min max char password) password-and-rule
      (<= min (count char password) max)))
  (defun problem-a () (format t "Problem 02 A: ~a~%" (count-if #'old-is-valid *input*)))
#+END_SRC
** Part 2
Turns out those aren't counts, but positions. And the character should
only appear in one of them.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun new-is-valid (password-and-rule)
    (destructuring-bind (first second char password) password-and-rule
      (or (and (not (char= char (char password (1- first))))
               (char= char (char password (1- second))))
          (and (not (char= char (char password (1- second))))
               (char= char (char password (1- first)))))))

  (defun problem-b () (format t "Problem 02 B: ~a~%" (count-if #'new-is-valid *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 02 A: 465
: Problem 02 B: 294
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2020.02)
  (in-suite aoc.2020.02)

  (run! 'aoc.2020.02)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2020.02
:  Didn't run anything...huh?
** Thoughts
** Ada
A simple runner for Day 2.
#+BEGIN_SRC ada :tangle ada/day02.adb
  with AOC2020.Day02;
  procedure Day02 is
  begin
    null;
  end Day02;
#+END_SRC
Specification file for the actual solution.
#+BEGIN_SRC ada :tangle ada/aoc2020-day02.ads
  package AOC2020.Day02 is
     function Solve_01 return Integer;
     function Solve_02 return Integer;
  end AOC2020.Day02;
#+END_SRC
#+BEGIN_SRC ada :tangle ada/aoc2020-day02.adb
  with Ada.Containers.Vectors;
  with Text_Io; use Text_Io;
  with GNAT.Regpat; use GNAT.Regpat;
  with Ada.Text_Io.Unbounded_Io; use Ada.Text_Io.Unbounded_Io;
  with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
  with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
  package body AOC2020.Day02 is

     type Password is record
        Min_Or_Pos : Positive;
        Max_Or_Pos : Positive;
        C : Character;
        P : Unbounded_String;
     end record;

     package Password_Vectors is new Ada.Containers.Vectors
       (Index_Type => Natural,
        Element_Type => Password);
     use Password_Vectors;

     Input : Vector;

     function Old_Valid(P : Password) return Boolean is
        Count : Natural := 0;
     begin
        for I in 1..Length(P.P) loop
           if P.C = Element (P.P, I)
           then
              Count := Count + 1;
           end if;
        end loop;
        return (P.Min_Or_Pos <= Count) and (Count <= P.Max_Or_Pos);
     end Old_Valid;

     function Solve_01 return Integer is
        Result : Integer := 0;
     begin
        for I in Input.Iterate loop
           if Old_Valid(Input(I))
           then
              Result := Result + 1;
           end if;
        end loop;
        return Result;
     end Solve_01;

     function New_Valid(P : Password) return Boolean is
     begin
        return (Element (P.P, P.Min_Or_Pos) = P.C xor Element (P.P, P.Max_Or_Pos) = P.C);
     end New_Valid;
     function Solve_02 return Integer is
        Result : Integer := 0;
     begin
        for I in Input.Iterate loop
           if New_Valid(Input(I))
           then
              Result := Result + 1;
           end if;
        end loop;
        return Result;
     end Solve_02;

     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;

  begin
     declare
        Input_File : file_type;
        Line : Unbounded_String;
        P : Password;

     begin
        Open (Input_File, in_file, "../input/02.txt");
        loop
           exit when end_of_file (Input_File);
           Get_Line (input_file, Line);
           Parse_Line(Line, P);
           Input.Append (P);
        end loop;
     end;
     Put_Line("Advent of Code 2020 - Day 02:"); New_Line;
     Put_Line("The result for part 1 is: " & Integer'Image(Solve_01));
     Put_Line("The result for Part 2 is: " & Integer'Image(Solve_02));
  end AOC2020.Day02;
#+END_SRC

In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day02
  ./day02
#+END_SRC

#+RESULTS:
: Advent of Code 2020 - Day 02:
: 
: The result for part 1 is:  465
: The result for Part 2 is:  294
