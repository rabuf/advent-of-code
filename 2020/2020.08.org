#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 08
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-08)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-08
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-08)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (cl-ppcre:split " " line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/08.txt"))
#+END_SRC
** Part 1
Well, it was inevitable. It's a machine simulation.

Three instructions:
- jmp :: jumps by whatever number offset follows
- nop :: does nothing
- acc :: adds value to accumulator register
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun simulate-a (input)
    (loop with pc = 0
       until (<= (length input) pc)
       with acc = 0
       with executed = (make-hash-table)
       do (when (gethash pc executed)
              (return acc))
         (setf (gethash pc executed) t)
         (cond ((string= "nop" (first (elt input pc)))
                (incf pc))
               ((string= "jmp" (first (elt input pc)))
                (incf pc (parse-integer (second (elt input pc)))))
               ((string= "acc" (first (elt input pc)))
                (incf acc (parse-integer (second (elt input pc))))
                (incf pc)))))
  (defun problem-a () (format t "Problem 08 A: ~a~%" (simulate-a *input*)))
#+END_SRC
** Part 2
I need to change a nop to jmp or jmp to nop (only one) in the program
so that it terminates. When it terminates normally return the value of
the accumulator.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun simulate-b (input)
    (loop for i from 0 below (length input)
       if (or (string= "nop" (first (elt input i)))
              (string= "jmp" (first (elt input i))))
       do (let ((modified (copy-tree input)))
            (cond ((string= "nop" (first (elt input i)))
                   (setf (car (nth i modified)) "jmp"))
                  ((string= "jmp" (first (elt input i)))
                   (setf (car (nth i modified)) "nop")))
            (loop named simulator
               with pc = 0
               with acc = 0
               with executed = (make-hash-table)
               if (= (length modified) pc)
               do (return-from simulate-b acc)
               do (when (gethash pc executed)
                    (return-from simulator))
                 (setf (gethash pc executed) t)
                 (cond ((string= "nop" (first (elt modified pc)))
                        (incf pc))
                       ((string= "jmp" (first (elt modified pc)))
                        (incf pc (parse-integer (second (elt modified pc)))))
                       ((string= "acc" (first (elt modified pc)))
                        (incf acc (parse-integer (second (elt modified pc))))
                        (incf pc)))))))
  (defun problem-b () (format t "Problem 08 B: ~a~%" (simulate-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 08 A: 1709
: Problem 08 B: 1976
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2020.08)
  (in-suite aoc.2020.08)
  (defparameter *test-input*
                 '(("nop" "+0")
                   ("acc" "+1")
                   ("jmp" "+4")
                   ("acc" "+3")
                   ("jmp" "-3")
                   ("acc" "-99")
                   ("acc" "+1")
                   ("jmp" "-4")
                   ("acc" "+6")))
  (test part-1
    (is (= 5 (simulate-a *test-input*))))
  (test part-2
    (is (= 8 (simulate-b *test-input*))))
  (run! 'aoc.2020.08)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2020.08
:  Running test PART-1 .
:  Running test PART-2 .
:  Did 2 checks.
:     Pass: 2 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
** Ada
A simple simulator for a handheld gaming machine.

Repeating from above, there are three instructions:
- nop :: does nothing
- jmp :: adds value to pc
- acc :: adds value to acc
The two parts require us to return the value of the accumulator based
on certain conditions. In the first one, the program runs until an
instruction repeats, we return the accumulator *before* the repeated
instruction. In the second, we turn nops to jmps and jmps to nops (but
only one) until the program terminates properly (otherwise it'll still
repeat an instruction) and return the last accumulator value.
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day08.adb
  with AOC2020.Day08;
  procedure Day08 is
  begin
    AOC2020.Day08.Run;
  end Day08;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2020-day08.ads
  package AOC2020.Day08 is
     procedure Run;
  end AOC2020.Day08;
#+END_SRC
*** Withs and Uses
Only using a couple packages today. I'm using unbounded IO, it
simplifies a few things.
#+NAME: with-use
#+BEGIN_SRC ada
  with Text_IO; use Text_IO;
  with Ada.Containers.Vectors;
  with Ada.Containers.Ordered_Sets;
  with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
  with Ada.Text_IO.Unbounded_IO; use Ada.Text_IO.Unbounded_IO;
#+END_SRC
*** Types
Two types will be created. One using the generic vectors package,
which will hold instructions.
#+NAME: types
#+BEGIN_SRC ada
  type Operation is (Nop, Jmp, Acc);
  type Instruction is record
      Op : Operation;
      Value : Integer;
  end record;

  package Instruction_Vectors is new Ada.Containers.Vectors
    (Index_Type => Natural,
     Element_Type => Instruction);
  use Instruction_Vectors;

  package Boolean_Sets is new Ada.Containers.Ordered_Sets
    (Element_Type => Natural);
  use Boolean_Sets;
#+END_SRC
*** Parse line
#+NAME: parse-line
#+BEGIN_SRC ada
  procedure Parse_Line (Line : Unbounded_String; Inst : out Instruction) is
     Op : Operation;
     Value : Integer;
  begin
     Op := Operation'Value(Slice(Line, 1, 3));
     Value := Integer'Value(Slice(Line, 5, Length(Line)));
     Inst := (Op => Op, Value => Value);
  end Parse_Line;
#+END_SRC
*** Read file
#+NAME: read-line
#+BEGIN_SRC ada
  procedure Read_File (IV : out Vector) is
     Fin : File_Type;
  begin
     Open (Fin, In_File, "../input/08.txt");
     while not End_Of_File(Fin) loop
        declare
           Line : Unbounded_String;
           Inst : Instruction;
        begin
           Line := Get_Line(Fin);
           Parse_Line(Line, Inst);
           IV.Append(Inst);
        end;
     end loop;
     Close (Fin);
  end Read_File;
#+END_SRC
*** Part 1
Now that I have the input parsed, I can go about simulating it. I've
decided to add one more package to the set, Ordered_Set. This will be
used to track which instructions have been run before.
#+NAME: part-1
#+BEGIN_SRC ada
  function Simulate (Instructions : in Vector; Normal : out Boolean) return Integer
  is
     PC : Natural := 0;
     Accumulator : Integer := 0;
     Run : Set;
  begin
     Normal := False;
     loop
        if Run.Contains(PC)
        then
           return Accumulator;
        else
           Run.Insert(PC);
        end if;

        case Instructions(PC).Op is
           when Nop =>
              PC := PC + 1;
           when Jmp =>
              PC := PC + Instructions(PC).Value;
           when Acc =>
              Accumulator := Accumulator + Instructions(PC).Value;
              PC := PC + 1;
        end case;
        exit when PC = Integer(Instructions.Length);
     end loop;
     Normal := True;
     return Accumulator;
  end Simulate;
#+END_SRC
*** Rest
Gathering all the parts together.
#+BEGIN_SRC ada :noweb yes :tangle ada/aoc2020-day08.adb
  <<with-use>>
  package body AOC2020.Day08 is
     <<types>>
     <<parse-line>>
     <<read-line>>
     <<part-1>>
     procedure Run is
        Instructions : Vector;
        Normal_Finish : Boolean;
        Result : Integer;
     begin
        Read_File (Instructions);
        Put_Line("Advent of Code 2020 Day 08 -"); New_Line;
        Result := Simulate(Instructions, Normal_Finish);
        Put_Line("The result for Part 1 is: " & Result'Image);
        Normal_Finish := False;
        for C in Instructions.Iterate loop
           case Instructions(C).Op is
              when Nop =>
                 Instructions(C).Op := Jmp;
              when Jmp =>
                 Instructions(C).Op := Nop;
              when Acc =>
                 null;
           end case;
           if Instructions(C).Op /= Acc
           then
              Result := Simulate(Instructions, Normal_Finish);
              if Normal_Finish
              then
                 Put_Line("The result for Part 2 is: " & Result'Image);
                 exit;
              end if;
           end if;
           case Instructions(C).Op is
              when Nop =>
                 Instructions(C).Op := Jmp;
              when Jmp =>
                 Instructions(C).Op := Nop;
              when Acc =>
                 null;
           end case;
        end loop;
     end Run;
  end AOC2020.Day08;
#+END_SRC
*** Execution script
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day08
  ./day08
#+END_SRC

#+RESULTS:
