#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 07
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-07)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-07
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-07)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-rule line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/07.txt"))
#+END_SRC
** Part 1
I have a =shiny gold= bag, and want to carry it in at least one other
bag. How many ways are there to carry it?

Each line specifies a bag and the bags it can hold. Time to break out
=cl-ppcre=. I'm able to 
#+NAME: rule-to-list
#+BEGIN_SRC lisp :results silent
  (defun parse-rule (rule)
    (list
     (let ((h (cl-ppcre:scan-to-strings "([a-z ]* bags contain)" rule)))
       (subseq h 0 (- (length h) 13)))
     (loop for m in (cl-ppcre:all-matches-as-strings "(\\d+ [a-z ]* bags?)" rule)
        for contains = (nth-value 1 (cl-ppcre:scan-to-strings "(\\d+) ([a-z ]+) bag" m))
        collect (list (parse-integer (elt contains 0))
                      (elt contains 1)))))
#+END_SRC

I'm moving slow today, so no reason to rush now. I want a count of,
directly or indirectly, how many bags can contain a =shiny gold=
bag. No need to bother with numbers. I'm going to do my usual hash
table as graph routine, it's convenient. I'll use the right hand side
(what each bag can contain) as the key, and the left hand side will be
part of the contents.

#+NAME: to-graph
#+BEGIN_SRC lisp :results silent
  (defun rules-to-graph (rules)
    (loop
       for (bag contains) in rules
       with graph = (make-hash-table :test #'equal)
       do (loop for (n b) in contains
             do (push bag (gethash b graph)))
       finally (return graph)))
#+END_SRC

#+NAME: count-containing-bags
#+BEGIN_SRC lisp :results silent
  (defun count-containing-bags (graph bag)
    (loop
       with queue = (list bag)
       with containing-bags = nil
       until (null queue)
       for next = (pop queue)
       do
         (loop for x in (gethash next graph)
            do (pushnew x queue)
              (pushnew x containing-bags))
       finally (return (values (length containing-bags) containing-bags))))
#+END_SRC
#+NAME: test-input
#+BEGIN_SRC lisp :results silent
  (defparameter *test-input* '(("light red" ((1 "bright white") (2 "muted yellow")))
                               ("dark orange" ((3 "bright white") (4 "muted yellow")))
                               ("bright white" ((1 "shiny gold")))
                               ("muted yellow" ((2 "shiny gold") (9 "faded blue")))
                               ("shiny gold" ((1 "dark olive") (2 "vibrant plum" )))
                               ("dark olive" ((3 "faded blue") (4 "dotted black")))
                               ("vibrant plum" ((5 "faded blue") (6 "dotted black")))
                               ("faded blue" ())
                               ("dotted black" ())))
#+END_SRC

#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a ()
    (format t "Problem 07 A: ~a~%"
            (count-containing-bags (rules-to-graph *input*) "shiny gold")))
#+END_SRC
** Part 2
Now we need to know how many bags the shiny bag has to contain. So
instead of inverting the graph (like above) I'll treat it as
presented. Still putting it into a hash table, and then writing a
recursive function.
#+NAME: counting-graph
#+BEGIN_SRC lisp :results silent
  (defun rules-to-counting-graph (rules)
    (loop with graph = (make-hash-table :test #'equal)
       finally (return graph)
       for (bag contains) in rules
       do (setf (gethash bag graph) contains)))
#+END_SRC

#+NAME: count-bags-in-bag
#+BEGIN_SRC lisp :results silent
  (defun count-bags-in-bag (graph bag)
     (loop for (c b) in (gethash bag graph)
        sum (* c (1+ (count-bags-in-bag graph b)))))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b ()
    (format t "Problem 07 B: ~a~%"
            (count-bags-in-bag (rules-to-counting-graph *input*) "shiny gold")))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<rule-to-list>>
  <<read-input>>
  <<input>>
  <<to-graph>>
  <<counting-graph>>
  <<count-bags-in-bag>>
  <<count-containing-bags>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 07 A: 213
: Problem 07 B: 38426
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both :noweb yes
  <<test-input>>
  (def-suite aoc.2020.07)
  (in-suite aoc.2020.07)
  (test part-1
    (is (= 4 (count-containing-bags (rules-to-graph *test-input*) "shiny gold"))))
  (run! 'aoc.2020.07)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2020.07
:  Running test PART-1 .
:  Did 1 check.
:     Pass: 1 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
** Ada
I made a stupid mistake in this code today. I didn't consider the
scope of the inner container (originally it was a vector, I turned it
into an order map which was better for performance
anyways). Basically, every time I read a new line, I added all its
contents to the same shared container for every bag. Naturally, that
did *not* work well. Once I realized I was a moron, I put in a *copy*
of the container. If I had a local declare block inside the read line
loop, this wouldn't have been an issue at all. Oops.
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day07.adb
  with AOC2020.Day07;
  procedure Day07 is
  begin
    AOC2020.Day07.Run;
  end Day07;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2020-day07.ads
  package AOC2020.Day07 is
     procedure Run;
  end AOC2020.Day07;
#+END_SRC
*** Implementation
The way I implemented this in Lisp may not translate directly here,
but I'll try. Ada has several generic collections, specifically
[[http://www.ada-auth.org/standards/aarm12_w_tc1/html/AA-A-18-6.html][Ordered Maps]] for today.

I'll create a custom record as well, for today I'm actually going to
show off a bit of literate programming.
**** with/use
These are the packages used today.

1. =Ordered_Maps= - The key will be a =String=, the description of a
   bag, and the value will be another map.
2. =Text_IO= - generally useful if you want to display anything.
3. =Ada.Strings.Fixed= - contains functions like =Index=, useful for
   parsing.
#+NAME: with-use
#+BEGIN_SRC ada
  with Ada.Containers.Ordered_Maps;  -- 1
  with Text_IO; use Text_IO;         -- 2
  with Ada.Strings.Fixed;            -- 3
  use Ada.Strings.Fixed;
#+END_SRC
**** Types and Data Structures
To ensure enough room in each description I'm just going to give them
80 characters. I know, from inspection, this is more than enough.
#+NAME: description-type
#+BEGIN_SRC ada
  subtype Description_T is String(1..80);
#+END_SRC
Since each bag contains 0 or more other bags, we'll store what they
contain in another map. This will be handy for iteration later, too.
#+NAME: content-map
#+BEGIN_SRC ada
  package Content_Maps is new Ada.Containers.Ordered_Maps
    (Element_Type => Natural,
     Key_Type => Description_T);
#+END_SRC
Since Description_T is "just" a string, it inherits the string <
operator (needed for the Key_Type). The Map = operator isn't directly
visible so has to be passed as a parameter to the generic package.
#+NAME: description->contains
#+BEGIN_SRC ada
  package Bag_Maps is new Ada.Containers.Ordered_Maps
    (Element_Type => Content_Maps.Map,
     Key_Type => Description_T,
     "=" => Content_Maps."=");
#+END_SRC
At this point, I believe all needed types have been constructed. The
hard part (since I know the algorithms I intend to use) will be
[[Parsing][parsing]].
**** Parsing
Each line consists of the form:
#+BEGIN_EXAMPLE
  <description> bags contain( <number> <description> bags?,?| no other bags)+.
#+END_EXAMPLE
I was going to use regular expressions, but I found that I didn't need
it. I developed the following iteratively. It may have been easier if
I'd used unbounded strings, but this seems to be working.
#+NAME: parse-line
#+BEGIN_SRC ada
  procedure Parse_Line (Line : String; D : out Description_T; C : out Content_Maps.Map) is
     I, J, K : Natural := 0;
     Bag_Description : Description_T;
  begin
     I := Index (Line, "bags contain", 1);
     D := (others => ' ');
     D(1..I-2) := Line(Line'First..I-2);
     I := I + 13;
     loop
        J := Index (Line, "bag", I);
        if "no other" = Line(I..J-2) then
           C := Content_Maps.Empty_Map;
           exit;
        else
           K := Index (Line, " ", I);
           Bag_Description := (others => ' ');
           Bag_Description(1..(J-2-K)) := Line (K+1..J-2);
           C.Insert(Bag_Description, Integer'Value(Line(I..K-1)));
        end if;
        I := Index (Line, ",", J);
        exit when I = 0;
        I := I + 2;
     end loop;
  end Parse_Line;
#+END_SRC
**** Part 1
Now for the actual interesting work. We want to know how many bags can
contain the bag with the description "shiny gold".
#+NAME: part-1
#+BEGIN_SRC ada
  function Recursive_Locate (Bags : in Bag_Maps.Map; Current, Target : Description_T)
                            return Boolean is
  begin
     if Bags(Current).Contains(Target) then return True; end if;
     for B in Bags(Current).Iterate loop
        if Recursive_Locate(Bags, Content_Maps.Key(B), Target)
        then return True;
        end if;
     end loop;
     return False;
  end Recursive_Locate;
  function Number_Of_Bags_That_Hold (Bags : in Bag_Maps.Map; D : Description_T)
                                    return Natural is
     Count : Natural := 0;
  begin
     for B in Bags.Iterate loop
        if Bag_Maps.Key(B) = D then null;
        elsif Recursive_Locate(Bags, Bag_Maps.Key(B), D)
        then Count := Count + 1;
        end if;
     end loop;
     return Count;
  end Number_Of_Bags_That_Hold;
#+END_SRC
**** Part 2
For part 2 we need to find how many bags our bag, the shiny gold one,
contains.
#+NAME: part-2
#+BEGIN_SRC ada
  function Recursive_Count (Bags : in Bag_Maps.Map; Current : Description_T)
                            return Integer is
     Count : Natural := 0;
  begin
     for B in Bags(Current).Iterate loop
        Count := Count + (1 + Recursive_Count(Bags, Content_Maps.Key(B)))
          ,* Bags(Current)(Content_Maps.Key(B));
     end loop;
     return Count;
  end Recursive_Count;
#+END_SRC
**** Rest
#+NAME: read-file
#+BEGIN_SRC ada
  procedure Read_File (Bags : out Bag_Maps.Map) is
     Fin : File_Type;
     Line : String (1..300);
     Length : Natural;
     D : Description_T;
     C : Content_Maps.Map;
  begin
     Open (Fin, In_File, "../input/07.txt");
     while not End_Of_File (Fin) loop
        Get_Line(Fin, Line, Length);
        Parse_Line(Line(1..Length), D, C);
        Bags.Insert (D, Content_Maps.Copy(C));
        C.Clear;
     end loop;
     Close (Fin);
  end Read_File;
#+END_SRC
#+BEGIN_SRC ada :noweb yes :tangle ada/aoc2020-day07.adb
  <<with-use>>
  package body AOC2020.Day07 is
     <<description-type>>
     <<content-map>>
     <<description->contains>>
     function Make_Description(S : String) return Description_T is
       D : Description_T;
     begin
        D := (others => ' ');
        D(S'First..S'Last) := S;
        return D;
     end Make_Description;

     <<parse-line>>
     <<read-file>>
     <<part-1>>
     <<part-2>>
     procedure Run is
        Bags : Bag_Maps.Map;
        D : Description_T := Make_Description("shiny gold");
     begin
        Read_File(Bags);
        Put_Line("Advent of Code 2020 - Day 07"); New_Line;
        Put_Line("The result for Part 1 is: " & Number_Of_Bags_That_Hold(Bags, D)'Image); 
        Put_Line("The result for Part 2 is: " & Recursive_Count(Bags, D)'Image);
     end Run;
  end AOC2020.Day07;
#+END_SRC
*** Execution script
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.
#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day07
  ./day07
#+END_SRC

#+RESULTS:
: Advent of Code 2020 - Day 07
: 
: The result for Part 1 is:  213
: The result for Part 2 is:  38426
