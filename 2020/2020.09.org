#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 09
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-09)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-09
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-09)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/09.txt"))
#+END_SRC
** Part 1
#+NAME: first-invalid
#+BEGIN_SRC lisp :results silent
  (defun is-valid (number list)
    (loop for l in list
       do (when (member (- number l) (remove l list))
            (return t))))
  (defun first-invalid (list)
    (loop for i from 25 below (length list)
       if (not (is-valid (elt list i) (subseq list (- i 25) i)))
       do (return (elt list i))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 09 A: ~a~%" (first-invalid *input*)))
#+END_SRC
** Part 2
Find a contiguous block that sums to the value in part 1. Can be
anywhere in the data, return the sum of the smallest and largest.
#+BEGIN_SRC lisp :results silent
  (defun find-block (list target)
    (loop for i from 2 to (length list)
       do (loop for j from 0
             while (<= (+ j i) (length list))
             for s = (subseq list j (+ j i))
             for total = (reduce #'+ s)
             if (= target total)
             do (return-from find-block
                  (+ (reduce #'min s)
                     (reduce #'max s))))))
#+END_SRC
So a dumb thing about the above is that I expand the window on the
outside. I'm also using =elt= which is slow for accessing elements of
lists, especially deeper into the list structure.

The following is faster, though perhaps not as clean as it could
be. Taking advantage of the list structure. Getting either the car or
cdr of a cons cell is fast. The sum, and min and max, are collected as
the window is expanded so when the target is found (if it is found)
$min + max$ can be returned directly.
#+BEGIN_SRC lisp :results silent
  (defun find-block (list target)
    (loop for l = list then (cdr l)
       do (loop named inner
             for w in (cdr l)
             for min = (min (car l) w) then (min min w)
             for max = (max (car l) w) then (max max w)
             for total = (+ (car l) w) then (incf total w)
             until (< target total)
             if (= target total)
             do (return-from find-block (+ min max)))))
#+END_SRC

This one is the fastest. Though it's not really any different than the
above in terms of the algorithm. It's completely recursive, no loops
left.
#+NAME: find-block
#+BEGIN_SRC lisp :results silent
  (defun find-block (list target)
    (labels ((recurse (w min max sum)
               (cond ((< target sum) nil)
                     ((= sum target) (+ min max))
                     ((null w) nil)
                     (t (recurse
                         (cdr w)
                         (min min (car w))
                         (max max (car w))
                         (+ sum (car w)))))))
      (or (recurse (cddr list)
                   (min (car list) (cadr list))
                   (max (car list) (cadr list))
                   (+ (car list) (cadr list)))
          (find-block-recurse (cdr list) target))))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b ()
    (format t "Problem 09 B: ~a~%"
            (find-block *input* 552655238)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<first-invalid>>
  <<find-block>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 09 A: 552655238
: Problem 09 B: 70672245
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2020.09)
  (in-suite aoc.2020.09)

  (run! 'aoc.2020.09)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day09.adb
  with AOC2020.Day09;
  procedure Day09 is
  begin
    AOC2020.Day09.Run;
  end Day09;
#+END_SRC
*** Withs and uses
#+NAME: with-use
#+BEGIN_SRC ada
  with Text_IO; use Text_IO;
  with Ada.Text_IO;
  with Ada.Containers.Vectors;
#+END_SRC
*** Packages
#+NAME: vectors
#+BEGIN_SRC ada
  package Long_Long_Integer_Vectors is new Ada.Containers.Vectors
    (Element_Type => Long_Long_Integer,
     Index_Type => Natural);

  use Long_Long_Integer_Vectors;
  package Long_Long_Integer_Text_IO is new Ada.Text_IO.Integer_IO(Long_Long_Integer);
  use Long_Long_Integer_Text_IO;
#+END_SRC
*** Input
Input is straightforward, all lines contain integers so I'm using the
built-in =Ada.Integer_Text_IO= package.
#+NAME: read-file
#+BEGIN_SRC ada
  procedure Read_File (Data : out Vector) is
     Fin : File_Type;
     N : Long_Long_Integer;
  begin
     Open (Fin, In_File, "../input/09.txt");
     while not End_Of_File (Fin) loop
        Get(Fin, N);
        Data.Append(N);
     end loop;
     Close (Fin);
  end Read_File;
#+END_SRC
*** Part 1
This will be a simple iterative solution, like the second lisp one I
did above.
#+NAME: part-1
#+BEGIN_SRC ada
  function Is_Valid_Code (Data : Vector; I : Natural) return Boolean is
  begin
     for J in I - 26 .. I - 1 loop
        for K in J + 1 .. I - 1 loop
           if Data(I) = Data(J) + Data(K)
           then return True;
           end if;
        end loop;
     end loop;
     return False;
  end Is_Valid_Code;
  function Invalid_Code (Data : Vector) return Long_Long_Integer is
     Result : Long_Long_Integer := 0;
  begin
     for I in Data.First_Index + 26 .. Data.Last_Index loop
        if not Is_Valid_Code(Data, I)
          then return Data(I);
        end if;
     end loop;
     return Result;
  end Invalid_Code;
#+END_SRC
*** Part 2
#+BEGIN_SRC ada
  function Find_Block (Data : Vector; Target : Long_Long_Integer) return Long_Long_Integer is
     Min, Max, Sum : Long_Long_Integer := 0;
  begin
     for I in Data.First_Index .. Data.Last_Index - 2 loop
        Min := Data (I);
        Max := Data (I);
        Sum := Data (I);
        for J in I + 1 .. Data.Last_Index loop
           Min := Long_Long_Integer'Min(Data (J), Min);
           Max := Long_Long_Integer'Max(Data (J), Max);
           Sum := Sum + Data (J);
           exit when Target < Sum;
           if Sum = Target then return Min + Max; end if;
        end loop;
     end loop;
     return Min + Max;
  end Find_Block;
#+END_SRC
After seeing some other solutions and doing some algebra, I realized
I'd selected a very inefficient approach (above). Finding the range
(though not the min/max) can be done in a single pass by keeping a
running sum.
#+NAME: part-2
#+BEGIN_SRC ada
  function Find_Block (Data : Vector; Target : Long_Long_Integer) return Long_Long_Integer is
     Min, Max, Sum : Long_Long_Integer := 0;
     I, J : Natural;
  begin
     I := Data.First_Index;
     J := I + 1;
     Sum := Data(I) + Data(J);
     while Sum /= Target and J <= Data.Last_Index loop
        if Target < Sum then
           Sum := Sum - Data(I);
           I := I + 1;
        end if;
        if I = J or Sum < Target then
           J := J + 1;
           Sum := Sum + Data(J);
        end if;
     end loop;
     Min := Data(I);
     Max := Data(I);
     for K in I+1 .. J loop
        Min := Long_Long_Integer'Min(Data (J), Min);
        Max := Long_Long_Integer'Max(Data (J), Max);
     end loop;
     return Min + Max;
  end Find_Block;
#+END_SRC
That runs in about 1/3rd the time than the previous version needed.
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2020-day09.ads
  package AOC2020.Day09 is
     procedure Run;
  end AOC2020.Day09;
#+END_SRC
*** Rest
Actual implementation body.
#+BEGIN_SRC ada :noweb yes :tangle ada/aoc2020-day09.adb
  <<with-use>>
  package body AOC2020.Day09 is
     <<vectors>>
     <<read-file>>
     <<part-1>>
     <<part-2>>
     procedure Run is
       Data : Vector;
       Invalid : Long_Long_Integer;
     begin
        Read_File (Data);
        Put_Line ("Advent of Code 2020 - Day 09"); New_Line;
        Invalid := Invalid_Code(Data);
        Put_Line ("The result for Part 1 is: " & Invalid'Image);
        Put_Line ("The result for Part 2 is: " & Find_Block(Data, Invalid)'Image);
     end Run;
  end AOC2020.Day09;
#+END_SRC
*** Execution
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day09
  ./day09
#+END_SRC

#+RESULTS:
: Advent of Code 2020 Day 09 -
: 
: The result for Part 1 is:  552655238
: The result for Part 2 is:  70672245
