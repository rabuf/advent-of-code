#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 10
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2020-10)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2020-10
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2020-10)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-integer line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (sort (read-input "input/10.txt") #'<))
#+END_SRC
** Part 1
We have a set of adaptors and want to connect them all together.

First, connect them all and count the number of one and three volt
differences, multiply that. (I screwed up with a typo and incremented
1 for both cases, set me back a bit.)

The =copy-seq= is because =sort= returns a sorted list, but can
alter the original.
#+NAME: count-jolts
#+BEGIN_SRC lisp :results silent
  (defun count-jolts (adaptors)
    (loop for a in (cons 0 adaptors)
       for b in adaptors
       with one = 0
       with three = 1
       do (ecase (- b a)
            (1 (incf one))
            (3 (incf three))
            (2 nil))
       finally (return (* one three))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 10 A: ~a~%" (count-jolts *input*)))
#+END_SRC
** Part 2
The second part is to count all subsets of the adaptors that can still
chain between 0 and $(max adaptors) + 3$.

I spent some time trying to create combinations of all adaptors, but
that's an insanely large number given the input size to test quickly,
and most aren't viable.

So instead I wrote a recursive routine that would stop short if an
adaptor chain can't continue. It works on the test inputs very
quickly. However, it's taking a lot longer on the real input.

How it works:

1. Check if we're out of adaptors and we can connect to the last one
   (max + 3). If yes, return 1.
2. Check if we're out of adaptors and /cannot/ connect to the last
   one. If yes, return 0.
3. Check if we can connect to the previous adaptor. If yes, branch. In
   one branch include the current one (we know this makes a viable
   chain segment) and in the other try without that adaptor.
4. In all other cases, just terminate.

#+BEGIN_SRC lisp :results silent
  (defun count-viable-chains (adaptors)
    (let ((adaptors (sort  (copy-seq adaptors) #'<))
          (max (+ 3 (reduce #'max adaptors)))
          (min 0))
      (labels ((recurse (prior list)
                 (cond ((and (null list)
                             (<= (- max prior) 3))
                        1)
                       ((null list)
                        0)
                       ((<= (- (car list) prior) 3)
                        (+ (recurse prior (cdr list))
                           (recurse (car list) (cdr list))))
                       (t 0))))
        (recurse min adaptors))))
#+END_SRC

I need a faster solution. The above works very quickly on both test
inputs, but is much too slow for the real input. I have some ideas on
how to use that recursive idea and reduce the run time, but I'm not
spending time on it. Below is a much faster version and should have
been obvious from part 1, it's the same program structure.

#+NAME: count-viable-chains
#+BEGIN_SRC lisp :results silent
  (defun count-viable-chains (adaptors)
    (loop for prev in (cons 0 adaptors)
       for curr in adaptors
       with a = 0 ;; 3 back
       with b = 0 ;; 2 back
       with c = 1 ;; 1 back (set to 1 for the 0-jolt source)
       do (ecase (- curr prev)
            (1 (psetf a b
                      b c
                      c (+ a b c)))
            (2 (psetf a 0
                      b c
                      c (+ b c)))
            (3 (psetf a 0
                      b 0
                      c c)))
       finally (return c)))
#+END_SRC


#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 10 B: ~a~%" (count-viable-chains *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<count-jolts>>
  <<count-viable-chains>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 10 A: 1885
: Problem 10 B: 2024782584832
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2020.10)
  (in-suite aoc.2020.10)
  (defparameter *short-test* (sort '(16 10 15 5 1 11 7 19 6 12 4) #'<))
  (defparameter *long-test*
    (sort
     '(28 33 18 42 31 14 46 20 48 47 24 23 49 45 19 38 39 11 1 32 25 35 8
       17 7 9 4 2 34 10 3)
     #'<))


  (test jolt-counter
    (is (= 35 (count-jolts *short-test*)))
    (is (= 220 (count-jolts *long-test*))))
  (test viable-chain-counter
    (is (= 8 (count-viable-chains *short-test*)))
    (is (= 19208 (count-viable-chains *long-test*))))
  (run! 'aoc.2020.10)

#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2020.10
:  Running test JOLT-COUNTER ..
:  Running test VIABLE-CHAIN-COUNTER ..
:  Did 4 checks.
:     Pass: 4 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
** Ada
Simple runner.
#+BEGIN_SRC ada :tangle ada/day10.adb
  with AOC2020.Day10;
  procedure Day10 is
  begin
    null;
  end Day10;
#+END_SRC
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2020-day10.ads
  package AOC2020.Day10 is
     procedure Run;
  end AOC2020.Day10;
#+END_SRC
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2020-day10.adb
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
  package body AOC2020.Day10 is
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        null;
     end Run;
  end AOC2020.Day10;
#+END_SRC

In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day10
  ./day10
#+END_SRC

#+RESULTS:
