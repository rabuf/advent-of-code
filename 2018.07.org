#+STARTUP: indent content
#+OPTIONS: num:nil toc:nil
* Day 7
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2018-07)=
4. Typing =C-c C-c= in the block [[answers][answers]].
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results none
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results none
  <<packages>>
  (defpackage :aoc-2018-07
    (:use :common-lisp
          :iterate)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2018-07)
#+END_SRC
** Input
The input this time is a sequence of steps like:
#+BEGIN_EXAMPLE
  Step C must be finished before step A can begin.
  Step C must be finished before step F can begin.
  Step A must be finished before step B can begin.
  Step A must be finished before step D can begin.
  Step B must be finished before step E can begin.
  Step D must be finished before step E can begin.
  Step F must be finished before step E can begin.
#+END_EXAMPLE
Parsing this will actually be pretty easy. Each step is a single
character. Each line contains a step followed by its successor step.
#+NAME: parse-line
#+BEGIN_SRC lisp :results none
  (defun parse-line (line)
    (multiple-value-bind (_ steps)
        (ppcre:scan-to-strings "Step ([A-Z]) must be finished before step ([A-Z]) can begin." line)
      (map 'list #'identity steps))) ;; turn the array into a list
#+END_SRC

#+NAME: read-input
#+BEGIN_SRC lisp :results none
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line line))))
#+END_SRC

#+NAME: input
#+BEGIN_SRC lisp :noweb yes
  <<parse-line>>
  <<read-input>>
  (defparameter *input*
    (read-input "input/7.txt"))
#+END_SRC

** Part 1
The problem is just a topological sort. Now, let's see if I can
remember how to do this. If I'd chosen erlang, =topsort= is backed
into the digraph library.

I guess my first step will be to setup a better data structure than we
have right now. I will create a hashtable of dependencies. The key is
a step, the value is all steps that must happen first.
#+NAME: dependency-table
#+BEGIN_SRC lisp :results none
  (defun dependency-table (edges)
    (let ((dependencies (make-hash-table :test 'equal)))
      ;; Ensure even things with no dependencies are in this table
      (iter (for (val key) in edges)
            (setf (gethash key dependencies) nil)
            (setf (gethash val dependencies) nil))
      (iter (for (val key) in edges)
            (unless (member val (gethash key dependencies) :test 'equal)
              (push val (gethash key dependencies))))
      dependencies))
#+END_SRC
From our input, now, we can see that both B and Q can be started
before anything else. If more than one is an option at a time we are
supposed to do them alphabetically. So, in this case, B would be
first.
#+BEGIN_SRC lisp
  (iter (for (key value) in-hashtable (dependency-table *input*))
                     (format t "~A depends on ~A~%" key value))
  ;; I depends on (F U P L H A T C Q)
  ;; Q depends on NIL
  ;; M depends on (B)
  ;; B depends on NIL
  ;; F depends on (W Q P A U E T D R)
  ;; R depends on NIL
  ;; S depends on (Q M G)
  ;; G depends on (B)
  ;; A depends on (C K T R D P M)
  ;; W depends on (Z)
  ;; Z depends on (G)
  ;; C depends on (J)
  ;; J depends on (M)
  ;; O depends on (P T A E V Y X I F L K)
  ;; K depends on (G)
  ;; L depends on (E H U T J Y)
  ;; Y depends on (Z M K)
  ;; P depends on (D T U H W Y L N)
  ;; N depends on (J)
  ;; X depends on (R T L Z G P B Q A F I U W Y V S)
  ;; U depends on (N E)
  ;; E depends on (N)
  ;; V depends on (N T M L C G F H U)
  ;; D depends on (G B K)
  ;; H depends on (Z R W)
  ;; T depends on (S N D)
#+END_SRC
Now, I'm going to basically blast away the contents of this hash
table. My algorithm is simple:

Identify all keys that have nil dependencies. Take the first,
alphabetically. Remove that entry from the table. Then remove that
element from each entry left in the table. Repeat until the hashtable
is empty. This may not be the best way, but it is a way and it'll work.
#+NAME: topsort
#+BEGIN_SRC lisp :results none
  (defun topsort (graph)
    (let ((table (dependency-table graph)))
      (iter (until (= 0 (hash-table-count table)))
            (let* ((options (iter (for (k v) in-hashtable table)
                                 (when (null v) (collect k))))
                   (sorted (sort options #'string<))
                   (step (car sorted)))
              (collect step)
              (remhash step table)
              (iter (for (k v) in-hashtable table)
                    (when (member step v :test #'string=)
                      (setf (gethash k table) (remove step v :test #'string=))))))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results none
  (defun problem-a () (format t "Problem 7a: ~{~a~}~%" (topsort *input*)))
#+END_SRC
** Part 2
We now have helper elves. Every task takes 60 seconds + 1 second *
letter of alphabet. (A = 1, B = 2, etc.)

The question is: How many seconds, with 4 assistants (5 total workers)
to complete the problem.

How to represent this? There's a tabular form in the problem
description that almost seems appropriate. Each worker could be an
array in time with the element of the array being the task they're
working on ("" if none). Using the topological sort from above, and
the rules on dependencies I have an idea.

2. Generate the dependency table.
3. Create a list of all available tasks.
4. Assign the tasks (in alphabetical order) to the workers. So BQ
   would be given to workers 0 and 1 to start. (this also removes the
   task from the queue)
5. When a task is complete, eliminate it from all entries like in the
   topsort algorithm above.
6. If the task is now available (key -> nil) remove it from the table
   and add it to the queue. Sort the queue.
7. Repeat until queue and table are empty.


#+NAME: parallelves
#+BEGIN_SRC lisp :results none
  (defun task-time (task &optional (base-time 60))
    (let ((c (elt task 0)))
      (+ 1 base-time (- (char-code c) (char-code #\A)))))
  (defun parallelves (graph workers &optional (base-time 60))
    (let ((table (dependency-table graph))
          (available (iter (for i from 0 below workers) (collect i)))
          (queue nil)
          ;; the array size is the worst case, 1 worker has to do all
          ;; tasks.
          (active nil)
          (done nil))
      ;; start the time variable at 0 and count up
      (iter (for time from 0)
            ;; Stop when the queue, active, and table are all
            ;; empty. There's nothing left to do.
            (until (and (null queue)
                        (= 0 (hash-table-count table))
                        (null active)))
            ;; Update the active queue. Move workers to available, and
            ;; remove tasks from the dependency listings (because
            ;; they're done).
            (setf active
                  (iter (for (id task t0) in active)
                        ;; Put the tasks into the done list and make the
                        ;; workers available again
                        (when (= (1- t0) 0)
                          (push task done)
                          (push id available))
                        ;; If the task isn't done, decrement the time
                        ;; remaining. This will also reduce the size of
                        ;; active each time.
                        (unless (= (1- t0) 0)
                          (collect (list id task (1- t0))))))
            ;; (format t "~a~%" active)
            ;; Clear tasks from the dependencies
            (iter (for d in done)
                  (iter (for (key deps) in-hashtable table)
                        (setf (gethash key table) (remove d deps :test #'string=))))
            ;; clear done
            (setf done nil)
            ;; move ready tasks to queue
            (iter (for (k v) in-hashtable table)
                  (when (null v)
                    (push k queue)
                    (remhash k table)))
            ;; sort queue alphabetically
            (setf queue (sort queue #'string<))
            ;; if there are workers available, assign them tasks
            (iter (until (null available))
                  (until (null queue))
                  (let ((task (pop queue)))
                    (push (list (pop available) task (task-time task base-time)) active)))
            (finally (return (1- time))))))
#+END_SRC

Let's test the above on a simple graph from the problem page.
#+BEGIN_SRC lisp :results output
  (defparameter *test-graph*
    (let ((lines (list "Step C must be finished before step A can begin."
                       "Step C must be finished before step F can begin."
                       "Step A must be finished before step B can begin."
                       "Step A must be finished before step D can begin."
                       "Step B must be finished before step E can begin."
                       "Step D must be finished before step E can begin."
                       "Step F must be finished before step E can begin.")))
      (iter (for line in lines)
            (collect (parse-line line)))))
  (defun test ()
    (format t "Test Topological Sort: ~{~a~}~%" (topsort *test-graph*))
    (format t "Test Parallelves: ~a~%" (parallelves *test-graph* 2 0)))
#+END_SRC

#+RESULTS:

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes
  (defun problem-b () (format t "Problem 7b: ~a~%" (parallelves *input* 5)))
#+END_SRC

** Putting it all together
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results none
  <<dependency-table>>
  <<topsort>>
  <<parallelves>>
#+END_SRC

#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.07.lisp
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 7a: BGKDMJCNEQRSTUZWHYLPAFIVXO
: Problem 7b: 941

** Thoughts
