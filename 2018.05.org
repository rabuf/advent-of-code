#+STARTUP: indent content
#+OPTIONS: num:nil toc:nil
* DONE Day 5
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by typing =C-c C-c= in the
block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
#+END_SRC

#+RESULTS: packages
| iterate |

*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes
  <<packages>>
  (defpackage :aoc-2018-05
    (:use :common-lisp
          :iterate)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2018-05)
#+END_SRC

#+RESULTS: initialize
: #<PACKAGE "AOC-2018-05">

** Input
The input is a single massive line of letters. So reading is easy.
#+NAME: read-input
#+BEGIN_SRC lisp
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes
  <<read-input>>
  (defvar *input*
    (car (read-input "input/2018/5.txt")))
#+END_SRC

** Part 1

#+NAME: cancel-pairs
#+BEGIN_SRC lisp
  (defun cancel-pairs-iterative (polymer)
    (iter (for cn in-string polymer with-index i)
          (when (= i (1- (length polymer)))
            (collect cn result-type string)
            (terminate))
          (let ((cn+1 (char polymer (1+ i))))
            (cond ((or (and (char= (char-upcase cn) cn+1)
                            (char= cn (char-downcase cn+1)))
                       (and (char= cn (char-upcase cn+1))
                            (char= (char-downcase cn) cn+1)))
                   (incf i 1))
                  (t (collect (char polymer i) result-type string))))))
  (defun cancel-pairs (polymer)
    (iter (with current = (length polymer))
          (with previous = 0)
          (when (= current previous) (return current))
          (progn
            (setf polymer (cancel-pairs-iterative polymer))
            (setf previous current)
            (setf current (length polymer)))))
#+END_SRC

#+RESULTS: cancel-pairs
: CANCEL-PAIRS

That took too long to come up with. Should've just done the recursive
thing to start with.
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes
  (defun problem-a () (format t "Problem 5a: ~a~%" (cancel-pairs *input*)))
#+END_SRC
** Part 2
For this one, I have to remove all of one letter and see which
produces the minimum. iterate will be helpful here.
#+NAME: remove-block
#+BEGIN_SRC lisp
  (defun remove-block (polymer)
    (iter (for c in-string "abcdefghijklmnopqrstuvwxyz")
          (minimizing (cancel-pairs (remove c polymer :test #'char-equal)))))
#+END_SRC
Improvement: Single pass over the list to remove characters by
changing the test to be more permissive. Doesn't match on exact char,
but either case.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes
  (defun problem-b () (format t "Problem 5b: ~a~%" (remove-block *input*)))
#+END_SRC
** Putting it all together
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes
  <<cancel-pairs>>
  <<remove-block>>
#+END_SRC

#+RESULTS: functions
: REMOVE-BLOCK

#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.05.lisp
  <<initialize>>
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 5a: 11310
: Problem 5b: 6020
** Thoughts
