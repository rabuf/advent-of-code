#+STARTUP: indent content
#+OPTIONS: num:nil toc:nil
* DONE Day 5
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2018-05)=
4. Typing =C-c C-c= in the block [[answers][answers]].
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
#+END_SRC

*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes
  <<packages>>
  (defpackage :aoc-2018-05
    (:use :common-lisp
          :iterate)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2018-05)
#+END_SRC

** Input
The input is a single massive line of letters. So reading is easy.
#+NAME: read-input
#+BEGIN_SRC lisp
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes
  <<read-input>>
  (defvar *input*
    (car (read-input "input/2018/5.txt")))
#+END_SRC

** Part 1
Don't code late at night.

Completely rewriting this one.
#+NAME: cancel-pairs
#+BEGIN_SRC lisp
  (defun polarity-match (a b)
    (and (not (char= a b))
         (char-equal a b)))
  (defun cancel-pairs (polymer)
    (let ((result nil))
      (iter (for c in-string polymer)
            (push c result)
            (unless (null (cadr result))
              (cond ((polarity-match (car result) (cadr result))
                     (pop result)
                     (pop result)))))
      result))
#+END_SRC

#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes
  (defun problem-a () (format t "Problem 5a: ~a~%" (length (cancel-pairs *input*))))
#+END_SRC
** Part 2
For this one, I have to remove all of one letter and see which
produces the minimum. iterate will be helpful here.
#+NAME: remove-block
#+BEGIN_SRC lisp
  (defun remove-block (polymer)
    (iter (for c in-string "abcdefghijklmnopqrstuvwxyz")
          (minimizing (length (cancel-pairs (remove c polymer :test #'char-equal))))))
#+END_SRC

Improvement: Single pass over the list to remove characters by
changing the test to be more permissive. Doesn't match on exact char,
but either case.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes
  (defun problem-b () (format t "Problem 5b: ~a~%" (remove-block *input*)))
#+END_SRC
** Putting it all together
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes
  <<cancel-pairs>>
  <<remove-block>>
#+END_SRC

#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.05.lisp
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 5a: 11310
: Problem 5b: 6020

** Thoughts
