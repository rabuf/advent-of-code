#+STARTUP: indent content
#+OPTIONS: num:nil toc:nil
* DONE Day 5
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by typing =C-c C-c= in the
block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes
  <<packages>>
  (defpackage :aoc-2018-05
    (:use :common-lisp
          :iterate)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2018-05)
#+END_SRC
** Input
#+NAME: parse-input
#+BEGIN_SRC lisp
  (defun parse-input (line)
    (identity line))
#+END_SRC

#+NAME: read-input
#+BEGIN_SRC lisp
    (defun read-input (file)
      (iter (for line in-file file using #'read-line)
            (collect (parse-input line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes
  <<parse-input>>
  <<read-input>>
  (defparameter *input*
    (read-input "input/2018/5.txt"))
#+END_SRC
** Part 1
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes
  (defun problem-a () (format t "Problem 5a: ~a~%" (identity *input*)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes
  (defun problem-b () (format t "Problem 5b: ~a~%" (identity *input*)))
#+END_SRC
** Putting it all together
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes

#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.04.lisp
  <<initialize>>
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 5a: NIL
: Problem 5b: NIL
** Thoughts
