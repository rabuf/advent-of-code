#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 19
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2017-19)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2017-19
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2017-19)
#+END_SRC
** Input
The input is a large maze. I'm going to read it into a hash table
where non-whitespace gets an entry, and whitespace does not. The key
will be complex numbers corresponding to grid coordinates.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         with grid = (make-hash-table)
         with start = 0
         for i from 0
         for line = (read-line in nil)
         while line
         finally (return (list start grid))
         do
           (loop
              for c across line
              for j from 0
              for coord = (complex i j)
              ;; There's some special logic for row 0, there will only
              ;; be *one* entry, we need to record its coordinate.
              unless (char= #\Space c)
              do
                (when (zerop i) (setf start coord))
                (setf (gethash coord grid) c)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/19.txt"))
#+END_SRC
** Part 1
Starting at a specific point on the first row (first part of
calculated input), follow the path only turning when the next position
is invalid. The program terminates when there is nowhere else to go
(in the current direction, can only go back the way we came).
#+NAME: trace-path
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun trace-path (start path)
    (loop
       for pos = start then (+ pos dir)
       for c = (gethash pos path)
       for steps from 0
       with dir = #C(1 0)
       with result = nil
       while c
       finally (return (values (coerce (reverse result) 'string) steps))
       when (alpha-char-p c) ;; record the value
       do (push c result)
       when (char= #\+ c) ;; time to turn
       do (loop
             for turn in '(#C(0 1) #C(0 -1))
             for next = (* dir turn)
             when (gethash (+ pos next) path)
             do
               (setf dir next)
               (return))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 19 A: ~a~%" (trace-path (first *input*) (second *input*))))
#+END_SRC
** Part 2
Adjusted the above to include a step count, which was just one extra
variable in the loop.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 19 B: ~a~%" (nth-value 1 (trace-path (first *input*) (second *input*)))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<trace-path>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 19 A: LIWQYKMRP
: Problem 19 B: 16764
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2017.19)
  (in-suite aoc.2017.19)

  (run! 'aoc.2017.19)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day19.adb
  with AOC2017.Day19;
  procedure Day19 is
  begin
    AOC2017.Day19.Run;
  end Day19;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2017-day19.ads
  package AOC2017.Day19 is
     procedure Run;
  end AOC2017.Day19;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2017-day19.adb
  <<ada-packages>>
  package body AOC2017.Day19 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2017 - Day 19");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2017.Day19;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day19
  ./day19
#+END_SRC

#+RESULTS:
