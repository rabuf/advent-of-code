#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 20
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2017-20)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2017-20
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2017-20)
#+END_SRC
** Input
The input consists of three triples of numbers, always provided in the
same order. I'm not going to complicate my parsing, just use cl-ppcre.

Parsing needs to be slightly more complicated to permit an easier
application of sorting in part 1. I'm going to use a particle struct
which includes its index as well as the three triples as position,
velocity, and acceleration.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defstruct particle
    index
    position
    velocity
    acceleration)
  (defun create-particle (index parameters)
    (destructuring-bind (px py pz vx vy vz ax ay az) parameters
      (make-particle
       :index index
       :position (list px py pz)
       :velocity (list vx vy vz)
       :acceleration (list ax ay az))))
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         for index from 0
         while line
         collect (create-particle index (mapcar #'parse-integer (cl-ppcre:all-matches-as-strings "-?[0-9]+" line))))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/20.txt"))
#+END_SRC
** Part 1
Determine the index of the particle which will stay nearest the
origin, as measured using the Manhattan distance, over time. I *think*
this can be determined by sorting based on acceleration, then
velocity, then position. Turns out I got lucky, sorting by
acceleration was enough.
#+NAME: closest
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun manhattan-distance (vector)
    (reduce #'+ (mapcar #'abs vector)))
  (defun sort-by-acceleration (particles)
    (sort particles (lambda (a b)
                      (<= (manhattan-distance a)
                          (manhattan-distance b)))
          :key #'particle-acceleration))
  (defun sort-by-velocity (particles)
    (sort particles (lambda (a b)
                      (<= (manhattan-distance a)
                          (manhattan-distance b)))
          :key #'particle-velocityo))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 20 A: ~a~%" (particle-index (first (sort-by-acceleration (copy-seq *input*))))))
#+END_SRC
** Part 2
So now the challenge is to determine how many particles survive after
collisions. Whenever any two particles share a position, they're
removed from the set.
#+NAME: survivors
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun update-particle (particle)
    (with-slots (index position velocity acceleration) particle
      (let* ((nv (mapcar #'+ velocity acceleration))
             (np (mapcar #'+ position nv)))
        (make-particle
         :index index
         :position np
         :velocity nv
         :acceleration acceleration))))
  (defun remove-duplicate-particles (particles)
    (loop
       for p in particles
       with result = nil
       finally (return result)
       when (= 1 (count (particle-position p) particles :key #'particle-position :test #'equal))
       do (push p result)))
  (defun survivors (particles)
    (loop
       for time from 0 to 1000
       with particles = (remove-duplicate-particles
                         (mapcar #'copy-particle particles))
       finally (return (length particles))
       do
         (setf particles (mapcar #'update-particle particles))
         (setf particles
               (remove-duplicate-particles particles))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 20 B: ~a~%" (survivors *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<closest>>
  <<survivors>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 20 A: 457
: Problem 20 B: 448
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2017.20)
  (in-suite aoc.2017.20)

  (run! 'aoc.2017.20)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day20.adb
  with AOC2017.Day20;
  procedure Day20 is
  begin
    AOC2017.Day20.Run;
  end Day20;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2017-day20.ads
  package AOC2017.Day20 is
     procedure Run;
  end AOC2017.Day20;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2017-day20.adb
  <<ada-packages>>
  package body AOC2017.Day20 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2017 - Day 20");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2017.Day20;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day20
  ./day20
#+END_SRC

#+RESULTS:
