#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 22
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2017-22)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2017-22
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2017-22)
#+END_SRC
** Input
The input is a grid of on/off spaces. I'm going to do my standard
read-to-hash-table approach here. The only complication will come
after, I need to determine the center. In order to do that, I'll track
the x and y coordinates and halve them (rounded up) to find the center
point.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         for i from 0
         with grid = (make-hash-table)
         with max-y = 0
         finally (return (list grid (complex (round (/ (1- i) 2)) (round (/ max-y 2)))))
         while line
         do
           (loop
              for c across line
              for j from 0
              finally (setf max-y (max max-y j))
              when (char= #\# c)
              do
                (setf (gethash (complex j i) grid) 2)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/22.txt"))
#+END_SRC
** Part 1
So now I have the center, time to simulate.
#+NAME: virus-carrier
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun virus-carrier (grid starting-point &optional (limit 10000))
    (loop
       for i from 0 below limit
       with infections = 0
       with direction = #C(0 -1)
       for position = starting-point then (+ direction position)
       finally (return infections)
       if (gethash position grid)
       do
         (setf direction (* direction #C(0 1)))
         (remhash position grid)
       else
       do
         (setf direction (* direction #C(0 -1)))
         (incf infections)
         (setf (gethash position grid) t)
       end))
       
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 22 A: ~a~%" (virus-carrier (copy-hash-table (first *input*)) (second *input*))))
#+END_SRC
** Part 2
Now it's got a new mechanism, moving through multiple states before
reaching infected. I've modified the reader to store a number in the
grid, 2 for infected. I'm going to continue to treat clean as nil,
this will also keep the total storage size down depending on how many
positions it eventually visits.
#+NAME: evolved-virus-carrier
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun evolved-virus-carrier (grid starting-point &optional (limit 10000000))
    (loop
       for i from 0 below limit
       with infections = 0
       with direction = #C(0 -1)
       for position = starting-point then (+ direction position)
       finally (return infections)
       do (case (gethash position grid)
            (1 (setf (gethash position grid) 2)
               (incf infections))
            (2 (setf (gethash position grid) 3)
               (setf direction (* direction #C(0 1))))
            (3 (remhash position grid)
               (setf direction (* direction -1)))
            (otherwise
              (setf (gethash position grid) 1)
                 (setf direction (* direction #C(0 -1)))))))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 22 B: ~a~%" (evolved-virus-carrier (copy-hash-table (first *input*)) (second *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<virus-carrier>>
  <<evolved-virus-carrier>>
  (defun copy-hash-table (hash-table)
    (let ((result (make-hash-table)))
      (maphash (lambda (k v)
                 (setf (gethash k result) v))
               hash-table)
      result))
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 22 A: 5339
: Problem 22 B: 2512380
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2017.22)
  (in-suite aoc.2017.22)

  (run! 'aoc.2017.22)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day22.adb
  with AOC2017.Day22;
  procedure Day22 is
  begin
    AOC2017.Day22.Run;
  end Day22;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2017-day22.ads
  package AOC2017.Day22 is
     procedure Run;
  end AOC2017.Day22;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2017-day22.adb
  <<ada-packages>>
  package body AOC2017.Day22 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2017 - Day 22");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2017.Day22;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day22
  ./day22
#+END_SRC

#+RESULTS:
