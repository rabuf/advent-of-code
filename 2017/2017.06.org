#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 06
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2017-06)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2017-06
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2017-06)
#+END_SRC
** Input
Possibly bad assumption: The whitespace doesn't matter in this input.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for number in-file file using #'read)
          (collect number)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/06.txt"))
#+END_SRC
** Part 1
Given a set of memory banks, take the one with the highest value (or
the first one with the highest value if there are ties) and set it to
0, then redistribute (as evenly as possible) its value across all
others starting with the *next* memory bank. Determine how long it
takes to hit a cycle.

I'll use a simple tortoise/hare approach to detecting the cycles,
Brent's algorithm. I had to make the =redistribute= function a pure
function, no side effects, so that the =copy-seq= call only had to
happen inside it, and not in multiple places in =brent= (which is
sufficiently generic that it'll work with any function and parameter
type, thanks to this move).
#+NAME: part-1
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun redistribute (memory)
    (let* ((memory (copy-seq memory)) ;; necessary for the cycle detection, can't mutate.
           (to-distribute (apply #'max memory))
           (at (position to-distribute memory)))
      (setf (elt memory at) 0)
      (loop for i = (mod (1+ at) (length memory)) then (mod (1+ i) (length memory))
            while (plusp to-distribute)
            do (incf (elt memory i))
               (decf to-distribute))
      memory))

  (defun brent (f arg &key (test #'equalp))
    (let ((power 1)
          (tortoise arg)
          (hare (funcall f arg)) 
          (mu 0)
          (lambda 1))
      (loop
        while (not (funcall test tortoise hare))
        do (when (= power lambda)
             (setf tortoise hare
                   power (* 2 power)
                   lambda 0))
           (setf hare (funcall f hare))
           (incf lambda))
      (setf tortoise arg
            hare arg)
      (loop repeat lambda
            do (setf hare (funcall f hare)))
      (loop
        while (not (funcall test hare tortoise))
        do (setf tortoise (funcall f tortoise)
                 hare (funcall f hare))
           (incf mu))
      (values lambda mu)))

  (defun part-1 (memory)
    (multiple-value-bind (lambda mu)
        (brent #'redistribute memory)
      (+ lambda mu)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 06 A: ~a~%" (part-1 *input*)))
#+END_SRC
** Part 2
Part 2 is already provided by =brent= as its first return value.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 06 B: ~a~%" (brent #'redistribute *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent
  <<part-1>>
#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 06 A: 12841
: Problem 06 B: 8038
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2017.06)
  (in-suite aoc.2017.06)

  (run! 'aoc.2017.06)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day06.adb
  with AOC2017.Day06;
  procedure Day06 is
  begin
    AOC2017.Day06.Run;
  end Day06;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2017-day06.ads
  package AOC2017.Day06 is
     procedure Run;
  end AOC2017.Day06;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2017-day06.adb
  <<ada-packages>>
  package body AOC2017.Day06 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2017 - Day 06");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2017.Day06;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day06
  ./day06
#+END_SRC

#+RESULTS:
