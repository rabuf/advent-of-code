#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 21
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2019-21)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2019-21
    (:use :common-lisp
          :iterate
          :parseq
          :lparallel.queue
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2019-21)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
      (with-open-file (s file)
        (map 'vector #'parse-integer (cl-ppcre:split "," (read-line s)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/21.txt"))
#+END_SRC
** Part 1
Another Intcode day, also using ASCII. I'll set up a simple
multithreaded executor again so that I can manually play with the
program.

The program runs a Springdroid, which is a simple bot that can jump
over gaps. If the bot reaches the end it'll print out a large number,
the amount of damage. If it falls through a hole, it'll print out its
last few moments.
#+NAME: springdroid
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun springdroid (program &optional (sd-program '("NOT D J")) (mode "WALK"))
    (let ((input-queue (make-queue))
          (result 0))
      (labels ((get-input ()
                 (pop-queue input-queue))
               (send-output (c)
                 (cond ((>= c 128)
                        (format t "~A~%" c)
                        (setf result c))
                       (t
                        (format t "~C" (code-char c))))))
        (let ((sd-thread (bt:make-thread
                          (lambda ()
                            (intcode program
                                     :read-fn #'get-input
                                     :write-fn #'send-output)))))
          (iter (for line in sd-program)
                (iter (for c in-string line)
                      (push-queue (char-code c) input-queue))
                (push-queue (char-code #\Newline) input-queue))
          (iter (for c in-string mode)
                (push-queue (char-code c) input-queue))
          (push-queue (char-code #\Newline) input-queue)
          (bt:join-thread sd-thread)
          result))))
#+END_SRC

Alright, so the system is limited to 15 instructions. When J is true
at the end of the script it will jump 4 spaces. This is important,
this means it shouldn't jump if there's no ground 4 spaces away.
#+NAME: solve-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (program)
    (let ((script (list "NOT A J"
                        "NOT C T"
                        "OR T J"
                        "AND D J")))
      (springdroid program script "WALK")))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 21 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
If the last command is =RUN= we get 9 registers to test for
inputs. The droid still only jumps 4 spaces.

Here's an example of a failure mode:
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun failure-case-1 (program)
    (let ((script (list "NOT A J"
                        "NOT C T"
                        "OR T J"
                        "AND D J")))
      (springdroid program script "RUN")))
  (failure-case-1 *input*)
#+END_SRC
The above fails with the following scenario:
#+BEGIN_EXAMPLE
  Didn't make it across:

  .................
  .................
  @................
  #####.#.#..##.###

  .................
  .................
  .@...............
  #####.#.#..##.###

  .................
  .................
  ..@..............
  #####.#.#..##.###

  .................
  ...@.............
  .................
  #####.#.#..##.###

  ....@............
  .................
  .................
  #####.#.#..##.###

  .................
  .....@...........
  .................
  #####.#.#..##.###

  .................
  .................
  ......@..........
  #####.#.#..##.###

  .................
  .................
  .................
  #####.#@#..##.###
#+END_EXAMPLE

The correct behavior is to jump two steps later.

#+BEGIN_SRC lisp :noweb yes :results silent
  (defun failure-case-2 (program)
    (let ((script (list "NOT A J"
                        "NOT C T"
                        "AND E T"
                        "OR T J"
                        "AND D J")))
      (springdroid program script "RUN")))
  (failure-case-2 *input*)
#+END_SRC

The above causes a different failure:
#+BEGIN_EXAMPLE
  Didn't make it across:

  .................
  .................
  @................
  #####.#..########

  .................
  .................
  .@...............
  #####.#..########

  .................
  .................
  ..@..............
  #####.#..########

  .................
  .................
  ...@.............
  #####.#..########

  .................
  .................
  ....@............
  #####.#..########

  .................
  .................
  .................
  #####@#..########
#+END_EXAMPLE

#+BEGIN_SRC lisp :noweb yes :results silent
  (defun failure-case-3 (program)
    (let ((script (list "NOT A J"
                        "NOT C T"
                        "OR T J"
                        "AND I J"
                        "AND D J")))
      (springdroid program script "RUN")))
  (failure-case-3 *input*)
#+END_SRC

Maybe writing out what the conditions are will help a bit.

Always jump if A is blank. That's not an option, failure always
results if this isn't done. But, do we have to let this case even
arise?

Never jump if D is not ground. This always results in death. I cannot
see anyway to remove =AND D J= from a script.

In theory, I could generate every possible script. There are
$3\cdot11\cdot2=66$ possible instructions. And then there are 15
possible instructions after that. Some instructions amount to noops
(=AND J J=, =OR J J=). I can start with the shortest possible script
and grow it from there. If nothing else, it'll be amusing to see how
inefficient this is.

#+NAME: gen-scripts
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun gen-scripts (program)
    (let ((valid-scripts nil))
      (iter (for i from 1 to 15)
            (iter (for j from 1 to i)
                  (with script = nil)
                  (
                  (unless (springdroid program script "RUN")
                    (print (springdroid program script "RUN"))
                    (push script valid-scripts))))
      valid-scripts))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 21 B: ~a~%" (identity *input*)))
#+END_SRC
** Putting it all together
#+NAME: intcode
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun intcode (program &key (read-fn #'read) (write-fn #'write))
    (let ((memory (make-hash-table))
          (relative-base 0))
      (iter (for val in-vector program with-index i)
            (setf (gethash i memory) val))
      (flet ((fetch (mode address)
               (gethash (ecase mode
                          (0 (gethash address memory 0))
                          (1 address)
                          (2 (+ relative-base
                                (gethash address memory 0))))
                        memory 0))
             (store (mode address value)
               (setf (gethash (ecase mode
                                (0 (gethash address memory 0))
                                (2 (+ relative-base
                                      (gethash address memory 0))))
                              memory 0)
                     value)))
        (iter (with pc = 0)
              (for op = (fetch 1 pc))
              (for instr = (mod op 100))
              (for modes = (floor op 100))
              (for (m1 m2 m3) = (list (mod modes 10)
                                      (mod (floor modes 10) 10)
                                      (mod (floor modes 100) 10)))
              (for (o1 o2 o3) = (list (+ pc 1) (+ pc 2) (+ pc 3)))
              (ecase instr
                (1 (store m3 o3
                          (+ (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (2 (store m3 o3
                          (* (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (3 (store m1 o1 (funcall read-fn))
                   (incf pc 2))
                (4 (funcall write-fn
                            (fetch m1 o1))
                   (incf pc 2))
                (5 (if (not (zerop (fetch m1 o1)))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (6 (if (zerop (fetch m1 o1))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (7 (store m3 o3
                          (if (< (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (8 (store m3 o3
                          (if (= (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (9 (incf relative-base (fetch m1 o1))
                   (incf pc 2))
                (99 (return-from intcode)))))))
#+END_SRC
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<intcode>>
  <<springdroid>>
  <<solve-a>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2019.21.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
#+begin_example
Problem 21 A: 19353619
Problem 21 B: #(109 2050 21102 1 966 1 21102 1 13 0 1106 0 1378 21101 0 20 0
                1106 0 1337 21101 0 27 0 1106 0 1279 1208 1 65 748 1005 748 73
                1208 1 79 748 1005 748 110 1208 1 78 748 1005 748 132 1208 1 87
                748 1005 748 169 1208 1 82 748 1005 748 239 21101 0 1041 1
                21102 1 73 0 1106 0 1421 21102 78 1 1 21101 0 1041 2 21102 1 88
                0 1106 0 1301 21101 0 68 1 21101 1041 0 2 21101 103 0 0 1106 0
                1301 1102 1 1 750 1105 1 298 21102 1 82 1 21102 1041 1 2 21101
                0 125 0 1105 1 1301 1102 1 2 750 1105 1 298 21102 79 1 1 21102
                1041 1 2 21101 147 0 0 1106 0 1301 21101 84 0 1 21101 0 1041 2
                21102 162 1 0 1106 0 1301 1102 1 3 750 1105 1 298 21102 65 1 1
                21102 1041 1 2 21101 184 0 0 1105 1 1301 21102 1 76 1 21101
                1041 0 2 21102 199 1 0 1106 0 1301 21102 1 75 1 21101 0 1041 2
                21101 0 214 0 1105 1 1301 21102 1 221 0 1105 1 1337 21101 10 0
                1 21101 0 1041 2 21101 0 236 0 1106 0 1301 1106 0 553 21101 0
                85 1 21101 1041 0 2 21102 1 254 0 1106 0 1301 21102 78 1 1
                21102 1 1041 2 21101 0 269 0 1105 1 1301 21102 276 1 0 1106 0
                1337 21102 10 1 1 21102 1 1041 2 21102 291 1 0 1106 0 1301 1101
                1 0 755 1106 0 553 21101 32 0 1 21101 0 1041 2 21102 1 313 0
                1105 1 1301 21101 0 320 0 1105 1 1337 21101 327 0 0 1106 0 1279
                1202 1 1 749 21102 65 1 2 21102 73 1 3 21102 346 1 0 1105 1
                1889 1206 1 367 1007 749 69 748 1005 748 360 1101 0 1 756 1001
                749 -64 751 1105 1 406 1008 749 74 748 1006 748 381 1101 -1 0
                751 1106 0 406 1008 749 84 748 1006 748 395 1102 1 -2 751 1105
                1 406 21101 0 1100 1 21102 1 406 0 1105 1 1421 21102 1 32 1
                21102 1100 1 2 21101 421 0 0 1106 0 1301 21101 428 0 0 1106 0
                1337 21102 435 1 0 1106 0 1279 1202 1 1 749 1008 749 74 748
                1006 748 453 1101 0 -1 752 1105 1 478 1008 749 84 748 1006 748
                467 1102 1 -2 752 1106 0 478 21101 0 1168 1 21101 478 0 0 1106
                0 1421 21101 0 485 0 1106 0 1337 21102 10 1 1 21102 1 1168 2
                21102 500 1 0 1105 1 1301 1007 920 15 748 1005 748 518 21102 1
                1209 1 21101 518 0 0 1105 1 1421 1002 920 3 529 1001 529 921
                529 101 0 750 0 1001 529 1 537 102 1 751 0 1001 537 1 545 1002
                752 1 0 1001 920 1 920 1105 1 13 1005 755 577 1006 756 570
                21102 1100 1 1 21102 1 570 0 1106 0 1421 21101 0 987 1 1105 1
                581 21101 0 1001 1 21101 588 0 0 1106 0 1378 1101 758 0 593
                1001 0 0 753 1006 753 654 20101 0 753 1 21101 610 0 0 1106 0
                667 21102 1 0 1 21101 621 0 0 1105 1 1463 1205 1 647 21102 1015
                1 1 21101 0 635 0 1106 0 1378 21102 1 1 1 21102 1 646 0 1105 1
                1463 99 1001 593 1 593 1106 0 592 1006 755 664 1102 0 1 755
                1106 0 647 4 754 99 109 2 1101 0 726 757 22101 0 -1 1 21102 9 1
                2 21101 697 0 3 21101 0 692 0 1106 0 1913 109 -2 2106 0 0 109 2
                101 0 757 706 1201 -1 0 0 1001 757 1 757 109 -2 2106 0 0 1 1 1
                1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0
                0 0 0 0 0 0 0 255 63 191 223 127 159 95 0 170 122 102 166 184
                142 77 113 215 202 162 219 154 231 92 123 197 247 85 87 138 181
                174 55 185 153 234 107 254 124 249 84 139 233 213 226 115 246
                228 99 34 121 118 163 137 54 169 57 106 46 38 125 189 119 51
                103 175 79 157 61 207 221 71 251 238 178 86 78 232 47 187 203
                253 248 136 94 69 201 190 205 117 227 156 98 177 42 100 204 114
                200 188 76 35 49 252 236 196 206 70 143 182 62 198 168 229 68
                93 230 60 183 243 199 237 43 140 244 155 222 126 241 216 214 58
                218 217 50 239 141 56 158 171 109 235 245 179 152 101 59 116
                108 212 250 120 111 173 172 39 242 220 167 186 53 110 0 0 0 0 0
                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                0 0 0 0 0 0 0 0 0 0 20 73 110 112 117 116 32 105 110 115 116
                114 117 99 116 105 111 110 115 58 10 13 10 87 97 108 107 105
                110 103 46 46 46 10 10 13 10 82 117 110 110 105 110 103 46 46
                46 10 10 25 10 68 105 100 110 39 116 32 109 97 107 101 32 105
                116 32 97 99 114 111 115 115 58 10 10 58 73 110 118 97 108 105
                100 32 111 112 101 114 97 116 105 111 110 59 32 101 120 112 101
                99 116 101 100 32 115 111 109 101 116 104 105 110 103 32 108
                105 107 101 32 65 78 68 44 32 79 82 44 32 111 114 32 78 79 84
                67 73 110 118 97 108 105 100 32 102 105 114 115 116 32 97 114
                103 117 109 101 110 116 59 32 101 120 112 101 99 116 101 100 32
                115 111 109 101 116 104 105 110 103 32 108 105 107 101 32 65 44
                32 66 44 32 67 44 32 68 44 32 74 44 32 111 114 32 84 40 73 110
                118 97 108 105 100 32 115 101 99 111 110 100 32 97 114 103 117
                109 101 110 116 59 32 101 120 112 101 99 116 101 100 32 74 32
                111 114 32 84 52 79 117 116 32 111 102 32 109 101 109 111 114
                121 59 32 97 116 32 109 111 115 116 32 49 53 32 105 110 115 116
                114 117 99 116 105 111 110 115 32 99 97 110 32 98 101 32 115
                116 111 114 101 100 0 109 1 1005 1262 1270 3 1262 20102 1 1262
                0 109 -1 2105 1 0 109 1 21102 1288 1 0 1106 0 1263 20102 1 1262
                0 1101 0 0 1262 109 -1 2106 0 0 109 5 21101 0 1310 0 1106 0
                1279 22102 1 1 -2 22208 -2 -4 -1 1205 -1 1332 21202 -3 1 1
                21101 0 1332 0 1106 0 1421 109 -5 2105 1 0 109 2 21101 1346 0 0
                1105 1 1263 21208 1 32 -1 1205 -1 1363 21208 1 9 -1 1205 -1
                1363 1105 1 1373 21102 1370 1 0 1105 1 1279 1105 1 1339 109 -2
                2105 1 0 109 5 1202 -4 1 1385 21002 0 1 -2 22101 1 -4 -4 21102
                0 1 -3 22208 -3 -2 -1 1205 -1 1416 2201 -4 -3 1408 4 0 21201 -3
                1 -3 1105 1 1396 109 -5 2105 1 0 109 2 104 10 21202 -1 1 1
                21102 1436 1 0 1106 0 1378 104 10 99 109 -2 2105 1 0 109 3
                20002 593 753 -1 22202 -1 -2 -1 201 -1 754 754 109 -3 2106 0 0
                109 10 21101 0 5 -5 21102 1 1 -4 21101 0 0 -3 1206 -9 1555
                21101 3 0 -6 21102 1 5 -7 22208 -7 -5 -8 1206 -8 1507 22208 -6
                -4 -8 1206 -8 1507 104 64 1106 0 1529 1205 -6 1527 1201 -7 716
                1515 21002 0 -11 -8 21201 -8 46 -8 204 -8 1105 1 1529 104 46
                21201 -7 1 -7 21207 -7 22 -8 1205 -8 1488 104 10 21201 -6 -1 -6
                21207 -6 0 -8 1206 -8 1484 104 10 21207 -4 1 -8 1206 -8 1569
                21101 0 0 -9 1105 1 1689 21208 -5 21 -8 1206 -8 1583 21101 1 0
                -9 1105 1 1689 1201 -5 716 1588 21001 0 0 -2 21208 -4 1 -1
                22202 -2 -1 -1 1205 -2 1613 22102 1 -5 1 21101 0 1613 0 1105 1
                1444 1206 -1 1634 21202 -5 1 1 21102 1 1627 0 1106 0 1694 1206
                1 1634 21102 2 1 -3 22107 1 -4 -8 22201 -1 -8 -8 1206 -8 1649
                21201 -5 1 -5 1206 -3 1663 21201 -3 -1 -3 21201 -4 1 -4 1105 1
                1667 21201 -4 -1 -4 21208 -4 0 -1 1201 -5 716 1676 22002 0 -1
                -1 1206 -1 1686 21101 0 1 -4 1105 1 1477 109 -10 2106 0 0 109
                11 21101 0 0 -6 21101 0 0 -8 21102 0 1 -7 20208 -6 920 -9 1205
                -9 1880 21202 -6 3 -9 1201 -9 921 1724 21002 0 1 -5 1001 1724 1
                1733 20101 0 0 -4 22101 0 -4 1 21101 0 1 2 21102 1 9 3 21102
                1754 1 0 1105 1 1889 1206 1 1772 2201 -10 -4 1766 1001 1766 716
                1766 21001 0 0 -3 1106 0 1790 21208 -4 -1 -9 1206 -9 1786 22101
                0 -8 -3 1105 1 1790 21202 -7 1 -3 1001 1733 1 1796 20102 1 0 -2
                21208 -2 -1 -9 1206 -9 1812 22102 1 -8 -1 1106 0 1816 22102 1
                -7 -1 21208 -5 1 -9 1205 -9 1837 21208 -5 2 -9 1205 -9 1844
                21208 -3 0 -1 1106 0 1855 22202 -3 -1 -1 1106 0 1855 22201 -3
                -1 -1 22107 0 -1 -1 1105 1 1855 21208 -2 -1 -9 1206 -9 1869
                22102 1 -1 -8 1105 1 1873 21201 -1 0 -7 21201 -6 1 -6 1105 1
                1708 22101 0 -8 -10 109 -11 2106 0 0 109 7 22207 -6 -5 -3 22207
                -4 -6 -2 22201 -3 -2 -1 21208 -1 0 -6 109 -7 2106 0 0 0 109 5
                1202 -2 1 1912 21207 -4 0 -1 1206 -1 1930 21101 0 0 -4 21201 -4
                0 1 22102 1 -3 2 21102 1 1 3 21102 1 1949 0 1106 0 1954 109 -5
                2106 0 0 109 6 21207 -4 1 -1 1206 -1 1977 22207 -5 -3 -1 1206
                -1 1977 22102 1 -5 -5 1106 0 2045 21201 -5 0 1 21201 -4 -1 2
                21202 -3 2 3 21102 1 1996 0 1106 0 1954 21201 1 0 -5 21101 0 1
                -2 22207 -5 -3 -1 1206 -1 2015 21102 0 1 -2 22202 -3 -2 -3
                22107 0 -4 -1 1206 -1 2037 21202 -2 1 1 21101 0 2037 0 105 1
                1912 21202 -3 -1 -3 22201 -5 -3 -5 109 -6 2105 1 0)
#+end_example
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2019.21)
  (in-suite aoc.2019.21)

  (run! 'aoc.2019.21)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
