#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 02
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2019-02)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2019-02
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2019-02)
#+END_SRC
** Input
The input this time is a comma separated list of integers.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (s file)
      (let ((input
             (map 'list #'parse-integer
                  (cl-ppcre:split "," (read-line s)))))
        (make-array (list (length input)) :initial-contents input))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/02.txt"))
#+END_SRC
** Part 1
Basic computer simulation. /Intcode/ has 3 instructions:
- 1 :: add the values at the next two locations and store in the third location
- 2 :: multiply teh values at the next two locations and store in the third location
- 99 :: terminate

The task is to put 12 and 2 into locations 1 and 2, and determine the
final value of location 0.
#+NAME: simulate
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun simulate (program)
    (loop for pc from 0 by 4
       until (= (aref program pc) 99)
       do (progn
                 (cond ((= 1 (aref program pc))
                        (setf (aref program (aref program (+ pc 3)))
                              (+ (aref program (aref program (+ pc 1)))
                                 (aref program (aref program (+ pc 2))))))
                       ((= 2 (aref program pc))
                        (setf (aref program (aref program (+ pc 3)))
                              (* (aref program (aref program (+ pc 1)))
                                 (aref program (aref program (+ pc 2))))))))))
  (defun simulate-with-subs (program noun verb)
    (let ((a (make-array (array-dimensions program) :initial-contents program)))
      (setf (aref a 1) noun)
      (setf (aref a 2) verb)
      (simulate a)
      (aref a 0)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a ()
    (format t "Problem 02 A: ~a~%" (simulate-with-subs *input* 12 2)))
#+END_SRC
** Part 2
The task is to determine what pair of values in locations 1 and 2 will
result in location 0 being 19690720. Once found, compute 100 *
(location 1) + location 2.
#+NAME: trial
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (program)
    (loop for noun from 0 to 99
       do (loop for verb from 0 to 99
             do (cond ((= 19690720 (simulate-with-subs program noun verb))
                       (return-from solve-b (+ (* 100 noun) verb)))))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 02 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<simulate>>
  <<trial>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2019.02.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 02 A: 3306701
: Problem 02 B: 7621
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2019.02)
  (in-suite aoc.2019.02)
  (test opcodes
    (is (= 2 (simulate #(1 0 0 0 99)))))
  (run! 'aoc.2019.02)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2019.02
:  Running test OPCODES .
:  Did 1 check.
:     Pass: 1 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
