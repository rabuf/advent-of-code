#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 17
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2019-17)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2019-17
    (:use :common-lisp
          :iterate
          :parseq
          :lparallel.queue
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2019-17)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
      (with-open-file (s file)
        (map 'vector #'parse-integer (cl-ppcre:split "," (read-line s)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/17.txt"))
#+END_SRC
** Part 1
As expected, another intcode problem. This time, the robot writes out
characters that, conveniently, print out what it sees.
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (program)
    (intcode program :write-fn (lambda (c) (format t "~C" (code-char c)))))
#+END_SRC
The task is to sum the "alignment parameters". The alignment parameter
is a value for an intersection described as the product of its
horizontal distance (from top-left) and vertical. The top-left corner
is (0,0).

Let's put the input into a grid.
#+NAME: solve-a
#+BEGIN_SRC lisp :noweb yes :results silent

  (defun solve-a (program)
    (let ((grid (make-hash-table))
          (x 0)
          (y 0)
          (max-x 0)
          (max-y 0)
          (position 0)
          (direction #C(0 1)))
      (labels ((camera (c)
                 (let ((c (code-char c)))
                   (format t "~C" c)
                   (setf (gethash (complex x y) grid) c)
                   (incf x)
                   (setf max-x (max max-x x))
                   (case c
                     ((#\^ #\v #\> #\<)
                      (setf position (complex x y))
                      (setf (gethash position grid) #\#)))
                   (case c
                     (#\Newline (setf x 0)
                                (incf y)
                                (incf max-y))
                     (#\^ (setf direction #C(0 -1)))
                     (#\v (setf direction #C(0 1)))
                     (#\> (setf direction #C(1 0)))
                     (#\< (setf direction #C(-1 0)))))))
        (intcode program :write-fn #'camera)
        (iter outer
              (for x from 0 to max-x)
              (iter (for y from 0 to max-y)
                    (case (gethash (complex x y) grid #\.)
                      (#\#
                       (when 
                           (iter (for d in (list #C(0 1) #C(0 -1) #C(-1 0) #C(1 0)))
                                 (always (char= #\# (gethash (+ (complex x y) d) grid #\.))))
                         (in outer
                             (sum (* x y)))))))))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 17 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
The next step is to plan a route and have the robot execute it. I'm
just going to skip that and try to plan a route by hand, see what
happens.

Via simple search and replace I arrived at this sequence of movements:
#+BEGIN_EXAMPLE
  A,B,B,A,C,A,C,A,C,B
  R,6,R,6,R,8,L,10,L,4
  R,6,L,10,R,8
  L,4,L,12,R,6,L,10
#+END_EXAMPLE

#+NAME: solve-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defvar *path* (list "A,B,B,A,C,A,C,A,C,B"
                       "R,6,R,6,R,8,L,10,L,4"
                       "R,6,L,10,R,8"
                       "L,4,L,12,R,6,L,10"
                       "n"))


  (defun solve-b (program)
    (let* ((commands (make-queue))
           (dust-collected 0)
           (vacuum (bt:make-thread
                    (lambda ()
                      (let ((program (copy-seq program)))
                        (setf (aref program 0) 2)
                        (intcode program
                                 :write-fn (lambda (c)
                                             (cond ((<= c 128)
                                                    (format t "~C" (code-char c)))
                                                   (t (format t "~A" c)
                                                      (setf dust-collected c))))
                                 :read-fn (lambda () (pop-queue commands))))))))
      (iter (for l in *path*)
            (iter (for c in-string l)
                  (push-queue (char-code c) commands))
            (push-queue (char-code #\Newline) commands))
      (bt:join-thread vacuum)
      dust-collected))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 17 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: intcode
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun intcode (program &key (read-fn #'read) (write-fn #'write))
    (let ((memory (make-hash-table))
          (relative-base 0))
      (iter (for val in-vector program with-index i)
            (setf (gethash i memory) val))
      (flet ((fetch (mode address)
               (gethash (ecase mode
                          (0 (gethash address memory 0))
                          (1 address)
                          (2 (+ relative-base
                                (gethash address memory 0))))
                        memory 0))
             (store (mode address value)
               (setf (gethash (ecase mode
                                (0 (gethash address memory 0))
                                (2 (+ relative-base
                                      (gethash address memory 0))))
                              memory 0)
                     value)))
        (iter (with pc = 0)
              (for op = (fetch 1 pc))
              (for instr = (mod op 100))
              (for modes = (floor op 100))
              (for (m1 m2 m3) = (list (mod modes 10)
                                      (mod (floor modes 10) 10)
                                      (mod (floor modes 100) 10)))
              (for (o1 o2 o3) = (list (+ pc 1) (+ pc 2) (+ pc 3)))
              (ecase instr
                (1 (store m3 o3
                          (+ (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (2 (store m3 o3
                          (* (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (3 (store m1 o1 (funcall read-fn))
                   (incf pc 2))
                (4 (funcall write-fn
                            (fetch m1 o1))
                   (incf pc 2))
                (5 (if (not (zerop (fetch m1 o1)))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (6 (if (zerop (fetch m1 o1))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (7 (store m3 o3
                          (if (< (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (8 (store m3 o3
                          (if (= (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (9 (incf relative-base (fetch m1 o1))
                   (incf pc 2))
                (99 (return-from intcode)))))))
#+END_SRC
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<intcode>>
  <<solve-a>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2019.17.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
#+begin_example
..^######..........................
........#..........................
........#..........................
........#..........................
........#..........................
........#..........................
#########..........................
#..................................
#..................................
#..................................
#..................................
#..................................
#..................................
#..................................
#..................................
#..................................
#####..............................
....#..............................
....#..............................
....#..............................
....#..............................
....#..............................
....###########....................
..............#....................
..............#...........#########
..............#...........#........
..............#...........#........
..............#...........#........
..............#...........#........
..............#...........#........
........#######...........#........
........#.................#........
........#.................#........
........#.................#........
#######.#...........#######........
#.....#.#...........#..............
#.....#.#...........#..............
#.....#.#...........#..............
#.....#.#...#####...#..............
#.....#.#...#...#...#..............
#########...#...#...#..............
......#.....#...#...#..............
......###########...#..............
............#.......#..............
....#####...#.#######..............
....#...#...#.#....................
....#...#...#.#....................
....#...#...#.#....................
....#############..................
........#...#.#.#..................
......#######.#.#..................
......#.#.....#.#..................
......#.#.###########..............
......#.#.#...#.#...#..............
#########.#...#.###########........
#.....#...#...#.....#.....#........
#.....#...#####.....#.....#........
#.....#.............#.....#........
#.....#.............#.....#........
#.....#.............#.....#........
#######.............#######........

Problem 17 A: 5740
Problem 17 B: 1022165
#+end_example
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2019.17)
  (in-suite aoc.2019.17)

  (run! 'aoc.2019.17)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
