#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 03
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2019-03)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2019-03
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2019-03)
#+END_SRC
** Input
The input is a series of lines with comma separated descriptions of
wires.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun description-to-direction (string)
    (list
     (ecase (char string 0)
       ((#\R) #C(1 0))
       ((#\L) #C(-1 0))
       ((#\U) #C(0 1))
       ((#\D) #C(0 -1)))
     (parse-integer (subseq string 1))))

  (defun wire-directions (descriptions)
    (map 'list #'description-to-direction descriptions))

  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (wire-directions (cl-ppcre:split "," line)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/03.txt"))
#+END_SRC
** Part 1
Find the intersection point nearest (manhattan distance) the starting
point of the two wires.
#+NAME: solve-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun draw-wire (wire)
    (let ((trace (make-hash-table)))
      (iter (for (d l) in wire)
            (with steps = 0)
            (with position = #C(0 0))
            (iter (for i from 0 below l)
                  (incf position d)
                  (incf steps)
                  (unless (gethash position trace)
                    (setf (gethash position trace) steps))))
      trace))
  (defun intersections (w1 w2)
    (let ((intersections '()))
      (iter (for (p nil) in-hashtable w1)
            (when (gethash p w2)
              (push p intersections)))
      intersections))
  (defun manhattan (p)
    (+ (abs (realpart p))
       (abs (imagpart p))))
  (defun solve-a (wires)
    (let* ((w1 (draw-wire (first wires)))
           (w2 (draw-wire (second wires)))
           (intersections (intersections w1 w2)))
      (iter (for p in intersections)
            (finding (manhattan p) minimizing (manhattan p)))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 03 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
#+NAME: solve-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (wires)
    (let* ((w1 (draw-wire (first wires)))
           (w2 (draw-wire (second wires)))
           (intersections (intersections w1 w2)))
      (iter (for p in intersections)
            (finding (+ (gethash p w1) (gethash p w2))
                     minimizing (+ (gethash p w1) (gethash p w2))))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 03 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<solve-a>>
  <<solve-b>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2019.03.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 03 A: 1285
: Problem 03 B: 14228
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2019.03)
  (in-suite aoc.2019.03)

  (run! 'aoc.2019.03)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
