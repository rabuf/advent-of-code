o#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 19
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2019-19)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2019-19
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2019-19)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
      (with-open-file (s file)
        (map 'vector #'parse-integer (cl-ppcre:split "," (read-line s)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/19.txt"))
#+END_SRC
** Part 1
Input to the drone is a pair of numbers (X and Y coordinates, positive
ranging from $[0-50]$ each. The output is 0 or 1 depending on whether
the tractor beam affects the drone at that location. I'm not sure if
the program loops forever or not, going OT run it real quick.

The intcode program terminates immediately. So this is a simple loop
to test all 2500 locations.
#+NAME: tractor-test
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun tractor-test (program)
    (let ((count 0))
      (iter (for x from 0 to 49)
            (iter (for y from 0 to 49)
                  (for input = (list x y))
                  (intcode program
                           :read-fn (lambda () (pop input))
                           :write-fn (lambda (v)
                                       (incf count v)))))
      count))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 19 A: ~a~%" (tractor-test *input*)))
#+END_SRC
** Part 2
Now we need to identify the nearest 100x100 region that fits inside
the tractor beam. Once located, take the nearest upper left
coordinate's X value times 10000 added to its Y value, that's our answer.
#+NAME: save-santa
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun region (grid max-x max-y &optional (limit 100))
    (iter (for y from 0 to max-y)
          (iter (for x from 0 to max-x)
                (if (iter (for j from y below (+ y limit))
                          (always (iter (for i from x below (+ x limit))
                                        (always (= 1 (gethash (complex i j) grid 0))))))
                    (return-from region (complex x y))))))
  (defun print-grid (grid max-x max-y)
    (iter (for y from 0 below max-y)
          (iter (for x from 0 below max-x)
                (format t "~A" (gethash (complex x y) grid 0)))
          (format t "~%")))
  (defun save-santa (program)
    (let ((grid (make-hash-table)))
      (iter (for limit from 0)
            (for found = (region grid limit limit 100))
            (when (zerop (mod limit 100)) (print limit))
            (when found (return (+ (imagpart found) (* (realpart found) 10000))))
            (iter (for y from 0 to limit)
                  (for x = limit)
                  (for input = (list x y))
                  (intcode program
                           :read-fn (lambda () (pop input))
                           :write-fn (lambda (v)
                                       (setf (gethash (complex x y) grid) v))))
            (iter (for y = limit)
                  (for x from 0 to limit)
                  (for input = (list x y))
                  (intcode program
                           :read-fn (lambda () (pop input))
                           :write-fn (lambda (v)
                                       (setf (gethash (complex x y) grid) v)))))))
#+END_SRC

The above works, though it's ridiculously slow. I have several ideas
for how to improve the search, in particular I should just search
starting 100 rows above whatever I've generated. Next, I should check
the corners. If they don't pass, then no reason to perform a search of
10k spaces.
#+NAME: save-santa-improved
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun region-improved (grid max-x max-y &optional (limit 100))
    (let ((y (- max-y limit)))
      (iter (for x from 0 to (- max-x limit))
            (if (= 1 (gethash (complex x y) grid 0) (gethash (complex (+ x 99) y) grid 0)
                   (gethash (complex x (+ y 99)) grid 0) (gethash (complex (+ x 99) (+ y 99)) grid 0))
                ;; (if (iter (for j from y below (+ y limit))
                ;;           (always (iter (for i from x below (+ x limit))
                ;;                         (always (= 1 (gethash (complex i j) grid 0))))))
                (return-from region-improved (complex x y))))))
  (defun save-santa-improved (program)
    (let ((grid (make-hash-table)))
      (iter (for limit from 0)
            (for found = (region-improved grid limit limit 100))
            (when (zerop (mod limit 100)) (print limit))
            (when found (return (+ (imagpart found) (* (realpart found) 10000))))
            (iter (for y from 0 to limit)
                  (for x = limit)
                  (for input = (list x y))
                  (intcode program
                           :read-fn (lambda () (pop input))
                           :write-fn (lambda (v)
                                       (setf (gethash (complex x y) grid) v))))
            (iter (for y = limit)
                  (for x from 0 to limit)
                  (for input = (list x y))
                  (intcode program
                           :read-fn (lambda () (pop input))
                           :write-fn (lambda (v)
                                       (setf (gethash (complex x y) grid) v)))))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 19 B: ~a~%" (identity *input*)))
#+END_SRC
** Putting it all together
#+NAME: intcode
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun intcode (program &key (read-fn #'read) (write-fn #'write))
    (let ((memory (make-hash-table))
          (relative-base 0))
      (iter (for val in-vector program with-index i)
            (setf (gethash i memory) val))
      (flet ((fetch (mode address)
               (gethash (ecase mode
                          (0 (gethash address memory 0))
                          (1 address)
                          (2 (+ relative-base
                                (gethash address memory 0))))
                        memory 0))
             (store (mode address value)
               (setf (gethash (ecase mode
                                (0 (gethash address memory 0))
                                (2 (+ relative-base
                                      (gethash address memory 0))))
                              memory 0)
                     value)))
        (iter (with pc = 0)
              (for op = (fetch 1 pc))
              (for instr = (mod op 100))
              (for modes = (floor op 100))
              (for (m1 m2 m3) = (list (mod modes 10)
                                      (mod (floor modes 10) 10)
                                      (mod (floor modes 100) 10)))
              (for (o1 o2 o3) = (list (+ pc 1) (+ pc 2) (+ pc 3)))
              (ecase instr
                (1 (store m3 o3
                          (+ (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (2 (store m3 o3
                          (* (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (3 (store m1 o1 (funcall read-fn))
                   (incf pc 2))
                (4 (funcall write-fn
                            (fetch m1 o1))
                   (incf pc 2))
                (5 (if (not (zerop (fetch m1 o1)))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (6 (if (zerop (fetch m1 o1))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (7 (store m3 o3
                          (if (< (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (8 (store m3 o3
                          (if (= (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (9 (incf relative-base (fetch m1 o1))
                   (incf pc 2))
                (99 (return-from intcode)))))))
#+END_SRC

#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<intcode>>
  <<tractor-test>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2019.19.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
#+begin_example
Problem 19 A: 169
Problem 19 B: #(109 424 203 1 21102 1 11 0 1106 0 282 21101 18 0 0 1105 1 259
                2102 1 1 221 203 1 21101 0 31 0 1105 1 282 21101 0 38 0 1105 1
                259 20101 0 23 2 21202 1 1 3 21101 0 1 1 21101 57 0 0 1105 1
                303 1202 1 1 222 21002 221 1 3 21001 221 0 2 21102 1 259 1
                21101 0 80 0 1105 1 225 21101 0 175 2 21102 1 91 0 1106 0 303
                2101 0 1 223 21001 222 0 4 21102 259 1 3 21101 225 0 2 21102 1
                225 1 21102 1 118 0 1105 1 225 21002 222 1 3 21101 70 0 2 21101
                0 133 0 1105 1 303 21202 1 -1 1 22001 223 1 1 21102 1 148 0
                1105 1 259 2102 1 1 223 21002 221 1 4 21002 222 1 3 21102 24 1
                2 1001 132 -2 224 1002 224 2 224 1001 224 3 224 1002 132 -1 132
                1 224 132 224 21001 224 1 1 21101 195 0 0 105 1 109 20207 1 223
                2 21002 23 1 1 21101 0 -1 3 21102 1 214 0 1106 0 303 22101 1 1
                1 204 1 99 0 0 0 0 109 5 2102 1 -4 249 21202 -3 1 1 22102 1 -2
                2 21201 -1 0 3 21101 0 250 0 1106 0 225 21201 1 0 -4 109 -5
                2105 1 0 109 3 22107 0 -2 -1 21202 -1 2 -1 21201 -1 -1 -1 22202
                -1 -2 -2 109 -3 2105 1 0 109 3 21207 -2 0 -1 1206 -1 294 104 0
                99 21202 -2 1 -2 109 -3 2106 0 0 109 5 22207 -3 -4 -1 1206 -1
                346 22201 -4 -3 -4 21202 -3 -1 -1 22201 -4 -1 2 21202 2 -1 -1
                22201 -4 -1 1 22101 0 -2 3 21101 343 0 0 1105 1 303 1105 1 415
                22207 -2 -3 -1 1206 -1 387 22201 -3 -2 -3 21202 -2 -1 -1 22201
                -3 -1 3 21202 3 -1 -1 22201 -3 -1 2 21201 -4 0 1 21101 0 384 0
                1105 1 303 1105 1 415 21202 -4 -1 -4 22201 -4 -3 -4 22202 -3 -2
                -2 22202 -2 -4 -4 22202 -3 -2 -3 21202 -4 -1 -2 22201 -3 -2 1
                21201 1 0 -4 109 -5 2106 0 0)
#+end_example
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2019.19)
  (in-suite aoc.2019.19)

  (run! 'aoc.2019.19)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
