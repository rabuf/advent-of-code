#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 15
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2019-15)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2019-15
    (:use :common-lisp
          :iterate
          :lparallel.queue
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2019-15)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
      (with-open-file (s file)
        (map 'vector #'parse-integer (cl-ppcre:split "," (read-line s)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/15.txt"))
#+END_SRC
** Part 1
It is another Intcode program. This one is relaying messages to/from a
repair robot. The objective is to, first, produce a map. After
producing the map, the second objective is to identify the shortest
path from the start to the target.

Inputs to the program are the numbers 1-4 (north, south, west, east).

Outputs are 0, 1, 2.
- 0 :: hit a wall, didn't move
- 1 :: successfully moved
- 2 :: moved and on oxygen system.

Initially I was going to use callbacks, but the problem was that I
really wanted to use a recursive search algorithm to try and find the
destination.

Solution: threads and queues.
#+NAME: solve-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun bounds (grid)
    (iter (for (k v) in-hashtable grid)
          (maximizing (realpart k) into max-x)
          (maximizing (imagpart k) into max-y)
          (minimizing (realpart k) into min-x)
          (minimizing (imagpart k) into min-y)
          (finally (return-from bounds (list max-x min-x max-y min-y)))))

  (defun print-grid (grid &optional position)
    (destructuring-bind
     (max-x min-x max-y min-y) (bounds grid)
     (iter (for y from (1+ max-y) downto (1- min-y))
           (iter (for x from (1- min-x) to (1+ max-x))
                 (cond ((and position (zerop (complex x y)))
                        (format t "@"))
                       (t
                        (format t "~a" (gethash (complex x y) grid #\Space)))))
           (format t "~%"))))

  (defun dfs (in out grid &optional (position 0) (depth 1))
    (let* ((directions (list (complex 0 1)
                             (complex 0 -1)
                             (complex -1 0)
                             (complex 1 0))))
      ;;(print-grid grid position)
      (iter (for i from 1 to 4)
            (for d in directions)
            (unless (gethash (+ position d) grid)
              (push-queue i in)
              (ecase (pop-queue out)
                (0 (setf (gethash (+ position d) grid) #\#))
                (1 (setf (gethash (+ position d) grid) #\.)
                   (dfs in out grid (+ position d) (1+ depth))
                   (ecase i
                     (1 (push-queue 2 in))
                     (2 (push-queue 1 in))
                     (3 (push-queue 4 in))
                     (4 (push-queue 3 in)))
                   (pop-queue out))
                (2 (setf (gethash (+ position d) grid) #\*)
                   (dfs in out grid (+ position d) (1+ depth))
                   (ecase i
                     (1 (push-queue 2 in))
                     (2 (push-queue 1 in))
                     (3 (push-queue 4 in))
                     (4 (push-queue 3 in)))
                   (pop-queue out)
                   (format t "Found it! ~a~%" depth)))))))


  (defun produce-map (program)
    (let* ((in-queue (make-queue))
           (out-queue (make-queue))
           (grid (make-hash-table)))
      (setf (gethash 0 grid) #\.)
      (labels ((get-input () (pop-queue in-queue))
               (send-feedback (x) (push-queue x out-queue)))
        (let ((search-thread (bt:make-thread (lambda ()
                                               (dfs in-queue out-queue grid)) :name "Search"))
              (interface-thread (bt:make-thread (lambda ()
                                                  (intcode program :read-fn #'get-input :write-fn #'send-feedback))
                                                :name "Intcode")))
          (bt:join-thread search-thread)
          (print-grid grid)
          (bt:destroy-thread interface-thread)
          grid))))

#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (produce-map *input*) (format t "Problem 15 A: ~a~%" 262))
#+END_SRC
** Part 2
The second part is to treat the grid from Part 1 as a state
machine. Each minute, the =O=, representing an oxygenated section,
spreads to adjacent areas. How many iterations until all empty spaces,
=.=, are oxygenated.
#+NAME: solve-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun filled-p (grid)
    (iter (for (k v) in-hashtable grid)
          (always (or (char= v #\#)
                      (char= v #\*)))))
  (defun tick (grid)
    (let ((new-points nil)
          (directions (list #C(0 1) #C(0 -1) #C(1 0) #C(-1 0))))
      (iter (for (k v) in-hashtable grid)
            (when (char= v #\.)
              (iter (for d in directions)
                    (when (char= (gethash (+ k d) grid)
                                 #\*)
                      (pushnew k new-points)))))
      (iter (for p in new-points)
            (setf (gethash p grid) #\*))))
  (defun solve-b (program)
    (let ((grid (produce-map program)))
      (iter (for i from 0)
            (until (filled-p grid))
            (finally (return i))
            (tick grid))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 15 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: intcode
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun intcode (program &key (read-fn #'read) (write-fn #'write))
    (let ((memory (make-hash-table))
          (relative-base 0))
      (iter (for val in-vector program with-index i)
            (setf (gethash i memory) val))
      (flet ((fetch (mode address)
               (gethash (ecase mode
                          (0 (gethash address memory 0))
                          (1 address)
                          (2 (+ relative-base
                                (gethash address memory 0))))
                        memory 0))
             (store (mode address value)
               (setf (gethash (ecase mode
                                (0 (gethash address memory 0))
                                (2 (+ relative-base
                                      (gethash address memory 0))))
                              memory 0)
                     value)))
        (iter (with pc = 0)
              (for op = (fetch 1 pc))
              (for instr = (mod op 100))
              (for modes = (floor op 100))
              (for (m1 m2 m3) = (list (mod modes 10)
                                      (mod (floor modes 10) 10)
                                      (mod (floor modes 100) 10)))
              (for (o1 o2 o3) = (list (+ pc 1) (+ pc 2) (+ pc 3)))
              (ecase instr
                (1 (store m3 o3
                          (+ (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (2 (store m3 o3
                          (* (fetch m1 o1)
                             (fetch m2 o2)))
                   (incf pc 4))
                (3 (store m1 o1 (funcall read-fn))
                   (incf pc 2))
                (4 (funcall write-fn
                            (fetch m1 o1))
                   (incf pc 2))
                (5 (if (not (zerop (fetch m1 o1)))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (6 (if (zerop (fetch m1 o1))
                       (setf pc (fetch m2 o2))
                       (incf pc 3)))
                (7 (store m3 o3
                          (if (< (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (8 (store m3 o3
                          (if (= (fetch m1 o1) (fetch m2 o2)) 1 0))
                   (incf pc 4))
                (9 (incf relative-base (fetch m1 o1))
                   (incf pc 2))
                (99 (return-from intcode)))))))
#+END_SRC

#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<intcode>>
  <<solve-a>>
  <<solve-b>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2019.15.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
#+begin_example
                                           
  # ### ### ######### # ####### ### ### #  
 #.#...#...#.........#.#.......#...#...#.# 
 #.#.#.#.#.#.###.###.#.#.#.###.#.#.#.#.#.# 
 #...#...#...#.#.#...#...#...#...#...#.#.# 
 #.## ########.#.#.#########.#########.#.# 
 #...#.....#...#.#.........#.#.......#...# 
  ##.#.###.###.#.#########.#.#######.###.# 
 #.....#.#.....#.#.....#...#.#...#.....#.# 
 #.#####.#.#####.#.###.#.###.#.#.#.#####.# 
 #.#...#...#.....#.#.#.#.#...#.#.#...#...# 
  ##.#.#####.#####.#.#.#.#.###.#.###.#.##  
 #...#.#.....#.....#...#.#.#...#...#.....# 
 #.###.#.#####.#.###.###.#.#.#####.#.####  
 #...#.#...#...#.#.....#.#.#.#...#.#.#...# 
 #.#.#.#.#.#####.#####.#.#.#.###.#.###.#.# 
 #.#.#.#.#.....#...#...#.#.#.#...#.....#.# 
 #.#.#.#######.#.#.#.###.#.#.#.#########.# 
 #.#.#.........#.#.#.#.....#.#.#...#.....# 
  ##.###########.#.###.#####.#.#.#.#.####  
 #...#...........#.....#...#.#...#.#.....# 
 #.############## ######.#.#.#.###.#####.# 
 #.......#.......#...#...#...#.#.#.....#.# 
 #.#####.#.#####.#.#.#########.#.#####.#.# 
 #...#...#.....#...#.......#...#.....#...# 
  ##.#.#.#####.###########.#.#######.####  
 #...#.#.#.....#.......#...#.#.......#...# 
 #.###.#.#.#####.#####.#.###.#.#####.#.#.# 
 #.#...#.#...#.#.....#.#.#...#.....#...#.# 
  ##.###.###.#.#.###.#.#.#.###.###.#.####  
 #...#...#.#.#.#...#.#.#...#.....#.#.#...# 
 #.###.###.#.#.###.#.###########.#.###.#.# 
 #.#.#.#...#.#.#...#...........#.#.....#.# 
 #.#.#.#.#.#.#.#.#####.#####.#.###.#####.# 
 #.#.#...#.#.#...#...#...#...#...#.....#.# 
 #.#.#####.#.#####.#.###.#.#####.###.###.# 
 #.#.#.....#.#.....#.#...#.#...#.#*..#...# 
 #.#.#.#####.#.#####.#####.#.#.#.#####.#.# 
 #.#.....#...#.#.#...#...#...#.#.....#.#.# 
 #.#######.###.#.#.###.#.#####.#####.#.#.# 
 #.............#.......#.......#.......#.# 
  ############# ####### ####### ####### #  
                                           
Problem 15 A: 262
                                           
  # ### ### ######### # ####### ### ### #  
 #.#...#...#.........#.#.......#...#...#.# 
 #.#.#.#.#.#.###.###.#.#.#.###.#.#.#.#.#.# 
 #...#...#...#.#.#...#...#...#...#...#.#.# 
 #.## ########.#.#.#########.#########.#.# 
 #...#.....#...#.#.........#.#.......#...# 
  ##.#.###.###.#.#########.#.#######.###.# 
 #.....#.#.....#.#.....#...#.#...#.....#.# 
 #.#####.#.#####.#.###.#.###.#.#.#.#####.# 
 #.#...#...#.....#.#.#.#.#...#.#.#...#...# 
  ##.#.#####.#####.#.#.#.#.###.#.###.#.##  
 #...#.#.....#.....#...#.#.#...#...#.....# 
 #.###.#.#####.#.###.###.#.#.#####.#.####  
 #...#.#...#...#.#.....#.#.#.#...#.#.#...# 
 #.#.#.#.#.#####.#####.#.#.#.###.#.###.#.# 
 #.#.#.#.#.....#...#...#.#.#.#...#.....#.# 
 #.#.#.#######.#.#.#.###.#.#.#.#########.# 
 #.#.#.........#.#.#.#.....#.#.#...#.....# 
  ##.###########.#.###.#####.#.#.#.#.####  
 #...#...........#.....#...#.#...#.#.....# 
 #.############## ######.#.#.#.###.#####.# 
 #.......#.......#...#...#...#.#.#.....#.# 
 #.#####.#.#####.#.#.#########.#.#####.#.# 
 #...#...#.....#...#.......#...#.....#...# 
  ##.#.#.#####.###########.#.#######.####  
 #...#.#.#.....#.......#...#.#.......#...# 
 #.###.#.#.#####.#####.#.###.#.#####.#.#.# 
 #.#...#.#...#.#.....#.#.#...#.....#...#.# 
  ##.###.###.#.#.###.#.#.#.###.###.#.####  
 #...#...#.#.#.#...#.#.#...#.....#.#.#...# 
 #.###.###.#.#.###.#.###########.#.###.#.# 
 #.#.#.#...#.#.#...#...........#.#.....#.# 
 #.#.#.#.#.#.#.#.#####.#####.#.###.#####.# 
 #.#.#...#.#.#...#...#...#...#...#.....#.# 
 #.#.#####.#.#####.#.###.#.#####.###.###.# 
 #.#.#.....#.#.....#.#...#.#...#.#*..#...# 
 #.#.#.#####.#.#####.#####.#.#.#.#####.#.# 
 #.#.....#...#.#.#...#...#...#.#.....#.#.# 
 #.#######.###.#.#.###.#.#####.#####.#.#.# 
 #.............#.......#.......#.......#.# 
  ############# ####### ####### ####### #  
                                           
Problem 15 B: 314
#+end_example
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2019.15)
  (in-suite aoc.2019.15)

  (run! 'aoc.2019.15)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
