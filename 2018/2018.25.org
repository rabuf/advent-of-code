#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 25
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2018-25)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2018-25
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2018-25)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect line)))
#+END_SRC
#+NAME: parse-input
#+BEGIN_SRC lisp :results silent
  (defun parse-input (lines)
    (iter (for line in lines)
          (collect (mapcar #'parse-integer (ppcre:all-matches-as-strings "-?\\d+" line)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/25.txt"))
#+END_SRC
** Part 1
A "constellation" is formed by stars (each input is a coordinate for a
star) that are within 3 of each other by Manhattan distance or have
some start between them which is within 3.

The generalized (arbitrary length lists) Manhattan distance function returns:
#+NAME: manhattan-distance
#+BEGIN_SRC lisp :results silent
  (defun manhattan-distance (v1 v2)
    (reduce #'+ (mapcar #'abs (mapcar #'- v1 v2))))
#+END_SRC

There are 1257 inputs. A very slow way would be to grab the first
element, find everything within 3 of it (push them into a list). Then
repeat finding everything within 3 of those until the list doesn't
grow. But that's not going to be fast.

#+NAME: slow-method
#+BEGIN_SRC lisp :results silent
  (defun slow-method (stars)
    (let ((constellation (list (pop stars)))
          (constellations nil)
          (init 0))
      (iter (until (null stars))
            (setf init (length stars))
            (iter (for star in stars)
                  (when (some (lambda (s)
                                (<= (manhattan-distance s star) 3))
                              constellation)
                    (push star constellation)))
            (iter (for star in constellation)
                  (setf stars (remove star stars :test #'equalp)))
            (when (= init (length stars))
              (push constellation constellations)
              (setf constellation (list (pop stars)))))
      (if (and (not (null constellation))
               (not (member constellation constellations :test #'equalp)))
          (push constellation constellations))
      (length constellations)))
#+END_SRC

#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 25 A: ~a~%" (slow-method (parse-input *input*))))
#+END_SRC
** Part 2
There is no part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 25 B: ~a~%" "Done!"))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<parse-input>>
  <<manhattan-distance>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.25.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 25 A: 377
: Problem 25 B: Done!
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2018.25)
  (in-suite aoc.2018.25)
  (defparameter *test-1* (list "0,0,0,0"
                               "3,0,0,0"
                               "0,3,0,0"
                               "0,0,3,0"
                               "0,0,0,3"
                               " 0,0,0,6"
                               " 9,0,0,0"
                               "12,0,0,0"))
  (print (slow-method (parse-input *test-1*)))
  (defparameter *test-2* (list "-1,2,2,0"
                               "0,0,2,-2"
                               "0,0,0,-2"
                               "-1,2,0,0"
                               "-2,-2,-2,2"
                               "3,0,2,-1"
                               "-1,3,2,2"
                               "-1,0,-1,0"
                               "0,2,1,-2"
                               "3,0,0,0"))
  (print (slow-method (parse-input *test-2*)))

  (run! 'aoc.2018.25)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: 2 
: 4 
: Running test suite AOC.2018.25
:  Didn't run anything...huh?
** Thoughts
