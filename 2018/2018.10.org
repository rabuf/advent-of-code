#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 10
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2018-10)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2018-10
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2018-10)
#+END_SRC
** Input
The input is a list of positions and velocities. I'll parse this
quickly using ppcre.
#+NAME: parse-line
#+BEGIN_SRC lisp :results silent
  (defun parse-line (line)
    (destructuring-bind (x y dx dy)
        (mapcar #'parse-integer (ppcre:all-matches-as-strings "(-?\\d+)" line))
      (list (complex x y) (complex dx dy))))
#+END_SRC
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/10.txt"))
#+END_SRC
** Part 1
Alright, so I'm going to take the given values and create a list of
pairs: position and velocity. Each position is lit up. So now I need a
way to print the current status.
#+NAME: print-lights
#+BEGIN_SRC lisp :results silent
  (defun minx (lights)
    (iter (for (p v) in lights)
          (minimize (realpart p))))
  (defun maxx (lights)
      (iter (for (p v) in lights)
          (maximize (realpart p))))
  (defun miny (lights)
    (iter (for (p v) in lights)
          (minimize (imagpart p))))
  (defun maxy (lights)
      (iter (for (p v) in lights)
          (maximize (imagpart p))))
  (defun print-lights (lights)
    (iter (for y from (miny lights) to (maxy lights))
          (iter (for x from (minx lights) to (maxx lights))
                (if (find (complex x y) lights :key #'car)
                    (format t "#")
                    (format t ".")))
          (format t "~%")))
#+END_SRC
I cannot see anything in this that's wrong. But I can't get the
correct test output.

The problem was in the parser, I searched on "(\\d+)" which wouldn't,
naturally, find negative numbers. Brilliant.
#+NAME: increment-lights
#+BEGIN_SRC lisp :results silent
  (defun increment-lights (lights &optional (multiplier 1))
    (iter (for (p v) in lights)
          (collect (list (+ p (* multiplier v)) v))))
#+END_SRC
I still don't want to print out each option. Instead, I'm going to do
an execution (through 100,000 steps) and find the minimum
height. Given that, I'll again iterate and then print out that one.
#+BEGIN_SRC lisp :results output :exports both
  (let ((lights *input*))
    (iter (for i from 0 to 100000)
          (let ((maxx (maxx lights))
                (minx (minx lights))
                (maxy (maxy lights))
                (miny (miny lights)))
            (declare (ignore minx maxx))
            (if (<  (abs (- maxy miny)) 40)
                (format t "Possible at t = ~A ~A~%" i (- maxy miny))))
          (setf lights (increment-lights lights))))
#+END_SRC

#+RESULTS:
: Possible at t = 10388 39
: Possible at t = 10389 29
: Possible at t = 10390 19
: Possible at t = 10391 9
: Possible at t = 10392 18
: Possible at t = 10393 28
: Possible at t = 10394 38

So the minimum height happens at t = 10391.

#+BEGIN_SRC lisp :results output :exports both
  (let ((lights *input*))
    (print-lights (increment-lights lights 10391)))
#+END_SRC

#+RESULTS:
#+begin_example
#####...######..######..######...####...#....#..#....#..######
#....#..#.......#............#..#....#..##...#..#....#..#.....
#....#..#.......#............#..#.......##...#...#..#...#.....
#....#..#.......#...........#...#.......#.#..#...#..#...#.....
#####...#####...#####......#....#.......#.#..#....##....#####.
#....#..#.......#.........#.....#.......#..#.#....##....#.....
#....#..#.......#........#......#.......#..#.#...#..#...#.....
#....#..#.......#.......#.......#.......#...##...#..#...#.....
#....#..#.......#.......#.......#....#..#...##..#....#..#.....
#####...#.......#.......######...####...#....#..#....#..######
#+end_example

#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 10 A: ~a~%" nil))
#+END_SRC
** Part 2
Amusingly, part 2 wants to know how long it would take to get that
result and we already have it calculated. This was a relatively easy
one once I got the parsing issues out of the way.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 10 B: ~a~%" nil))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<parse-line>>
  <<read-input>>
  <<print-lights>>
  <<increment-lights>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.10.lisp
  <<initialize>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 10 A: NIL
: Problem 10 B: NIL
** Tests
#+BEGIN_SRC lisp :results output :exports both
  (defparameter *test-case* (mapcar #'parse-line
                                    (list "position=< 9,  1> velocity=< 0,  2>"
                                          "position=< 7,  0> velocity=<-1,  0>"
                                          "position=< 3, -2> velocity=<-1,  1>"
                                          "position=< 6, 10> velocity=<-2, -1>"
                                          "position=< 2, -4> velocity=< 2,  2>"
                                          "position=<-6, 10> velocity=< 2, -2>"
                                          "position=< 1,  8> velocity=< 1, -1>"
                                          "position=< 1,  7> velocity=< 1,  0>"
                                          "position=<-3, 11> velocity=< 1, -2>"
                                          "position=< 7,  6> velocity=<-1, -1>"
                                          "position=<-2,  3> velocity=< 1,  0>"
                                          "position=<-4,  3> velocity=< 2,  0>"
                                          "position=<10, -3> velocity=<-1,  1>"
                                          "position=< 5, 11> velocity=< 1, -2>"
                                          "position=< 4,  7> velocity=< 0, -1>"
                                          "position=< 8, -2> velocity=< 0,  1>"
                                          "position=<15,  0> velocity=<-2,  0>"
                                          "position=< 1,  6> velocity=< 1,  0>"
                                          "position=< 8,  9> velocity=< 0, -1>"
                                          "position=< 3,  3> velocity=<-1,  1>"
                                          "position=< 0,  5> velocity=< 0, -1>"
                                          "position=<-2,  2> velocity=< 2,  0>"
                                          "position=< 5, -2> velocity=< 1,  2>"
                                          "position=< 1,  4> velocity=< 2,  1>"
                                          "position=<-2,  7> velocity=< 2, -2>"
                                          "position=< 3,  6> velocity=<-1, -1>"
                                          "position=< 5,  0> velocity=< 1,  0>"
                                          "position=<-6,  0> velocity=< 2,  0>"
                                          "position=< 5,  9> velocity=< 1, -2>"
                                          "position=<14,  7> velocity=<-2,  0>"
                                          "position=<-3,  6> velocity=< 2, -1>")))
  ;; (format t "~{~A~%~}~%" *test-case*)
  (let ((lights *test-case*))
    (iter (for i from 0 to 2)
          (setf lights (increment-lights lights)))
    (print-lights lights))
  (let ((lights *test-case*))
    (print-lights (increment-lights lights 3)))
#+END_SRC

#+RESULTS:
#+begin_example
#...#..###
#...#...#.
#...#...#.
#####...#.
#...#...#.
#...#...#.
#...#...#.
#...#..###
#...#..###
#...#...#.
#...#...#.
#####...#.
#...#...#.
#...#...#.
#...#...#.
#...#..###
#+end_example

#+NAME: tests
#+BEGIN_SRC lisp :results output
  (def-suite suite-2018.10)
  (in-suite suite-2018.10)

  (run! 'suite-2018.10)
#+END_SRC
** Thoughts
A couple things come to mind. I should add an optional parameter to my
increment-light function to let it fast-forward to a specific time
(multiplier). No reason to loop 10k times when one series of
multiplies can accomplish the same thing.
