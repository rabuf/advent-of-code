#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 23
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2018-23)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :cl-heap)
    (ql:quickload "cl-heap"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2018-23
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2018-23)
#+END_SRC
** Input
Each entry is a list of 4 numbers. 3 representing the position of a
nanobot and the 4th its range. All numbers are integers, distances are
manhattan distance.

Let's make this a bit more convenient, a struct containing the
position and range.
#+NAME: nanobot
#+BEGIN_SRC lisp :results silent
  (defstruct (nanobot (:conc-name nb-))
    (position '(0 0 0))
    (range 0))
#+END_SRC
#+NAME: parse-line
#+BEGIN_SRC lisp :results silent
  (defun parse-line (line)
    (let ((values (mapcar #'parse-integer (ppcre:all-matches-as-strings "-?\\d+" line))))
      (make-nanobot :position (butlast values) :range (car (last values)))))
#+END_SRC
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/23.txt"))
#+END_SRC
** Part 1
#+NAME: manhattan-distance
#+BEGIN_SRC lisp :results silent
  (defun manhattan-distance (p1 p2)
    (reduce #'+ (mapcar #'abs (mapcar #'- p1 p2))))
#+END_SRC

Need the strongest nanobot:
#+NAME: strongest-nanobot
#+BEGIN_SRC lisp :results silent
  (defun strongest-nanobot (bots)
    (iter (for bot in bots)
          (finding bot maximizing (nb-range bot))))
#+END_SRC

#+NAME: in-range
#+BEGIN_SRC lisp :results silent
  (defun in-range (position bot)
    (<= (manhattan-distance position (nb-position bot)) (nb-range bot)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 23 A: ~a~%"
                              (let ((strongest (strongest-nanobot *input*)))
                                (iter (for bot in *input*)
                                      (count (in-range (nb-position bot) strongest))))))
#+END_SRC
** Part 2
Find the point closest to (0,0,0) that is in range of the most
nanobots. Naive idea: Determine bounding box (min/max x, min/max y,
min/max z) for all nanobots and iterate over that. I think this is a
bad idea, but let's see how big a search area it'd be.
#+NAME: bounding-box
#+BEGIN_SRC lisp :results silent
  (defun bounding-box (bots)
    (iter (for bot in bots)
          (let ((x (first (nb-position bot)))
                (y (second (nb-position bot)))
                (z (third (nb-position bot)))
                (r (nb-range bot)))
            (maximizing (+ x r) into max-x)
            (maximizing (+ y r) into max-y)
            (maximizing (+ z r) into max-z)
            (minimizing (- x r) into min-x)
            (minimizing (- y r) into min-y)
            (minimizing (- z r) into min-z))
          (finally (return (list (list max-x max-y max-z) (list min-x min-y min-z))))))
#+END_SRC
#+BEGIN_SRC lisp :exports both
  (bounding-box *input*)
#+END_SRC

#+RESULTS:
|  299217106 |  191248915 |  293421039 |
| -241026331 | -211229465 | -131154845 |

Let's make a quick function:
#+BEGIN_SRC lisp :results silent
  (defun bb-volume (bounds)
    (reduce #'* (mapcar #'abs (mapcar #'- (car bounds) (cadr bounds)))))
#+END_SRC

#+BEGIN_SRC lisp :exports both
  (bb-volume (bounding-box *input*))
#+END_SRC

#+RESULTS:
: 9.231821069976878e+25

#+BEGIN_SRC lisp :results both
  (mapcar #'- (mapcar #'abs (apply #'mapcar (cons #'- (bounding-box *input*)))) '(99083094 99083094 99083094))
#+END_SRC

#+RESULTS:
| 441160343 | 303395286 | 325492790 |

That is a huge number of potential points to consider. We can
/definitely/ do better but I'll need a moment to think about it.

Pick the center of the bounding box and divide the space into 8
regions. Recurse down the one with the best answer so far.

I'll start by creating a bounding box for each bot. It will have the
same center as the bots but a larger range (increased to an even power
of 2).

I'll divide the best of these boxes (has the most bots in range of it)
into 27 new boxes each with half the range of the original. The
priority is the max of the bots that its center is in range of or the
number of bots it can see with its range.

Once a box gets to some small range we check and see if it's better than the
best we've found so far (seed best with the origin).

This happens to find the best solution (both of these do). But I don't
allow this to terminate so it'll keep searching forever. I checked
someone else's solver, and while we agree on the Manhattan distance
they found a point that was similarly close but had more nanobots in
range (980). I've tried tuning this a bit (different divisors in
dividing the box) but I can't quite get it to find the actual maximal
point, but only other things at a similar distance.

#+NAME: recursive-subdivision
#+BEGIN_SRC lisp :results silent
  (defun count-in-range (point bots)
    (iter (for bot in bots)
          (count (in-range point bot))))

  (defun divide-box (box)
    (let ((new-r (floor (/ (nb-range box) 1.5))))
      (destructuring-bind (x y z) (nb-position box)
        (iter outer
              (for dx from -1 to 1)
              (iter (for dy from -1 to 1)
                    (iter (for dz from -1 to 1)
                          (in outer
                              (collect (make-nanobot
                                        :position (list (+ x (* dx new-r))
                                                        (+ y (* dy new-r))
                                                        (+ z (* dz new-r)))
                                        :range new-r)))))))))

  (defun box-priority (box bots)
    (list 
     (max (iter (for bot in bots)
                (count (in-range (nb-position bot) box)))
          (count-in-range (nb-position box) bots))
     (manhattan-distance (nb-position box) '(0 0 0))))
  (defun bounding-cube (bot)
    (let ((width (expt 2 (1+ (ceiling (log (nb-range bot) 2))))))
          (make-nanobot :position (nb-position bot) :range width)))

  (defun priority-compare (p1 p2)
    (or (> (car p1) (car p2))
        (and (= (car p1) (car p2))
             (< (cadr p1) (cadr p2)))))

  (defun recursive-subdivision (bots)
    (let ((queue (make-instance 'cl-heap:priority-queue :sort-fun #'priority-compare))
          (potentials (make-instance 'cl-heap:priority-queue :sort-fun #'priority-compare))
          (distance 0)
          (best-count (count-in-range '(0 0 0) bots)))
      ;; Initialize queues
      (iter (for bot in bots)
            (cl-heap:enqueue queue (bounding-cube bot) (box-priority (bounding-cube bot) bots)))
      (cl-heap:enqueue potentials '(0 0 0) (list best-count distance))
      (iter (until (= 0 (cl-heap:queue-size queue)))
            (for box = (cl-heap:dequeue queue))
            (for best = (cl-heap:peep-at-queue potentials))
            (for i from 0)
            (when (= 0 (mod i 100000)) (print i))
            (let* ((c (nb-position box))
                   (d (manhattan-distance c '(0 0 0)))
                   (r (nb-range box))
                   (count (count-in-range c bots)))
              (when (and (<= r 32)
                         (or (> count best-count)
                             (and (= count best-count)
                                  (< d distance))))
                (setf distance d)
                (setf best-count (count-in-range c bots))
                (format t "~a ~a ~a~%" c (count-in-range c bots) d)
                (cl-heap:enqueue potentials c (box-priority box bots))
                (when (= 0 r)
                  (next-iteration)))
              (when (= 0 r)
                (next-iteration)))
            (iter (for region in (divide-box box))
                  (cl-heap:enqueue queue region (box-priority region bots))))
      (iter (until (= 0 (cl-heap:queue-size potentials)))
            (for p = (cl-heap:dequeue potentials))
            (format t "~a ~a ~a~%" p (manhattan-distance p '(0 0 0)) (count-in-range p bots)))
      distance))
#+END_SRC

An idea I had (code improved based on something I saw on Reddit) was
to pretend that everything could be viewed as being along the same
line away from the origin. Get the nearest and furthest points and
sort by their distance as we move away from the origin. The
improvement from Reddit is that we can track entering/exiting by +/- 1
adding it to the present count. +1 means we've entered that space, -1
means we've left it.

This happens to produce the correct answer:
#+NAME: broken-but-works
#+BEGIN_SRC lisp :results silent
  (defun broken-but-works (bots)
    (let ((queue (make-instance 'cl-heap:priority-queue))
          (count 0))
      (iter (for bot in bots)
            (cl-heap:enqueue queue
                             (list (+ (manhattan-distance (nb-position bot) '(0 0 0)) (nb-range bot)) -1)
                             (+ (manhattan-distance (nb-position bot) '(0 0 0)) (nb-range bot)))
            (cl-heap:enqueue queue
                             (list (max 0 (- (manhattan-distance (nb-position bot) '(0 0 0)) (nb-range bot))) +1)
                             (max 0 (- (manhattan-distance (nb-position bot) '(0 0 0)) (nb-range bot)))))
      (iter (until (= 0 (cl-heap:queue-size queue)))
            (for (d e) = (cl-heap:dequeue queue))
            (incf count e)
            (finding d maximizing count))))
#+END_SRC

That it did was probably lucky, in general this shouldn't work. A
quick example assuming a line (rather than volume) to search across:

#+BEGIN_EXAMPLE
   0987654321012345667890
  <-----------0----------->
          (+)
              (--+--)
                  (+)
#+END_EXAMPLE

The *actual* maximum is at +5, but using the algorithm above +2 will
be returned because the left side was folded onto the right.

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 23 B: ~a~%" (broken-but-works *input*)))
p#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<nanobot>>
  <<parse-line>>
  <<read-input>>
  <<manhattan-distance>>
  <<strongest-nanobot>>
  <<bounding-box>>
  <<broken-but-works>>
  <<in-range>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2018.23.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 23 A: 383
: Problem 23 B: 100474026
** Test Cases
#+BEGIN_EXAMPLE
  pos=<10,12,12>, r=2
  pos=<12,14,12>, r=2
  pos=<16,12,12>, r=4
  pos=<14,14,14>, r=6
  pos=<50,50,50>, r=200
  pos=<10,10,10>, r=5
#+END_EXAMPLE
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2018.23)
  (in-suite aoc.2018.23)
  (defparameter *test-bots* (mapcar #'parse-line '("pos=<10,12,12>, r=2"
                                                   "pos=<12,14,12>, r=2"
                                                   "pos=<16,12,12>, r=4"
                                                   "pos=<14,14,14>, r=6"
                                                   "pos=<50,50,50>, r=200"
                                                   "pos=<10,10,10>, r=5")))
  (defparameter *test-bots-02* (mapcar #'parse-line '("pos=<1,1,1>, r=1"
                                                      "pos=<1000,1000,1000>, r=9999"
                                                      "pos=<101,100,100>, r=1"
                                                      "pos=<100,101,100>, r=1"
                                                      "pos=<100,100,101>, r=1")))
  (defparameter *test-bots-03* (mapcar #'parse-line '("pos=<1,1,1>, r=1"
                                                      "pos=<1000,1000,1000>, r=7"
                                                      "pos=<101,100,109>, r=1"
                                                      "pos=<100,101,103>, r=1"
                                                      "pos=<100,100,101>, r=1")))
  (run! 'aoc.2018.23)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2018.23
:  Didn't run anything...huh?
** Thoughts
