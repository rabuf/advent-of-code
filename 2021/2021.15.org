#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 15
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-15)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :priority-queue)
    (ql:quickload "priority-queue"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-15
    (:use :common-lisp
          :parseq
          :priority-queue
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-15)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun parse-line (line row risks)
    (loop
       for c across line
       for column from 0
       for coord = (complex column row)
       do (setf (gethash coord risks) (- (char-code c) (char-code #\0)))))
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         for row from 0
         with risks = (make-hash-table)
         for width = (length line)
         finally (return (list risks (list row (1- width))))
         do (parse-line line row risks))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/15.txt"))
  (defparameter *test-input*
    (read-input "test/15.txt"))
#+END_SRC
** Part 1
Shortest path on a weighted map (risks).
#+NAME: risk-map
#+BEGIN_SRC lisp :results silent
  (defun lowest-risk (risks x y)
    "Find the lowest risk path through RISKS starting from (0,0) going
  to (X,Y)"
    (loop
       with fringe = (make-pqueue #'<)
       with costs = (make-hash-table)
       with default = (* (1+ x) (1+ y) 9)
       initially
         (pqueue-push 0 0 fringe)
         (setf (gethash #C(0 0) costs) 0)
       finally (return (gethash (complex x y) costs))
       until (pqueue-empty-p fringe)
       for pos = (pqueue-pop fringe)
       for pcost = (gethash pos costs)
       do (loop
             for offset in '(#C(-1 0) #C(1 0) #C(0 1) #C(0 -1))
             for current = (+ pos offset)
             for (risk present?) = (multiple-value-list (gethash current risks))
             for cost = (gethash current costs default)
             if present?
             do (when (< (+ pcost risk) cost)
                  (setf (gethash current costs) (+ pcost risk))
                  (pqueue-push current (+ pcost risk) fringe)))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 15 A: ~a~%" (lowest-risk (first *input*) (first (second *input*)) (second (second *input*)))))
#+END_SRC
** Part 2
Now we have to expand the map and then use the same program from above
to find the shortest path.
#+NAME: expand-map
#+BEGIN_SRC lisp :results silent
  (defun risk-clamp (risk)
    (if (< risk 10) risk
        (mod risk 9)))
  (defun expand-map (map x y)
    (loop
       with new-map = (make-hash-table)
       with +x = (1+ x)
       with +y = (1+ y)
       for row from 0 to y
       do (loop
             for column from 0 to x
             for pos = (complex column row)
             do
               (loop
                  for i from 0 to 4
                  for column-risk = (risk-clamp (+ i (gethash pos map)))
                  for new-x = (+ column (* i +x))
                  do
                    (setf (gethash (complex new-x row) new-map) column-risk)
                    (loop
                       for j from 1 to 4
                       for row-risk = (risk-clamp (+ j column-risk))
                       for new-y = (+ row (* j +y))
                       do (setf (gethash (complex new-x new-y) new-map) row-risk))))
       finally (return new-map)))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 15 B: ~a~%" (lowest-risk (expand-map (first *input*) 99 99) 499 499)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<risk-map>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 15 A: 717
: Problem 15 B: 2993
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.15)
  (in-suite aoc.2021.15)

  (run! 'aoc.2021.15)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day15.adb
  with AOC2021.Day15;
  procedure Day15 is
  begin
    AOC2021.Day15.Run;
  end Day15;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day15.ads
  package AOC2021.Day15 is
     procedure Run;
  end AOC2021.Day15;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day15.adb :noweb yes
  <<ada-packages>>
  package body AOC2021.Day15 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2021 - Day 15");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2021.Day15;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day15
  ./day15
#+END_SRC

#+RESULTS:
