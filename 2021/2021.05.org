#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 05
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-05)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
  (unless (find-package :zpng)
    (ql:quickload "zpng"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-05
    (:use :common-lisp
          :parseq
          :zpng
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-05)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         collect (mapcar #'parse-integer (cl-ppcre:all-matches-as-strings "(\\d+)" line)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/05.txt"))
#+END_SRC
** Part 1
Each row represents a line segment with two pairs of coordinates
describing an endpoint. The question is how many points are shared by
at least two lines, only considering the horizontal and vertical lines
(either x's are the same or y's).

As is convention, I'll use complex numbers for the points.
#+NAME: to-grid
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun pairs-to-grid (pairs)
    (loop for (x0 y0 x1 y1) in pairs
       with grid = (make-hash-table)
       when (= x0 x1)
       do (loop for i from (min y0 y1) to (max y0 y1)
             do (incf (gethash (complex x0 i) grid 0)))
       when (= y0 y1)
       do (loop for i from (min x0 x1) to (max x0 x1)
             do (incf (gethash (complex i y0) grid 0)))
       finally (return grid)))
  (defun count-overlapping (grid)
    (loop for v being the hash-values of grid
         count (> v 1)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 05 A: ~a~%" (count-overlapping (pairs-to-grid *input*))))
#+END_SRC
** Part 2
Now we have to include the diagonal lines, same problem in the end.
#+NAME: to-grid-with-diagonals
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun pairs-to-grid-all (pairs)
    (loop for (x0 y0 x1 y1) in pairs
       with grid = (make-hash-table)
       when (= x0 x1)
       do (loop for i from (min y0 y1) to (max y0 y1)
             do (incf (gethash (complex x0 i) grid 0)))
       when (= y0 y1)
       do (loop for i from (min x0 x1) to (max x0 x1)
             do (incf (gethash (complex i y0) grid 0)))
       when (and (/= x0 x1) (/= y0 y1))
       do (loop
             with dir = (if (= x0 (min x0 x1)) (signum (- y1 y0)) (signum (- y0 y1)))
             with start-y = (if (= x0 (min x0 x1)) y0 y1)
             for i from (min x0 x1) to (max x0 x1)
             for offset = (* dir (- i (min x0 x1)))
             do (incf (gethash (complex i (+ start-y offset)) grid 0)))
       finally (return grid)))
  (defun print-grid (grid)
    (let (min-x min-y max-x max-y)
      (maphash #'(lambda (k v) (declare (ignore v))
                   (unless min-x (setf min-x (realpart k)))
                   (unless min-y (setf min-y (imagpart k)))
                   (unless max-x (setf max-x (realpart k)))
                   (unless max-y (setf max-y (imagpart k)))
                   (setf min-x (min min-x (realpart k)))
                   (setf max-x (max max-x (realpart k)))
                   (setf min-y (min min-y (imagpart k)))
                   (setf max-y (max max-y (imagpart k))))
               grid)
      (loop for i from min-y to max-y
       do (loop for j from min-x to max-x
             do (format t "~A" (gethash (complex j i) grid #\.)))
         (terpri))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 05 B: ~a~%" (count-overlapping (pairs-to-grid-all *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 05 A: 4728
: Problem 05 B: 17717
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.05)
  (in-suite aoc.2021.05)
  (defparameter *test-input*
    (read-input "test/05.txt"))
  (test both-parts
    (is (= 5 (count-overlapping (pairs-to-grid *test-input*))))
    (is (= 12 (count-overlapping (pairs-to-grid-all *test-input*)))))
  (run! 'aoc.2021.05)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2021.05
:  Running test BOTH-PARTS ..
:  Did 2 checks.
:     Pass: 2 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Visualization
I haven't done one of these before so this is a for-fun thing.
#+BEGIN_SRC lisp :results silent :noweb yes
  (defun overlap-to-color (overlap max-overlap)
    (floor (* 255 (/ overlap max-overlap))))
  (defun grid-to-png (grid filename)
    (let (min-x min-y max-x max-y max-overlap)
      ;; get bounds for image
      (maphash #'(lambda (k v)
                   (unless min-x (setf min-x (realpart k)))
                   (unless min-y (setf min-y (imagpart k)))
                   (unless max-x (setf max-x (realpart k)))
                   (unless max-y (setf max-y (imagpart k)))
                   (unless max-overlap (setf max-overlap v))
                   (setf max-overlap (max max-overlap v))
                   (setf min-x (min min-x (realpart k)))
                   (setf max-x (max max-x (realpart k)))
                   (setf min-y (min min-y (imagpart k)))
                   (setf max-y (max max-y (imagpart k))))
               grid)
      (let* ((png (make-instance 'png
                                 :color-type :grayscale
                                 :width (+ 20 (- max-x min-x))
                                 :height (+ 20 (- max-y min-y))))
             (image (data-array png)))
        (loop
           for y from min-y to max-y
           finally (write-png png filename)
           do (loop
                 for x from min-x to max-x
                 for color = (gethash (complex x y) grid 0)
                 do (setf (aref image (+ (- y min-y) 10) (+ (- x min-x) 10) 0) (overlap-to-color color max-overlap)))))))
#+END_SRC
[[./diagonal.png]]

I could play around more with the coloring but I think that's enough for one night.
** Thoughts

** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day05.adb
  with AOC2021.Day05;
  procedure Day05 is
  begin
    AOC2021.Day05.Run;
  end Day05;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day05.ads
  package AOC2021.Day05 is
     procedure Run;
  end AOC2021.Day05;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day05.adb
  <<ada-packages>>
  package body AOC2021.Day05 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2021 - Day 05");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2021.Day05;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day05
  ./day05
#+END_SRC

#+RESULTS:
