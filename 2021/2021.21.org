#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 21
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-21)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
  (unless (find-package :alexandria)
    (ql:quickload "alexandria"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-21
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-21)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         collect (mapcar #'parse-integer (cl-ppcre:all-matches-as-strings "\\d+" line)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/21.txt"))
#+END_SRC
** Part 1
A board game with a deterministic die. Have to simulate both players
at once, the game ends when one player reaches 1000 or more.
#+NAME: deterministic-dice
#+BEGIN_SRC lisp :results silent
  (defun deterministic-dice (player-1 player-2)
    (let ((deterministic (alexandria:iota 100 :start 1))
          (board (alexandria:iota 10 :start 1)))
      (setf (cdr (last deterministic)) deterministic)
      (setf (cdr (last board)) board)
      (loop
         with score = (make-array 2 :initial-element 0)
         with positions = (make-array 2 :initial-contents (list (nthcdr (1- player-1) board)
                                                                (nthcdr (1- player-2) board)))
         for die-count from 0 by 3
         for die on deterministic by #'cdddr
         for turn = 0 then (mod (1+ turn) 2)
         for roll = (reduce #'+ (subseq die 0 3))
         while (and (< (aref score 0) 1000)
                    (< (aref score 1) 1000))
         finally (return (* (min (aref score 0) (aref score 1))
                            die-count))
         do
           (setf (aref positions turn) (nthcdr roll (aref positions turn)))
           (incf (aref score turn) (car (aref positions turn))))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 21 A: ~a~%" (deterministic-dice 3 7)))
#+END_SRC
** Part 2
The above was a misdirect, playing with actual Dirac Dice, the
universe splits on every die roll. The target score is now 21. On each
die roll we have to evaluate all 3 possible outcomes and determine how
many times the winningest player wins across all universes.

I'm dumb, forgot they roll the dice three times. For a 3d3 here are
the possible result:

| n | times |
| 3 |     1 |
| 4 |     3 |
| 5 |     6 |
| 6 |     7 |
| 7 |     6 |
| 8 |     3 |
| 9 |     1 |

#+NAME: dirac-dice
#+BEGIN_SRC lisp :results silent
  (defun move (position roll)
    (if (< 10 (+ roll position))
        (- (+ roll position) 10)
        (+ roll position)))
  (defun dirac-dice (p1 p2 &optional (target 21))
    (let ((die '(3 4 5 6 7 8 9))
          (odds '(1 3 6 7 6 3 1)))
      (labels ((player-1 (p1 p2 s1 s2)
                 (cond ((<= target s1)
                        (return-from player-1 '(1 0)))
                       ((<= target s2)
                        (return-from player-1 '(0 1))))
                 (loop
                    for roll in die
                    for times in odds
                    for move = (move p1 roll)
                    for (w1 w2) = (player-2 move p2 (+ move s1) s2)
                    summing (* w1 times) into wins-1
                    summing (* w2 times) into wins-2
                    finally (return (list wins-1 wins-2))))
               (player-2 (p1 p2 s1 s2)
                 (cond ((<= target s1)
                        (return-from player-2 '(1 0)))
                       ((<= target s2)
                        (return-from player-2 '(0 1))))
                 (loop
                    for roll in die
                    for times in odds
                    for move = (move p2 roll)
                    for (w1 w2) = (player-1 p1 move s1 (+ move s2))
                    summing (* w1 times) into wins-1
                    summing (* w2 times) into wins-2
                    finally (return (list wins-1 wins-2)))))
        (player-1 p1 p2 0 0))))

  (defun dirac-dice-memo (p1 p2 &optional (target 21))
    (let ((die '(3 4 5 6 7 8 9))
          (odds '(1 3 6 7 6 3 1))
          (cache (make-hash-table :test #'equal)))
      (labels ((recur (p1 p2 s1 s2)
                 (cond ((gethash (list p1 p2 s1 s2) cache)
                        (gethash (list p1 p2 s1 s2) cache))
                       ((<= target s1)
                        '(1 0))
                       ((<= target s2)
                        '(0 1))
                       (t
                        (loop
                           for roll in die
                           for times in odds
                           for move = (move p1 roll)
                           for (w2 w1) = (recur p2 move s2 (+ move s1))
                           summing (* w1 times) into wins-1
                           summing (* w2 times) into wins-2
                           finally
                             (setf (gethash (list p1 p2 s1 s2) cache) (list wins-1 wins-2))
                             (return (list wins-1 wins-2)))))))
        (recur p1 p2 0 0))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 21 B: ~a~%" (apply #'max (dirac-dice-memo 3 7 21))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<deterministic-dice>>
  <<dirac-dice>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 21 A: 1006866
: Problem 21 B: 273042027784929
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.21)
  (in-suite aoc.2021.21)

  (run! 'aoc.2021.21)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day21.adb
  with AOC2021.Day21;
  procedure Day21 is
  begin
    AOC2021.Day21.Run;
  end Day21;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day21.ads
  package AOC2021.Day21 is
     procedure Run;
  end AOC2021.Day21;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day21.adb :noweb yes
  <<ada-packages>>
  package body AOC2021.Day21 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2021 - Day 21");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2021.Day21;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day21
  ./day21
#+END_SRC

#+RESULTS:
