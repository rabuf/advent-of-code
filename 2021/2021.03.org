#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 03
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-03)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-03
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-03)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         collect (parse-integer line :radix 2))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/03.txt"))
#+END_SRC
** Part 1
#+NAME: power-consumption
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun bit-is-one-p (n bit) (ldb-test (byte 1 bit) n))
  (defun count-ones-at (numbers power)
    (loop for n in numbers
         count (bit-is-one-p n power)))
  (defun count-zeroes-at (numbers power)
    (loop for n in numbers
         count (not (bit-is-one-p n power))))
  (defun epsilon (numbers &optional (digits 12))
    (loop
       for power from (1- digits) downto 0
       with result = 0
       for ones = (count-ones-at numbers power)
       for zereos = (count-zeroes-at numbers power)
       finally (return result)
       do (setf result (ash result 1))
       if (<= (count-ones-at numbers power)
             (count-zeroes-at numbers power))
       do (incf result)))
  (defun gamma (numbers &optional (digits 12))
    (loop
       for power from (1- digits) downto 0
       with result = 0
       finally (return result)
       do (setf result (ash result 1))
       if (<= (count-zeroes-at numbers power)
             (count-ones-at numbers power))
       do (incf result)))
  (defun power-consumption (numbers &optional (digits 12))
    (let* ((gamma (gamma numbers digits))
           (epsilon (epsilon numbers digits)))
      (* gamma epsilon)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 03 A: ~a~%" (power-consumption *input*)))
#+END_SRC
** Part 2
#+NAME: life-support
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun oxygen (numbers &optional (digits 12))
    (loop
       with numbers = (copy-seq numbers)
       while (< 1 (length numbers))
       for power from (1- digits) downto 0
       for ones = (count-ones-at numbers power)
       for zeroes = (count-zeroes-at numbers power)
       do (cond ((<= zeroes ones)
                 (setf numbers (delete-if-not (lambda (n)
                                                (bit-is-one-p n power))
                                              numbers)))
                (t
                 (setf numbers (delete-if (lambda (n)
                                            (bit-is-one-p n power))
                                          numbers))))
       finally (return (car numbers))))
  (defun co2 (numbers &optional (digits 12))
    (loop
       with numbers = (copy-seq numbers)
       while (< 1 (length numbers))
       for power from (1- digits) downto 0
       for ones = (count-ones-at numbers power)
       for zeroes = (count-zeroes-at numbers power)
       do (cond ((< ones zeroes)
                 (setf numbers (delete-if-not (lambda (n)
                                                (bit-is-one-p n power))
                                              numbers)))
                (t
                 (setf numbers (delete-if (lambda (n)
                                            (bit-is-one-p n power))
                                          numbers))))
       finally (return (car numbers))))

  (defun life-support (numbers &optional (digits 12))
    (let ((co2 (co2 numbers digits))
          (oxygen (oxygen numbers digits)))
      (* co2 oxygen)))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 03 B: ~a~%" (life-support *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<power-consumption>>
  <<life-support>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 03 A: 1997414
: Problem 03 B: 1032597
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.03)
  (in-suite aoc.2021.03)
  (defparameter *test-input* '(#2r00100 #2r11110 #2r10110 #2r10111
                               #2r10101 #2r01111 #2r00111 #2r11100 #2r10000 #2r11001 #2r00010
                               #2r01010))

  (test gamma
    (is (= 22 (gamma *test-input* 5)))
    (is (= 3529 (gamma *input*))))
  (test epsilon
    (is (= 9 (epsilon *test-input* 5)))
    (is (= 566 (epsilon *input*))))
  (test power-consumption
    (is (= 198 (power-consumption *test-input* 5)))
    (is (= 1997414 (power-consumption *input*))))

  (test oxygen
    (is (= 23 (oxygen *test-input* 5)))
    (is (= 3573 (oxygen *input*))))
  (test co2
    (is (= 10 (co2 *test-input* 5)))
    (is (= 289 (co2 *input*))))
  (test life-support
    (is (= 230 (life-support *test-input* 5)))
    (is (= 1032597 (life-support *input*))))
  (run! 'aoc.2021.03)
#+END_SRC
** Test Results
#+RESULTS: test-cases
#+begin_example

Running test suite AOC.2021.03
 Running test GAMMA ..
 Running test EPSILON ..
 Running test POWER-CONSUMPTION ..
 Running test OXYGEN ..
 Running test CO2 ..
 Running test LIFE-SUPPORT ..
 Did 12 checks.
    Pass: 12 (100%)
    Skip: 0 ( 0%)
    Fail: 0 ( 0%)
#+end_example
** Thoughts
I'm not proud of that Lisp version, but it works so it's time to move
on. Two more versions to create to reach my goal.
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day03.adb
  with AOC2021.Day03;
  procedure Day03 is
  begin
    AOC2021.Day03.Run;
  end Day03;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day03.ads
  package AOC2021.Day03 is
     procedure Run;
  end AOC2021.Day03;
#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day03.adb
  with Text_IO; use Text_IO;
  with Ada.Containers.Vectors;
  package body AOC2021.Day03 is
     subtype Binary_Digits is Character range '0'..'1';
     type Diagnostic_Code is mod 2**12;
     package Diagnostic_Code_Vectors is new Ada.Containers.Vectors
       (Element_Type => Diagnostic_Code,
        Index_Type => Natural);
     use Diagnostic_Code_Vectors;
     procedure Read_File(Filename : String; Codes : out Vector) is

     begin
        declare
           subtype Line_T is String (1..12);
           Input_File : File_Type;
           Line : Line_T;
           Code : Diagnostic_Code;
        begin
           Open (Input_File, In_File, Filename);
           while not End_Of_File(Input_File) loop
              Code := 0;
              Get(Input_File, Line);
              Skip_Line(Input_File);
              for C of Line loop
                 Code := Code * 2 + (if C = '1' then 1 else 0);
              end loop;
              Codes.Append(Code);
           end loop;
           Close (Input_File);
        end;
     end Read_File;

     function Gamma (Codes : Vector) return Diagnostic_Code is
        Tally : array (Boolean, 0..11) of Natural := (others => (others => 0));
        Result : Diagnostic_Code := 0;
        Test : Boolean;
     begin
        for Code of Codes loop
           for I in 0..11 loop
              Test := (2 ** I and Code) = 0;
              Tally(Test, I) := Tally(Test, I) + 1;
           end loop;
        end loop;
        for I in reverse 0..11 loop
           Result := Result * 2;
           case Tally(True, I) <= Tally(False, I) is
              when True => Result := Result + 1;
              when False => null;
           end case;
        end loop;
        return Result;
     end Gamma;

     function Power_Consumption (Codes : Vector) return Integer is
        G : Diagnostic_Code := Gamma (Codes);
        E : Diagnostic_Code := not G;
     begin
        return Integer(G) * Integer(E);
     end Power_Consumption;

     function Life_Support (Codes : Vector) return Integer is
        CO2 : Vector := Codes;
        O2  : Vector := Codes;
        GC, GO : Diagnostic_Code;
        EC, EO : Diagnostic_Code;
        Next : Vector;
     begin
        for I in reverse 0..11 loop
           GC := Gamma (CO2);
           EC := not GC;
           GO := Gamma (O2);
           EO := not GO;
           Next.Clear;
           if 1 <= CO2.Last_Index then
              for Code of CO2 loop
                 if (2 ** I and EC) = (2 ** I and Code) then
                    Next.Append(Code);
                 end if;
              end loop;
              CO2 := Next;
              Next.Clear;
           end if;
           if 1 <= O2.Last_Index then
              for Code of O2 loop
                 if (2 ** I and GO) = (2 ** I and Code) then
                    Next.Append(Code);
                 end if;
              end loop;
              O2 := Next;
           end if;
        end loop;
        return Integer(CO2.First_Element) * Integer(O2.First_Element);
     end Life_Support;
     procedure Run is
        Codes : Vector;
     begin
        Read_File("../input/03.txt", Codes);
        Put_Line("Advent of Code 2021 - Day 03");
        Put_Line("The result for Part 1 is " & Integer'Image(Power_Consumption (Codes)));
        Put_Line("The result for Part 2 is " & Integer'Image(Life_Support (Codes)));
     end Run;
  end AOC2021.Day03;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day03
  ./day03
#+END_SRC

#+RESULTS:
: Advent of Code 2021 - Day 03
: The result for Part 1 is  1997414
: The result for Part 2 is  1032597
