#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 03
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-03)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-03
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-03)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         collect (parse-integer line :radix 2))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/03.txt"))
#+END_SRC
** Part 1
#+NAME: power-consumption
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun count-ones-at (numbers power)
    (loop for n in numbers
         count (plusp (boole boole-and (expt 2 power) n))))
  (defun count-zeroes-at (numbers power)
    (- (length numbers) (count-ones-at numbers power)))
  (defun epsilon (numbers &optional (digits 12))
    (loop
       for power from (1- digits) downto 0
       with result = 0
       finally (return result)
       do (setf result (ash result 1))
       if (<= (count-ones-at numbers power)
             (count-zeroes-at numbers power))
       do (incf result)))
  (defun gamma (numbers &optional (digits 12))
    (loop
       for power from (1- digits) downto 0
       with result = 0
       finally (return result)
       do (setf result (ash result 1))
       if (<= (count-zeroes-at numbers power)
             (count-ones-at numbers power))
       do (incf result)))
  (defun power-consumption (numbers &optional (digits 12))
    (let* ((gamma (gamma numbers digits))
           (epsilon (epsilon numbers digits))) ; boole boole-xor (1- (expt 2 12)) gamma)))
      (* gamma epsilon)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 03 A: ~a~%" (power-consumption *input*)))
#+END_SRC
** Part 2
#+NAME: life-support
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun oxygen (numbers &optional (digits 12))
    (loop
       with numbers = (copy-seq numbers)
       while (< 1 (length numbers))
       for power from (1- digits) downto 0
       for ones = (count-ones-at numbers power)
       for zeroes = (count-zeroes-at numbers power)
       do (cond ((<= zeroes ones)
                 (setf numbers (remove-if-not (lambda (n)
                                                (plusp (boole boole-and (expt 2 power) n)))
                                              numbers)))
                (t
                 (setf numbers (remove-if (lambda (n)
                                            (plusp (boole boole-and (expt 2 power) n)))
                                          numbers))))
       finally (return (car numbers))))
  (defun co2 (numbers &optional (digits 12))
    (loop
       with numbers = (copy-seq numbers)
       while (< 1 (length numbers))
       for power from (1- digits) downto 0
       for ones = (count-ones-at numbers power)
       for zeroes = (count-zeroes-at numbers power)
       do (cond ((< ones zeroes)
                 (setf numbers (remove-if-not (lambda (n)
                                                (plusp (boole boole-and (expt 2 power) n)))
                                              numbers)))
                (t
                 (setf numbers (remove-if (lambda (n)
                                            (plusp (boole boole-and (expt 2 power) n)))
                                          numbers))))
       finally (return (car numbers))))

  (defun life-support (numbers &optional (digits 12))
    (let ((co2 (co2 numbers digits))
          (oxygen (oxygen numbers digits)))
      (* co2 oxygen)))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 03 B: ~a~%" (life-support *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<power-consumption>>
  <<life-support>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 03 A: 1997414
: Problem 03 B: 1032597
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.03)
  (in-suite aoc.2021.03)
  (defparameter *test-input* '(#2r00100 #2r11110 #2r10110 #2r10111
                               #2r10101 #2r01111 #2r00111 #2r11100 #2r10000 #2r11001 #2r00010
                               #2r01010))

  (test gamma
    (is (= 22 (gamma *test-input* 5)))
    (is (= 3529 (gamma *input*))))
  (test epsilon
    (is (= 9 (epsilon *test-input* 5)))
    (is (= 566 (epsilon *input*))))
  (test power-consumption
    (is (= 198 (power-consumption *test-input* 5)))
    (is (= 1997414 (power-consumption *input*))))

  (test oxygen
    (is (= 23 (oxygen *test-input* 5)))
    (is (= 3573 (oxygen *input*))))
  (test co2
    (is (= 10 (co2 *test-input* 5)))
    (is (= 289 (co2 *input*))))
  (test life-support
    (is (= 230 (life-support *test-input* 5)))
    (is (= 1032597 (life-support *input*))))
  (run! 'aoc.2021.03)
#+END_SRC
** Test Results
#+RESULTS: test-cases
#+begin_example

Running test suite AOC.2021.03
 Running test GAMMA ..
 Running test EPSILON ..
 Running test POWER-CONSUMPTION ..
 Running test OXYGEN ..
 Running test CO2 ..
 Running test LIFE-SUPPORT ..
 Did 12 checks.
    Pass: 12 (100%)
    Skip: 0 ( 0%)
    Fail: 0 ( 0%)
#+end_example
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day03.adb
  with AOC2021.Day03;
  procedure Day03 is
  begin
    AOC2021.Day03.Run;
  end Day03;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day03.ads
  package AOC2021.Day03 is
     procedure Run;
  end AOC2021.Day03;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day03.adb
  <<ada-packages>>
  package body AOC2021.Day03 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2021 - Day 03");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2021.Day03;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day03
  ./day03
#+END_SRC

#+RESULTS:
