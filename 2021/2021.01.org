#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 01
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-01)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-01
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-01)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         collect (parse-integer line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/01.txt"))
#+END_SRC
** Part 1
Count the number of times (excluding the first value) that the next
number is bigger than the previous.
#+NAME: solve-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun increase-count (list)
    (loop
       for curr = (car list) then item
       for item in (cdr list)
       count (< curr item)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 01 A: ~a~%" (increase-count *input*)))
#+END_SRC
** Part 2
Now calculate a rolling sum (3 items) and then determine how many
increase (using previous function).
#+NAME: solve-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun rolling-sum (list)
    (loop for s = list then (cdr s)
         while (<= 3 (length s))
         collect (+ (car s) (cadr s) (caddr s))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 01 B: ~a~%" (increase-count (rolling-sum *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<solve-a>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 01 A: 1342
: Problem 01 B: 1378
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.01)
  (in-suite aoc.2021.01)

  (run! 'aoc.2021.01)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
I could've done the first part more cleanly using map and count:
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun cleaner-count (list)
    (count t (mapcar #'< list (cdr list))))
#+END_SRC
And for the second I could have used map again to generate the sums:
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun cleaner-sum (list)
    (mapcar #'+ list (cdr list) (cddr list)))
#+END_SRC
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day01.adb
  with AOC2021.Day01;
  procedure Day01 is
  begin
    AOC2021.Day01.Run;
  end Day01;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day01.ads
  package AOC2021.Day01 is
     procedure Run;
  end AOC2021.Day01;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day01.adb
  <<ada-packages>>
  package body AOC2021.Day01 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2021 - Day 01");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2021.Day01;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day01
  ./day01
#+END_SRC

#+RESULTS:
