#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 06
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-06)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-06
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-06)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (mapcar #'parse-integer (cl-ppcre:all-matches-as-strings "(\\d+)" (read-line in)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/06.txt"))
#+END_SRC
** Part 1
#+NAME: simulator
#+BEGIN_SRC lisp :results silent
  (defun simulator (current-generation generations)
    (let ((fish (make-array 9 :initial-element 0)))
      (loop
         for f in current-generation
         do (incf (aref fish f)))
      (loop
         repeat generations
         do (psetf (subseq fish 0 8) (subseq fish 1 9)
                   (aref fish 8) (aref fish 0))
           (incf (aref fish 6) (aref fish 8)))
      (reduce #'+ fish)))
  ;; circular-simulator is the fastest version I've made.
  (defun circular-simulator (current-generation generations)
    (let ((fish (make-list 9 :initial-element 0)))
      (loop
         for f in current-generation
           do (incf (nth f fish)))
      (setf (cdr (last fish)) fish)
      (loop
         repeat generations
         for mid  = (nthcdr 7 fish) then (cdr mid)
         for head = fish then (cdr head)
         do (incf (car mid) (car head)))
      (reduce #'+ (subseq fish 0 9))))
  (defun modular-simulator (current-generation generations)
    (let ((fish (make-array 9 :initial-element 0)))
      (loop
         for f in current-generation
         do (incf (aref fish f)))
        (loop
           repeat generations
           for mid  = 7 then (mod (1+ mid) 9)
           for tail = 0 then (mod (1+ tail) 9)
           do (incf (aref fish mid) (aref fish tail)))
        (reduce #'+ fish)))
#+END_SRC

#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 06 A: ~a~%" (simulator *input* 80)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 06 B: ~a~%" (simulator *input* 256)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<simulator>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 06 A: 366057
: Problem 06 B: 1653559299811
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.06)
  (in-suite aoc.2021.06)
  (defparameter *test-input* '(3 4 3 1 2))
  (test simulator
    (is (= 26 (simulator *test-input* 18)))
    (is (= 5934 (simulator *test-input* 80)))
    (is (= 26984457539 (simulator *test-input* 256))))
  (test circular-simulator
    (is (= 26 (circular-simulator *test-input* 18)))
    (is (= 5934 (circular-simulator *test-input* 80)))
    (is (= 26984457539 (circular-simulator *test-input* 256))))
  (test modular-simulator
    (is (= 26 (modular-simulator *test-input* 18)))
    (is (= 5934 (modular-simulator *test-input* 80)))
    (is (= 26984457539 (modular-simulator *test-input* 256))))
  (run! 'aoc.2021.06)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2021.06
:  Running test SIMULATOR ...
:  Running test CIRCULAR-SIMULATOR ...
:  Running test MODULAR-SIMULATOR ...
:  Did 9 checks.
:     Pass: 9 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day06.adb
  with AOC2021.Day06;
  procedure Day06 is
  begin
    AOC2021.Day06.Run;
  end Day06;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day06.ads
  package AOC2021.Day06 is
     procedure Run;
  end AOC2021.Day06;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with Text_IO; use Text_IO;
  with Ada.Strings.Fixed; use Ada.Strings.Fixed;
#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day06.adb :noweb yes
  <<ada-packages>>
  package body AOC2021.Day06 is
     type Fishes is array (0..8) of Long_Long_Integer
       with Default_Component_Value => 0;

     procedure Read_File (Filename: String; Fish: out Fishes) is
        Input_File : File_Type;
     begin
        Open (Input_File, In_File, Filename);
        declare
           Line : String := Get_Line (Input_File);
           Start : Natural := 1;
           Stop : Natural;
           F : Natural;
        begin
           Stop := Index (Line, ",", Start);
           while Stop /= 0 loop
              F := Integer'Value (Line (Start..Stop-1));
              Fish (F) := Fish (F) + 1;
              Start := Stop + 1;
              Stop := Index (Line, ",", Start);
           end loop;
           F :=  Integer'Value(Line (Start..Line'Length));
           Fish (F) := Fish (F) + 1;
        end;
        Close (Input_File);
     end Read_File;
     procedure Simulator (Fish: in out Fishes; Generations: Natural) is
        T : Fishes;
     begin
        for I in 1..Generations loop
           for G in 0..8 loop
              T(G) := Fish ((G + 1) mod 9);
           end loop;
           T(6) := T(6) + Fish(0);
           Fish := T;
        end loop;
     end Simulator;
     procedure Run is
        Fish : Fishes;
        N1 : Long_Long_Integer := 0;
        N2 : Long_Long_Integer := 0;
     begin
        Read_File("../input/06.txt", Fish);
        Simulator(Fish, 80);
        for F of Fish loop
           N1 := N1 + F;
        end loop;
        Simulator(Fish, 256-80);
        for F of Fish loop
           N2 := N2 + F;
        end loop;
        Put_Line("Advent of Code 2021 - Day 06");
        Put_Line("The result for Part 1 is " & Long_Long_Integer'Image(N1));
        Put_Line("The result for Part 2 is " & Long_Long_Integer'Image(N2));
     end Run;
  end AOC2021.Day06;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day06
  ./day06
#+END_SRC

#+RESULTS:
