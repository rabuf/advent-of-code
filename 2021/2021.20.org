#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 20
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-20)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-20
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-20)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (let ((enhance (read-line in nil))
            (image (make-hash-table)))
        (read-line in nil)
        (loop
           for line = (read-line in nil)
           for row from 0
           while line
           do (loop
                 for c across line
                 for col from 0
                 for pos = (complex col row)
                 when (char= c #\#)
                 do (setf (gethash pos image) 1)))
        (list enhance image))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/20.txt"))
  (defparameter *test-input*
    (read-input "test/20.txt"))
#+END_SRC
** Part 1
Image enhancement. Going over every pixel in the grid seleceting a 3x3
region, turning it into a 9-bit binary number, locate the enhanced
pixel in the enhancement "algorithm".

There's a problem. The first enhancement rule (0) lights up everything
outside the initial space. Of course, nearly all of them will also be
discarded after two iterations. Thinking out loud:

Can I ignore everything outside the initial bounds? Will they all be
discarded?

#+NAME: enhance-image
#+BEGIN_SRC lisp :results silent
  (defun bounds (image)
    (loop
       for k being the hash-key of image
       for (x y) = (list (realpart k) (imagpart k))
       maximize x into max-x
       minimize x into min-x
       maximize y into max-y
       minimize y into min-y
       finally (return (list max-x min-x max-y min-y))))

  (defun get-code (position image &optional (default 0))
    (loop
       for j from -1 to 1
       with result = 0
       do (loop
             for i from -1 to 1
             for pos = (+ position (complex i j))
             do
               (setf result (* 2 result))
               (incf result (gethash pos image default)))
       finally (return result)))

  (defun enhance (algorithm image)
    (let ((next (make-hash-table))
          (final (make-hash-table)))
      (destructuring-bind (max-x min-x max-y min-y) (bounds image)
        (loop
           for x from (- min-x 3) to (+ max-x 3)
           do (loop
                 for y from (- min-y 3) to (+ max-y 3)
                 for pos = (complex x y)
                 for code = (get-code pos image)
                 if (char= (char algorithm code) #\#)
                 do (setf (gethash pos next) 1)))
        (loop
           for x from (- min-x 2) to (+ max-x 2)
           do (loop
                 for y from (- min-y 2) to (+ max-y 2)
                 for pos = (complex x y)
                 for code = (get-code pos next)
                 if (char= (char algorithm code) #\#)
                 do (setf (gethash pos final) 1)))
        final)))

  (defun enhance-n-times (algorithm image n)
    (if (oddp n) (error "N must be even"))
    (loop
       repeat (/ n 2)
       for next = (enhance algorithm image) then (enhance algorithm next)
       finally (return (values (hash-table-count next) next))))

  (defun print-image (image)
    (loop
       with (max-x min-x max-y min-y) = (bounds image)
       for y from min-y to max-y
       do (loop for x from min-x to max-x
             for pos = (complex x y)
             do (format t "~[.~;#~]" (gethash pos image 0)))
         (terpri)))

#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 20 A: ~a~%" (enhance-n-times (first *input*) (second *input*) 2)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 20 B: ~a~%" (enhance-n-times (first *input*) (second *input*) 50)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<enhance-image>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 20 A: 5179
: Problem 20 B: 16112
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.20)
  (in-suite aoc.2021.20)

  (run! 'aoc.2021.20)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day20.adb
  with AOC2021.Day20;
  procedure Day20 is
  begin
    AOC2021.Day20.Run;
  end Day20;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day20.ads
  package AOC2021.Day20 is
     procedure Run;
  end AOC2021.Day20;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day20.adb :noweb yes
  <<ada-packages>>
  package body AOC2021.Day20 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2021 - Day 20");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2021.Day20;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day20
  ./day20
#+END_SRC

#+RESULTS:
