#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 13
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-13)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-13
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-13)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/13.txt"))
#+END_SRC
** Part 1
#+NAME: part-1
#+BEGIN_SRC lisp :results silent
  (defun parse-coordinates (coordinates)
    (let ((coordinates
           (loop for pair in coordinates
              collect (mapcar #'parse-integer (cl-ppcre:split "," pair))))
          (grid (make-hash-table)))
      (loop
         for (x y) in coordinates
         for pos = (complex x y)
         do (setf (gethash pos grid) t)
         finally (return grid))))

  (defun parse-instructions (instructions)
    (loop
       for i in instructions
       for (nil nil fold) = (cl-ppcre:split " " i)
       for (axis pos) = (cl-ppcre:split "=" fold)
       collect (list (char axis 0)
                     (parse-integer pos))))

  (defun parse-input (lines)
    (let* ((split-at (position "" lines :test #'equal))
           (coordinates (subseq lines 0 split-at))
           (instructions (subseq lines (1+ split-at))))
      (list (parse-coordinates coordinates)
            (parse-instructions instructions))))

  (defun fold-y (grid line)
    (let ((below-the-fold nil)
          (on-fold nil))
      (maphash (lambda (pos v)
                 (declare (ignore v))
                 (cond ((= (imagpart pos) line)
                        (push pos on-fold))
                       ((< line (imagpart pos))
                        (push pos below-the-fold))))
               grid)
      (loop for pos in on-fold
         do (remhash pos grid))
      (loop
         for pos in below-the-fold
         for new-pos = (complex (realpart pos) (- line (- (imagpart pos) line)))
         do
           (remhash pos grid)
           (setf (gethash new-pos grid) t))))

  (defun fold-x (grid line)
    (let ((right-of-fold nil)
          (on-fold nil))
      (maphash (lambda (pos v)
                 (declare (ignore v))
                 (cond ((= (realpart pos) line)
                        (push pos on-fold))
                       ((< line (realpart pos))
                        (push pos right-of-fold))))
               grid)
      (loop for pos in on-fold
         do (remhash pos grid))
      (loop
         for pos in right-of-fold
         for new-pos = (complex (- line (- (realpart pos) line)) (imagpart pos))
         do
           (remhash pos grid)
           (setf (gethash new-pos grid) t))))

  (defun fold (grid instruction)
    (ecase (first instruction)
      (#\x (fold-x grid (second instruction)))
      (#\y (fold-y grid (second instruction)))))

  (defun solve-a (input)
    (let* ((input (parse-input input))
           (grid (first input))
           (instructions (second input)))
      (fold grid (first instructions))
      (hash-table-count grid)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 13 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
#+NAME: part-2
#+BEGIN_SRC lisp :results silent
  (defun print-grid (grid)
    (destructuring-bind (min-x max-x min-y max-y)
        (loop
           for pos being the hash-keys of grid
           for x = (realpart pos)
           for y = (imagpart pos)
           maximize x into max-x
           minimize x into min-x
           maximize y into max-y
           minimize y into min-y
           finally (return (list min-x max-x min-y max-y)))
      (loop for y from min-y to max-y
         do (loop
               for x from min-x to max-x
               for v = (gethash (complex x y) grid)
               do (format t "~A" (if v #\inverse_bullet #\space)))
           (format t "~%"))))
  (defun solve-b (input)
    (let* ((input (parse-input input))
           (grid (first input))
           (instructions (second input)))
      (loop
         for i in instructions
         do (fold grid i))
      (print-grid grid)
      (hash-table-count grid)))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 13 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<part-1>>
  <<part-2>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 13 A: 747
:  ◘◘  ◘◘◘  ◘  ◘ ◘◘◘◘ ◘◘◘   ◘◘  ◘  ◘ ◘  ◘
: ◘  ◘ ◘  ◘ ◘  ◘    ◘ ◘  ◘ ◘  ◘ ◘  ◘ ◘  ◘
: ◘  ◘ ◘  ◘ ◘◘◘◘   ◘  ◘  ◘ ◘    ◘  ◘ ◘◘◘◘
: ◘◘◘◘ ◘◘◘  ◘  ◘  ◘   ◘◘◘  ◘    ◘  ◘ ◘  ◘
: ◘  ◘ ◘ ◘  ◘  ◘ ◘    ◘    ◘  ◘ ◘  ◘ ◘  ◘
: ◘  ◘ ◘  ◘ ◘  ◘ ◘◘◘◘ ◘     ◘◘   ◘◘  ◘  ◘
: Problem 13 B: 102
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.13)
  (in-suite aoc.2021.13)

  (run! 'aoc.2021.13)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day13.adb
  with AOC2021.Day13;
  procedure Day13 is
  begin
    AOC2021.Day13.Run;
  end Day13;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day13.ads
  package AOC2021.Day13 is
     procedure Run;
  end AOC2021.Day13;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with GNAT.Regpat; use GNAT.Regpat;
  with Text_IO; use Text_IO;
#+END_SRC
*** Types and generics
#+NAME: types-and-generics
#+BEGIN_SRC ada

#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day13.adb :noweb yes
  <<ada-packages>>
  package body AOC2021.Day13 is
     <<types-and-generics>>
     -- Used as an example of matching regular expressions
     procedure Parse_Line (Line : Unbounded_String; P : out Password) is
        Pattern : constant String := "(\d+)-(\d+) ([a-z]): ([a-z]+)";
        Re : constant Pattern_Matcher := Compile(Pattern);
        Matches : Match_Array (0..4);
        Pass : Unbounded_String;
        P0, P1 : Positive;
        C : Character;
     begin
        Match(Re, To_String(Line), Matches);
        P0 := Integer'Value(Slice(Line, Matches(1).First, Matches(1).Last));
        P1 := Integer'Value(Slice(Line, Matches(2).First, Matches(2).Last));
        C := Element(Line, Matches(3).First);
        Pass := To_Unbounded_String(Slice(Line, Matches(4).First, Matches(4).Last));
        P := (Min_Or_Pos => P0,
              Max_Or_Pos => P1,
              C => C,
              P => Pass);
     end Parse_Line;
     procedure Run is
     begin
        Put_Line("Advent of Code 2021 - Day 13");
        Put_Line("The result for Part 1 is " & Integer'Image(0));
        Put_Line("The result for Part 2 is " & Integer'Image(0));
     end Run;
  end AOC2021.Day13;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day13
  ./day13
#+END_SRC

#+RESULTS:
