#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 04
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2021-04)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :lparallel)
    (ql:quickload "lparallel"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
  (unless (find-package :alexandria)
    (ql:quickload "alexandria"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2021-04
    (:use :common-lisp
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2021-04)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (with-open-file (in file)
      (loop
         for line = (read-line in nil)
         while line
         collect (mapcar #'parse-integer (cl-ppcre:all-matches-as-strings "(\\d+)" line)))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun parse-boards (board-list)
    (let ((step (lambda (l) (nthcdr 6 l))))
      (loop
         for pos on board-list by step
         collect (make-array '(5 5) :initial-contents (subseq pos 1 6)))))
  (defparameter *input*
    (let ((lines (read-input "input/04.txt")))
      (list (car lines) (parse-boards (cdr lines)))))
#+END_SRC
** Part 1
Playing bingo. Forget about the leaderboard, I still have to parse
things.

Alright, I have all the boards. When a number is called that number
will be negated. A winning board will have 5 (across, diagonal, or
down) negative numbers.
#+NAME: play-bingo
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun winning-board (board)
    (loop
       for i from 0 to 4
       do (loop
             for j from 0 to 4
             thereis (plusp (aref board i j))
             finally (return-from winning-board t))
       do (loop
             for j from 0 to 4
             thereis (plusp (aref board j i))
             finally (return-from winning-board t))))
  (defun score-board (board last-number)
    (* last-number
       (loop
          for i from 0 to 4
          sum (loop
                 for j from 0 to 4
                 when (plusp (aref board i j))
                 sum (aref board i j)))))
  (defun mark-board (board number)
    (loop
       for i from 0 to 4
       do (loop
             for j from 0 to 4
             when (= (aref board i j) number)
             do (setf (aref board i j) (- number)))))
  (defun play-bingo (numbers boards)
    (let ((boards (mapcar #'alexandria:copy-array boards)))
      (loop
         for n in numbers
         do (dolist (b boards) (mark-board b n))
         do (loop
               for b in boards
               if (winning-board b)
               do (return-from play-bingo (score-board b n))))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 04 A: ~a~%" (play-bingo (car *input*) (cadr *input*))))
#+END_SRC
** Part 2
Now we want to lose, a slight modification to the situation above.
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun play-bingo-badly (numbers boards)
    (let ((boards (mapcar #'alexandria:copy-array boards))
          (score 0))
      (loop
         for n in numbers
         while boards
         do (dolist (b boards) (mark-board b n))
         do (loop
               for b in boards
               if (winning-board b)
               do (setf score (score-board b n)))
         do (setf boards (remove-if #'winning-board boards)))
      score))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 04 B: ~a~%" (play-bingo-badly (car *input*) (cadr *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 04 A: 6592
: Problem 04 B: 31755
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2021.04)
  (in-suite aoc.2021.04)
  (defparameter *test-input*
    (let ((lines (read-input "test/04.txt")))
      (list (car lines) (parse-boards (cdr lines)))))
  (test play-bingo
    (is (= 4512 (apply #'play-bingo *test-input*))))
  (test play-bingo-badly
    (is (= 1924 (apply #'play-bingo-badly *test-input*))))
  (run! 'aoc.2021.04)
#+END_SRC
** Test Results
#+RESULTS: test-cases
: 
: Running test suite AOC.2021.04
:  Running test PLAY-BINGO .
:  Running test PLAY-BINGO-BADLY .
:  Did 2 checks.
:     Pass: 2 (100%)
:     Skip: 0 ( 0%)
:     Fail: 0 ( 0%)
** Ada
*** Runner
Simple runner.
#+BEGIN_SRC ada :tangle ada/day04.adb
  with AOC2021.Day04;
  procedure Day04 is
  begin
    AOC2021.Day04.Run;
  end Day04;
#+END_SRC
*** Specification
Specification for solution.
#+BEGIN_SRC ada :tangle ada/aoc2021-day04.ads
  package AOC2021.Day04 is
     procedure Run;
  end AOC2021.Day04;
#+END_SRC
*** Packages
#+NAME: ada-packages
#+BEGIN_SRC ada
  with Text_IO; use Text_IO;
  with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
  with Ada.Containers.Vectors;
  with Ada.Text_IO.Unbounded_IO; use Ada.Text_IO.Unbounded_IO;
  with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
#+END_SRC
*** Types and generics
Making a couple vector types. One to handle the Bingo numbers and the
other to handle the Bingo cards.
#+NAME: types-and-generics
#+BEGIN_SRC ada
  type Bingo_Card is array (1..5, 1..5) of Natural;
  package Bingo_Draw_Vectors is new Ada.Containers.Vectors
    (Element_Type => Natural, Index_Type => Natural);
  use Bingo_Draw_Vectors;
  subtype Bingo_Draw is Bingo_Draw_Vectors.Vector;
  package Bingo_Card_Vectors is new Ada.Containers.Vectors
    (Element_Type => Bingo_Card, Index_Type => Natural);
  use Bingo_Card_Vectors;
  subtype Bingo_Cards is Bingo_Card_Vectors.Vector;
#+END_SRC
*** Gathering Input
Ok, so this shouldn't be /too/ hard. I read the first line entirely
and walk through it, skipping to the next comma, and then grabbing the
tail of the string. For the cards, I'm naive in my approach. I assume
valid input and read 25 numbers at a time.
#+NAME: ada-input
#+BEGIN_SRC ada
  procedure Read_File (Filename : String; Numbers : out Bingo_Draw; Cards : out Bingo_Cards) is
     Input_File : File_Type;
  begin
     Open (Input_File, In_File, Filename);
     declare
        Line : Unbounded_String;
        Start : Natural := 1;
        Stop : Natural;
     begin
        Get_Line (Input_File, Line);
        Stop := Index(Line, ",", Start);
        while Stop /= 0 loop
           Numbers.Append(Integer'Value(Slice(Line,Start,Stop-1)));
           Start := Stop + 1;
           Stop := Index(Line, ",", Start);
        end loop;
        Numbers.Append(Integer'Value(Slice(Line,Start, Length(Line))));
     end;
     while not End_Of_File(Input_File) loop
        declare
           Card : Bingo_Card := (others => (others => 0));
        begin
           for I in Card'Range(1) loop
              for J in Card'Range(2) loop
                 Get(Input_File, Card(I, J));
              end loop;
           end loop;
           Cards.Append(Card);
        end;
     end loop;
            
     Close (Input_File);
  end Read_File;
#+END_SRC
*** Part 1
For this part, I need some utility functions. First is a check to see
if a card is a winner:
#+NAME: ada-winner
#+BEGIN_SRC ada
  function Is_Winner (Card : Bingo_Card) return Boolean is
  begin
     for I in 1..5 loop
        -- courtesy of u/max_rez
        if (for all J in 1..5 => Card(I,J) = 0) then
           return True;
        end if;
        if (for all J in 1..5 => Card(J,I) = 0) then
           return True;
        end if;
     end loop;
     return False;
  end Is_Winner;
#+END_SRC
After that I need a scoring function:
#+NAME: ada-score
#+BEGIN_SRC ada
  function Score_Card (Card : Bingo_Card; Number : Integer) return Integer is
     Sum : Integer := 0;
  begin
     -- also courtesy of u/max_rez
     for N of Card loop
        Sum := Sum + N;
     end loop;
     return Sum * Number;
  end Score_Card;
#+END_SRC
And marking the cards:
#+NAME: ada-mark
#+BEGIN_SRC ada
  procedure Mark_Card (Card : in out Bingo_Card; Number : Integer) is
  begin
     for I in Card'Range(1) loop
        for J in Card'Range(2) loop
           if Card(I,J) = Number then
              Card(I,J) := 0;
           end if;
        end loop;
     end loop;
  end Mark_Card;
#+END_SRC
Now we're ready to play the game.
#+NAME: ada-play
#+BEGIN_SRC ada
  function Play_Game (Cards_In : Bingo_Cards; Numbers : Bingo_Draw) return Integer is
     Cards : Bingo_Cards := Cards_In;
  begin
     for N of Numbers loop
        for C in Cards.Iterate loop
           declare
              Card : Bingo_Card renames Cards(C);
           begin
              Mark_Card(Card, N);
              if Is_Winner (Card) then
                 return Score_Card (Card, N);
              end if;
           end;
        end loop;
     end loop;
     return 0;
  end Play_Game;
#+END_SRC
*** Part 2
Same as before, but don't end early.
#+NAME: ada-play-badly
#+BEGIN_SRC ada
  function Play_Game_Badly (Cards_In : Bingo_Cards; Numbers : Bingo_Draw) return Integer is
     Cards : Bingo_Cards := Cards_In;
     Card : Bingo_Card;
     Score : Integer := 0;
     Index : Natural := 0;
  begin
     for N of Numbers loop
        Index := Cards.First_Index;
        while Index < Cards.Last_Index loop
           Card := Cards(Index);
           Mark_Card(Card, N);
           if Is_Winner (Card) then
              Score := Score_card(Card, N);
              Delete(Cards,Index);
           else
              Replace_Element(Cards, Index, Card);
              Index := Index + 1;
           end if;
        end loop;
     end loop;
     return Score;
  end Play_Game_Badly;
#+END_SRC
*** Implementation
Actual implementation body.
#+BEGIN_SRC ada :tangle ada/aoc2021-day04.adb :noweb yes
  <<ada-packages>>
  package body AOC2021.Day04 is
     <<types-and-generics>>
     <<ada-input>>
     <<ada-winner>>
     <<ada-score>>
     <<ada-mark>>
     <<ada-play>>
     <<ada-play-badly>>
     procedure Run is
        Numbers : Bingo_Draw;
        Cards : Bingo_Cards;
     begin
        Read_File ("../input/04.txt", Numbers, Cards);
        Put_Line("Advent of Code 2021 - Day 04");
        Put_Line("The result for Part 1 is " & Integer'Image(Play_Game(Cards, Numbers)));
        Put_Line("The result for Part 2 is " & Integer'Image(Play_Game_Badly(Cards, Numbers)));
     end Run;
  end AOC2021.Day04;
#+END_SRC
*** Run the program
In order to run this you have to "tangle" the code first using =C-c
C-v C-t=.

#+BEGIN_SRC shell :tangle no :results output :exports both
  cd ada
  gnatmake day04
  ./day04
#+END_SRC

#+RESULTS:
: Advent of Code 2021 - Day 04
: The result for Part 1 is  6592
: The result for Part 2 is  31755
** Thoughts
I learned two Ada things today. First, that you can loop over a
multidimensional array with =for x on array=. That simplified one of
the loops above, haven't applied it to others yet. Second, =for all
...= is an expression that returns a =Boolean=. Very handy and concise
way of expressing a universal constraint.
