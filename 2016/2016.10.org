#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 10
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2016-10)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
  (unless (find-package :digraph)
    (ql:quickload "cl-digraph"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2016-10
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2016-10)
#+END_SRC
** Input
The input describes a dataflow system of some sort. Each bot will hand
another bot or output one of two values (their high and low
values). Additionally, some inputs will be put into this system.

Lines are of the form:

#+BEGIN_EXAMPLE
  value # goes to bot #
  bot # gives low to [bot|output] # and high to [bot|output] #
#+END_EXAMPLE

I need to construct something out of this. My mental model is that
these form a network. I guess first I could parse this and see how
many unique values and bots there are. There are 210 unique bots. Each
bot has its own line. That is helpful information.

21 outputs, 210 bots, and 21 values (inputs).

#+BEGIN_SRC lisp :noweb yes :results silent
  (defun parse-line (line)
    (with-local-rules
      (defrule num () (+ digit) (:flatten) (:string) (:function #'parse-integer))
      (defrule bot () (and "bot" num)
        (:choose 1)
        (:function (lambda (n) (list :bot n))))
      (defrule output () (and "output" num)
        (:choose 1)
        (:function (lambda (n) (list :output n))))
      (defrule gives () (and bot "giveslowto" (or bot output) "andhighto" (or bot output))
        (:choose 0 2 4))
      (defrule value () (and "value" num "goes" "to" bot)
        (:choose 1 4)
        (:function (lambda (n b) (list (list :value n) b))))
      (defrule line () (or gives value))
      (parseq 'line (apply #'concatenate (cons 'string (cl-ppcre:split " " line))))))
#+END_SRC

#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/10.txt"))
#+END_SRC
** Part 1
I'm having a lot of trouble thinking of how to do this one. I was way
overthinking it. I just processed the rules one at time. If it could
be applied, I applied it, otherwise I skipped it. Any skipped rules
were put back into the queue on the next execution. For Part 1 this
runs until the values 61 and 17 are compared. For Part 2, it's run to
completion and then the product of outputs 0, 1, and 2 is returned.
#+NAME: solve-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (rules)
    (iter (with rules = (copy-seq rules))
          (with bots = (make-hash-table))
          (for skipped = nil)
          (until (null rules))
          (iter (for rule in rules)
                (for type = (caar rule))
                (for number = (cadar rule))
                (case type
                  (:value (push number (gethash (cadadr rule) bots)))
                  (:bot
                   (cond ((= 2 (length (gethash number bots)))
                          (if (or (and (= 61 (first (gethash number bots)))
                                       (= 17 (second (gethash number bots))))
                                  (and (= 17 (first (gethash number bots)))
                                       (= 61 (second (gethash number bots)))))
                                       (return-from solve-a number))
                          (destructuring-bind ((bol low) (boh high)) (rest rule)
                            (if (eql :bot boh)
                                (push (apply #'max (gethash number bots))
                                      (gethash high bots)))
                            (if (eql :bot bol)
                                (push (apply #'min (gethash number bots))
                                      (gethash low bots)))))
                         (t (push rule skipped))))))
          (setf rules skipped)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 10 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
#+NAME: solve-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (rules)
    (iter (with rules = (copy-seq rules))
          (with bots = (make-hash-table))
          (with outputs = (make-hash-table))
          (for skipped = nil)
          (until (null rules))
          (finally (return (* (gethash 0 outputs) (gethash 1 outputs) (gethash 2 outputs))))
          (iter (for rule in rules)
                (for type = (caar rule))
                (for number = (cadar rule))
                (case type
                  (:value (push number (gethash (cadadr rule) bots)))
                  (:bot
                   (cond ((= 2 (length (gethash number bots)))
                          (destructuring-bind ((bol low) (boh high)) (rest rule)
                            (if (eql :bot boh)
                                (push (apply #'max (gethash number bots))
                                      (gethash high bots))
                                (setf (gethash high outputs) (apply #'max (gethash number bots))))
                            (if (eql :bot bol)
                                (push (apply #'min (gethash number bots))
                                      (gethash low bots))
                                (setf (gethash low outputs) (apply #'min (gethash number bots))))))
                         (t (push rule skipped))))))
          (setf rules skipped)))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 10 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<parse-line>>
  <<read-input>>
  <<input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2016.10.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 10 A: 56
: Problem 10 B: 7847

** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2016.10)
  (in-suite aoc.2016.10)

  (run! 'aoc.2016.10)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
