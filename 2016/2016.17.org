#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 17
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2016-17)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :ironclad)
    (ql:quickload "ironclad"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2016-17
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2016-17)
#+END_SRC
** Input
Today's input is just a string, just hardcoding it.
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input* "rrrbmfta")
#+END_SRC
** Part 1
The task is to find the shortest path through a maze described by the
md5 checksum of a string. Movement is the result of appending U, D, L,
R to the string and calculating the next checksum.

The maze grid is a 4x4 maze with doors between each adjacent
room. Whether a door is open is determined by the first 4 characters
in the checksum. A 0-a indicates closed, b-f indicates open.

I'll implement this with a BFS since the goal is to find the
*shortest* path. I'll start the queue with the empty string (first
room) and then process that and add each new valid path to the queue,
repeating. A downside to this puzzle is that a room can't be
considered "visited" so as to ignore it later for the same
path. Moving down and up results in a new set of doors being
opened. Hopefully, though, the search won't be too bad.

This code will take in a string, calculate the checksum, then return a
new string.
#+NAME: md5-string
#+BEGIN_SRC lisp :results silent
  (defun md5-string (string)
    (ironclad:byte-array-to-hex-string
     (ironclad:digest-sequence
      :md5 (ironclad:ascii-string-to-byte-array string))))
#+END_SRC

#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 17 A: ~a~%" (identity *input*)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 17 B: ~a~%" (identity *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<md5-string>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle no
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 17 A: rrrbmfta
: Problem 17 B: rrrbmfta
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2016.17)
  (in-suite aoc.2016.17)

  (run! 'aoc.2016.17)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
