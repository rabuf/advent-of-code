#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 06
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2016-06)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
  (unless (find-package :series)
    (ql:quickload "series"))
  (unless (find-package :cl-permutation)
    (ql:quickload "cl-permutation"))
  (unless (find-package :bordeaux-threads)
    (ql:quickload "bordeaux-threads"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2016-06
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2016-06)
#+END_SRC
** Input
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/06.txt"))
#+END_SRC
** Part 1
Similar to the triangle day (day 3), the input is in rows, but we need
the result by column. The most common character per column is part of
the password.
#+NAME: solve-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (lines)
    (let ((characters (make-hash-table :test #'equal))
          (all-characters (iter (for j from (char-code #\a) to (char-code #\z))
                                (collect (code-char j)))))
      (iter (for line in lines)
            (iter (for i from 0)
                  (for c in-string line)
                  (incf (gethash (list i c) characters 0))))
      (coerce (iter (for i from 0 below (length (first lines)))
                    (collect
                        (iter (for c in all-characters)
                              (finding c maximizing (gethash (list i c) characters 0)))))
              'string)))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 06 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
Now we want the least common.
#+NAME: solve-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (lines)
    (let ((characters (make-hash-table :test #'equal))
          (all-characters (iter (for j from (char-code #\a) to (char-code #\z))
                                (collect (code-char j)))))
      (iter (for line in lines)
            (iter (for i from 0)
                  (for c in-string line)
                  (incf (gethash (list i c) characters 0))))
      (coerce (iter (for i from 0 below (length (first lines)))
                    (collect
                        (iter (for c in all-characters)
                              (finding c minimizing (gethash (list i c) characters 0)))))
              'string)))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 06 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<input>>
  <<solve-a>>
  <<solve-b>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2016.06.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 06 A: nabgqlcw
: Problem 06 B: ovtrjcjh
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2016.06)
  (in-suite aoc.2016.06)

  (run! 'aoc.2016.06)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
