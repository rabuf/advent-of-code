#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 23
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-23)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-23
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-23)
#+END_SRC
** Input
#+NAME: 
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input*
    (read-input "input/23.txt"))
#+END_SRC
** Part 1
The program:
#+BEGIN_EXAMPLE
  jio a, +22 // not executed
  inc a      // a++
  tpl a      // a*=3
  tpl a      // a*=3
  tpl a      // a*=3 (a = 27)
  inc a      // a++
  tpl a      // a*=3
  inc a      // a++
  tpl a      // a*=3
  inc a      // a++
  inc a      // a++
  tpl a      // a*=3 (a = 771)
  inc a      // a++
  inc a      // a++
  tpl a      // a*=3
  inc a      // a++
  inc a      // a++
  tpl a      // a*=3 (a = 6963)
  inc a      // a++
  inc a      // a++
  tpl a      // a*=3 (a = 20895)
  jmp +19    // go to start of loop
  tpl a      // none of these get executed
  tpl a
  tpl a
  tpl a
  inc a
  inc a
  tpl a
  inc a
  tpl a
  inc a
  inc a
  tpl a
  inc a
  inc a
  tpl a
  inc a
  tpl a
  tpl a      // all the way to here
  jio a, +8  // start of loop
  inc b
  jie a, +4
  tpl a
  inc a
  jmp +2
  hlf a
  jmp -7
#+END_EXAMPLE

Question: What's the value of register =b= after the program
terminates?

#+NAME: collatz
#+BEGIN_SRC lisp :results silent
  (defun collatz (a)
    (let ((b 0))
      (iter (until (= a 1))
            (incf b)
            (cond ((evenp a)
                   (setf a (/ a 2)))
                  (t (setf a (1+ (* 3 a))))))
      b))
#+END_SRC
I skipped making a simulator since I knew what the program did, but I
may come back and write one in the future.

The core of this problem is the last 8 instructions which form a
loop. The program is counting (in =b=) how long it takes for =a= to
reach one in the 3n+1 problem (if n is odd, triple it and add 1, if
even halve it, until it reaches 1).

I worked out the values for =a= at the start of the loop using a
calculator.
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 23 A: ~a~%" (collatz 20895)))
#+END_SRC
** Part 2
The second part asks what if =a= starts at 1. In that case we need to
know the second potential input value. The first jump (=jio a, +22=)
will execute this time and send us to the second computation of a:
#+BEGIN_EXAMPLE
  tpl a  // a*=3
  tpl a  // a*=3
  tpl a  // a*=3
  tpl a  // a*=3 (a = 81)
  inc a  // a++
  inc a  // a++ (a = 83)
  tpl a  // a*=3
  inc a  // a++
  tpl a  // a*=3
  inc a  // a++
  inc a  // a++ (a=752
  tpl a  // a*=3
  inc a  // a++
  inc a  // a++
  tpl a  // a*=3
  inc a  // a++
  tpl a  // a*=3
  tpl a  // a*=3 (a = 60975)
#+END_EXAMPLE
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 23 B: ~a~%" (collatz 60975)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  <<collatz>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.23.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 23 A: 255
: Problem 23 B: 334
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2015.23)
  (in-suite aoc.2015.23)

  (run! 'aoc.2015.23)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
I'm not making a simulator or automatic translator right now, but I
had some fun writing up how this could be done in this particular
language:
#+BEGIN_SRC lisp
  (let ((a 1) (b 0))
    (tagbody
     0 (when (= a 1) (go 22))
     1 (setf a 20895)
     21 (go 40)
     22 (setf a 60975)
     40 (when (= a 1) (go 48))
     41 (incf b)
     42 (when (evenp a) (go 46))
     43 (setf a (* a 3))
     44 (incf a)
     45 (go 47)
     46 (setf a (/ a 2))
     47 (go 40)
     48 nil)
    b)
#+END_SRC
I shortened the initialization portions but left the loop intact. So
an easy way to simulate this machine would be a macro that accepts the
input and sticks it inside a tag body like this. The tags become just
the instruction number in the sequence and jumps can be calculated (in
the macro form).

So I never actually tried running this one straight, I already have
the input so why not try implementing it properly in Common Lisp?
#+BEGIN_SRC lisp :results all
  (defun parse-instruction (instruction)
    (with-local-rules
      (defrule ra () "a" (:constant :a))
      (defrule rb () "b" (:constant :b))
      (defrule register () (or ra rb))
      (defrule offset () (and (or "+" "-") (+ digit)) (:string) (:function #'parse-integer))
      (defrule hlf () (and "hlf " register) (:choose 1) (:lambda (r) (list :hlf r)))
      (defrule tpl () (and "tpl " register) (:choose 1) (:lambda (r) (list :tpl r)))
      (defrule inc () (and "inc " register) (:choose 1) (:lambda (r) (list :inc r)))
      (defrule jmp () (and "jmp " offset) (:choose 1) (:lambda (o) (list :jmp o)))
      (defrule jie () (and "jie " register ", " offset) (:choose 1 3) (:lambda (r o) (list :jie r o)))
      (defrule jio () (and "jio " register ", " offset) (:choose 1 3) (:lambda (r o) (list :jio r o)))
      (defrule instruction ()
          (or jio jie jmp inc tpl hlf))
      (parseq 'instruction instruction)))

  (defun parse-input (input)
    (loop for i in input
         collect (parse-instruction i)))
  (defun run-lock (instructions &optional (a 0))
      (loop
         with pc = 0
         with a = a
         with b = 0
         with instructions = (coerce instructions 'vector)
         while (<= 0 pc (1- (length instructions)))
         for i = (aref instructions pc)
         finally (return b)
         do (ecase (first i)
              (:hlf (case (second i)
                      (:a (setf a (/ a 2)))
                      (:b (setf b (/ b 2))))
                    (incf pc))
              (:tpl (case (second i)
                      (:a (setf a (* a 3)))
                      (:b (setf b (* b 3))))
                    (incf pc))
              (:inc (case (second i)
                      (:a (incf a))
                      (:b (incf b)))
                    (incf pc))
              (:jmp (incf pc (second i)))
              (:jio (if (= 1 (case (second i) (:a a) (:b b)))
                        (incf pc (third i))
                        (incf pc)))
              (:jie (if (evenp (case (second i) (:a a) (:b b)))
                        (incf pc (third i))
                        (incf pc))))))
  (defun get-benchmarks ()
    (with-output-to-string (*standard-output*)
      (print "A=0, parsing input:")
      (trivial-benchmark:with-timing (1000) (run-lock (parse-input *input*) 0))
      (print "A=0, pre-parsed:")
      (let ((parsed (parse-input *input*)))
        (trivial-benchmark:with-timing (1000) (run-lock parsed 0)))
      (print "collatz 20895")
      (trivial-benchmark:with-timing (1000) (collatz 20895))
      (print "A=1, parsing input:")
      (trivial-benchmark:with-timing (1000) (run-lock (parse-input *input*) 1))
      (print "A=1, pre-parsed:")
      (let ((parsed (parse-input *input*)))
        (trivial-benchmark:with-timing (1000) (run-lock parsed 1)))
      (print "collatz 60965")
      (trivial-benchmark:with-timing (1000) (collatz 60975))
      *standard-output*))
  (get-benchmarks)
#+END_SRC

#+RESULTS:
#+begin_example

"A=0, parsing input:" 
-                SAMPLES  TOTAL      MINIMUM   MAXIMUM   MEDIAN    AVERAGE   DEVIATION  
REAL-TIME        1000     0.507      0         0.056     0         0.000507  0.002147   
RUN-TIME         1000     0.502      0         0.057     0         0.000502  0.002171   
USER-RUN-TIME    1000     0.462241   0.000304  0.047104  0.00031   0.000462  0.001787   
SYSTEM-RUN-TIME  1000     0.039526   0.000001  0.009172  0.000002  0.00004   0.000323   
PAGE-FAULTS      1000     0          0         0         0         0         0.0        
GC-RUN-TIME      1000     0.134      0         0.055     0         0.000134  0.002041   
BYTES-CONSED     1000     456500512  425376    484128    458256    456500.5  7379.692   
EVAL-CALLS       1000     0          0         0         0         0         0.0        

"A=0, pre-parsed:" 
-                SAMPLES  TOTAL     MINIMUM   MAXIMUM   MEDIAN    AVERAGE   DEVIATION  
REAL-TIME        1000     0.026     0         0.001     0         0.000026  0.000159   
RUN-TIME         1000     0.024     0         0.001     0         0.000024  0.000153   
USER-RUN-TIME    1000     0.021337  0.00002   0.000044  0.000021  0.000021  0.000002   
SYSTEM-RUN-TIME  1000     0.001422  0.000001  0.00004   0.000001  0.000001  0.000001   
PAGE-FAULTS      1000     0         0         0         0         0         0.0        
GC-RUN-TIME      1000     0         0         0         0         0         0.0        
BYTES-CONSED     1000     456320    0         32640     0         456.32    3829.5178  
EVAL-CALLS       1000     0         0         0         0         0         0.0        

"collatz 20895" 
-                SAMPLES  TOTAL     MINIMUM   MAXIMUM   MEDIAN    AVERAGE   DEVIATION  
REAL-TIME        1000     0.007     0         0.001     0         0.000007  0.000083   
RUN-TIME         1000     0.006     0         0.001     0         0.000006  0.000077   
USER-RUN-TIME    1000     0.005692  0.000005  0.000012  0.000006  0.000006  0.000001   
SYSTEM-RUN-TIME  1000     0.001342  0.000001  0.000009  0.000001  0.000001  0.000001   
PAGE-FAULTS      1000     0         0         0         0         0         0.0        
GC-RUN-TIME      1000     0         0         0         0         0         0.0        
BYTES-CONSED     1000     0         0         0         0         0         0.0        
EVAL-CALLS       1000     0         0         0         0         0         0.0        

"A=1, parsing input:" 
-                SAMPLES  TOTAL      MINIMUM   MAXIMUM   MEDIAN    AVERAGE    DEVIATION  
REAL-TIME        1000     0.397      0         0.01      0         0.000397   0.000878   
RUN-TIME         1000     0.395      0         0.01      0         0.000395   0.000858   
USER-RUN-TIME    1000     0.385121   0.000309  0.009117  0.000313  0.000385   0.000668   
SYSTEM-RUN-TIME  1000     0.009723   0.000001  0.000928  0.000002  0.00001    0.000063   
PAGE-FAULTS      1000     0          0         0         0         0          0.0        
GC-RUN-TIME      1000     0.061      0         0.009     0         0.000061   0.000682   
BYTES-CONSED     1000     456480848  425344    482976    458272    456480.84  7479.2925  
EVAL-CALLS       1000     0          0         0         0         0          0.0        

"A=1, pre-parsed:" 
-                SAMPLES  TOTAL     MINIMUM   MAXIMUM   MEDIAN    AVERAGE   DEVIATION  
REAL-TIME        1000     0.032     0         0.001     0         0.000032  0.000176   
RUN-TIME         1000     0.031     0         0.001     0         0.000031  0.000173   
USER-RUN-TIME    1000     0.028017  0.000026  0.000068  0.000027  0.000028  0.000004   
SYSTEM-RUN-TIME  1000     0.001973  0.000001  0.000037  0.000001  0.000002  0.000003   
PAGE-FAULTS      1000     0         0         0         0         0         0.0        
GC-RUN-TIME      1000     0         0         0         0         0         0.0        
BYTES-CONSED     1000     456768    0         32704     0         456.768   3833.2788  
EVAL-CALLS       1000     0         0         0         0         0         0.0        

"collatz 60965" 
-                SAMPLES  TOTAL     MINIMUM   MAXIMUM   MEDIAN    AVERAGE   DEVIATION  
REAL-TIME        1000     0.008     0         0.001     0         0.000008  0.000089   
RUN-TIME         1000     0.006     0         0.001     0         0.000006  0.000077   
USER-RUN-TIME    1000     0.006939  0.000006  0.000023  0.000007  0.000007  0.000001   
SYSTEM-RUN-TIME  1000     0.001278  0.000001  0.000006  0.000001  0.000001  0.0        
PAGE-FAULTS      1000     0         0         0         0         0         0.0        
GC-RUN-TIME      1000     0         0         0         0         0         0.0        
BYTES-CONSED     1000     0         0         0         0         0         0.0        
EVAL-CALLS       1000     0         0         0         0         0         0.0        
#+end_example
