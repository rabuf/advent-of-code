#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 05
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-05)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-05
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-05)
#+END_SRC
** Input
No parseq today either. The input is a file containing one string per
line, just need to collect those.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect line)))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  (defparameter *input*
    (read-input "input/05.txt"))
#+END_SRC
** Part 1
#+BEGIN_QUOTE
A nice string is one with all of the following properties:

- It contains at least three vowels (aeiou only), like aei, xazegov, or aeiouaeiouaeiou.
- It contains at least one letter that appears twice in a row, like xx, abcdde (dd), or aabbccdd (aa, bb, cc, or dd).
- It does not contain the strings ab, cd, pq, or xy, even if they are part of one of the other requirements.
#+END_QUOTE
#+NAME: nice-stringp
#+BEGIN_SRC lisp :results silent
  (defun nice-stringp (string)
    ;; 3rd condition:
    ;; Can't contain ab, cd, pq, or xy. So we discard them right away.
    (unless (ppcre:all-matches-as-strings "(ab|cd|pq|xy)" string)
      ;; Must have at least 3 vowels
      (when (>= (length (ppcre:all-matches-as-strings "(a|e|i|o|u)" string)) 3)
        ;; Must have at least one letter that appears twice in a row
        (when (ppcre:all-matches-as-strings "(.)(\\1)" string) t))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (strings)
    (iter (for s in strings)
          (counting (nice-stringp s))))
  (defun problem-a () (format t "Problem 05 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
Santa has changed his rules:
#+BEGIN_QUOTE
Now, a nice string is one with all of the following properties:

- It contains a pair of any two letters that appears at least twice in the string without overlapping, like xyxy (xy) or aabcdefgaa (aa), but not like aaa (aa, but it overlaps).
- It contains at least one letter which repeats with exactly one letter between them, like xyx, abcdefeghi (efe), or even aaa.
#+END_QUOTE
#+NAME: nice2
#+BEGIN_SRC lisp :results silent
  (defun nice2 (string)
    ;; a repeated pair
    (when (ppcre:all-matches-as-strings "(..).*(\\1)" string)
      ;; a pair of letters with one letter between them
      (when (ppcre:all-matches-as-strings "(.).(\\1)" string)
        t)))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (strings)
    (iter (for s in strings)
          (counting (nice2 s))))
  (defun problem-b () (format t "Problem 05 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<nice-stringp>>
  <<nice2>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.05.lisp
  <<initialize>>
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 05 A: 255
: Problem 05 B: 55
** Thoughts
