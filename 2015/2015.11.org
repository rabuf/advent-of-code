#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 11
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-11)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-11
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-11)
#+END_SRC
** Input
The input is a single string again.
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input* "hxbxwxba")
#+END_SRC
** Part 1
We need to determine what Santa's next password will be.
#+BEGIN_QUOTE
- Passwords must include one increasing straight of at least three
  letters, like abc, bcd, cde, and so on, up to xyz. They cannot skip
  letters; abd doesn't count.
- Passwords may not contain the letters i, o, or l, as these letters
  can be mistaken for other characters and are therefore confusing.
- Passwords must contain at least two different, non-overlapping pairs
  of letters, like aa, bb, or zz.
#+END_QUOTE
I'll implement each of these as separate test functions.
#+NAME: double-pairs
#+BEGIN_SRC lisp :results silent
  (defun double-pair (password)
    (not (null (ppcre:scan "(.)(\\1).*(.)(\\3)" password))))
#+END_SRC
#+NAME: only-allowed
#+BEGIN_SRC lisp :results silent
  (defun only-allowed (password)
    (not (ppcre:scan "(i|o|l)" password)))
#+END_SRC

Trying to determine the runs is a bit more challenging than the other
two. Those were, conveniently, determined by regexes. I'll scan over
the sequence one character and a time checking the char-codes and
seeing if they're in ascending order.
#+NAME: increasing-straight
#+BEGIN_SRC lisp :results silent
  (defun increasing-straight (password)
    (let ((run-length 1)
          (prev 0))
      (iter (for c in-string password)
            (until (= run-length 3))
            (let ((n (char-code c)))
              (when (= (1+ prev) n)
                (incf run-length))
              (unless (= (1+ prev) n)
                (setf run-length 1))
              (setf prev n)))
      ;; (format t "~a~%" run-length)
      (= 3 run-length)))
#+END_SRC
#+NAME: valid-password
#+BEGIN_SRC lisp :results silent
  (defun valid-password (password)
    (and (increasing-straight password)
         (only-allowed password)
         (double-pair password)))
#+END_SRC
I also need to calculate the next password. The password is always 8
characters and is incremented (from the right) one alphabetical
character at a time. So =aa= becomes =ab= and =az= becomes =ba=.
#+NAME: next-password
#+BEGIN_SRC lisp :results silent
  (defun next-password (password)
    (let* ((as-numbers
             (iter (for c in-string password)
                   (collect (- (char-code c) (char-code #\a)))))
           (incremented
             (iter (for n in (reverse as-numbers))
                   (with carry = 1)
                   (collect (code-char (+ (mod (+ carry n) 26) (char-code #\a))))
                   (setf carry (floor (/ (+ carry n) 26))))))
      (map 'string #'identity (reverse incremented))))
#+END_SRC

#+NAME: new-password
#+BEGIN_SRC lisp :results silent
  (defun new-password (password)
    (iter (setf password (next-password password))
          (until (valid-password password)))
    password)
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 11 A: ~a~%" (new-password *input*)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 11 B: ~a~%" (new-password (new-password *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<increasing-straight>>
  <<only-allowed>>
  <<double-pairs>>
  <<next-password>>
  <<valid-password>>
  <<new-password>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.11.lisp
  <<initialize>>
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 11 A: hxbxxyzz
: Problem 11 B: hxcaabcc
** Thoughts
