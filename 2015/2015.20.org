#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 20
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-20)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-20
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-20)
#+END_SRC
** Input
The input is a single number.

#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input* 34000000)
#+END_SRC
** Part 1
Santa tasks the elves with delivering presents. There are an infinite
number of elves and an infinite number of houses. Each elf is given a
unique number (1, 2, 3, ...) and delivers 10 presents to each house
which is a multiple of that number.

This means that houses receive 10x(sum of factors of house number)
presents. Using this, we need two routines: one which sums up all
factors of a number, and another which will search forward for the
first house that receives 34000000 (or more) presents.

#+NAME: sum-of-factors
#+BEGIN_SRC lisp :results silent
  (defun sum-of-factors (n)
    (let ((result 0))
      (iter (for i from 1 to (ceiling (sqrt n)))
            (when (= 0 (mod n i))
              (incf result i)
              (unless (= i (/ n i))
                (incf result (/ n i)))))
      result))
#+END_SRC

#+NAME: solve-a
#+BEGIN_SRC lisp :results silent
  (defun solve-a (limit)
    (iter (for i from 1)
          (when (>= (* 10 (sum-of-factors i))
                   limit)
            (return i))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 20 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
The elves now only deliver to 50 houses each, but now deliver 11
presents. So only add in that factor when (n / factor <= 50).
#+NAME: limited-sum-of-factors
#+BEGIN_SRC lisp :results silent
  (defun limited-sum-of-factors (n)
    (let ((result 0))
      (iter (for i from 1 to (ceiling (sqrt n)))
            (when (= 0 (mod n i))
              (when (<= (/ n i) 50)
                (incf result i))
              (unless (= i (/ n i))
                (when (<= (/ n (/ n i)) 50)
                  (incf result (/ n i))))))
      result))
#+END_SRC

#+NAME: solve-a
#+BEGIN_SRC lisp :results silent
  (defun solve-b (limit)
    (iter (for i from 1)
          (when (>= (* 11 (limited-sum-of-factors i))
                   limit)
            (return i))))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 20 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<sum-of-factors>>
  <<solve-a>>
  <<limited-sum-of-factors>>
  <<solve-b>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.20.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 20 A: 786240
: Problem 20 B: 831600
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2015.20)
  (in-suite aoc.2015.20)

  (run! 'aoc.2015.20)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
