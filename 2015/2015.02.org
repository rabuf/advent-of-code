#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 02
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-02)=
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-02
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-02)
#+END_SRC
** Input
Today's input is of the form:
#+BEGIN_EXAMPLE
LENGTHxWIDTHxHEIGHT
LENGTHxWIDTHxHEIGHT
...
#+END_EXAMPLE
Each package listed on its own line. I'll write up another parseq
parser to handle individual lines again.
#+NAME: parse-line
#+BEGIN_SRC lisp :results silent
  (defun parse-line (line)
    (with-local-rules
      (defrule dimension () (+ digit) (:string) (:function #'parse-integer))
      (defrule box () (and dimension #\x dimension #\x dimension) (:choose 0 2 4))
      (parseq 'box line)))
#+END_SRC
#+NAME: read-input
#+BEGIN_SRC lisp :results silent :noweb yes
  <<parse-line>>
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  (defparameter *input*
    (read-input "input/02.txt"))
#+END_SRC
** Part 1
The elves need to know how much wrapping paper (area) they need based
on the supplied box dimensions. The answer: sum of the area of the
sides + area of smallest side.
#+NAME: paper-needed
#+BEGIN_SRC lisp :results silent
  (defun paper-needed (box)
    (destructuring-bind (l w h) box
      (let ((lw (* l w))
            (lh (* l h))
            (wh (* w h)))
      (+ (* 2 (+ lw lh wh)) (min lw lh wh)))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-a (boxes)
    (iter (for box in boxes)
          (sum (paper-needed box))))
  (defun problem-a () (format t "Problem 02 A: ~a~%" (solve-a *input*)))
#+END_SRC
** Part 2
These elves are not prepared. They need ribbon now. How much per box:

- To wrap the box: The perimeter of the smallest face.
- To make the bow: The volume of the box
#+NAME: ribbon-needed
#+BEGIN_SRC lisp :results silent
  (defun ribbon-needed (box)
    (destructuring-bind (l w h) box
      (let ((lh (* 2 (+ l h)))
            (lw (* 2 (+ l w)))
            (wh (* 2 (+ w h))))
        (+ (* l w h)
           (min lh lw wh)))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (boxes)
    (iter (for box in boxes)
          (sum (ribbon-needed box))))
  (defun problem-b () (format t "Problem 02 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<paper-needed>>
  <<ribbon-needed>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.02.lisp
  <<initialize>>
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 02 A: 1586300
: Problem 02 B: 3737498
** Thoughts
