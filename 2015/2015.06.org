#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 06
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-06)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-06
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-06)
#+END_SRC
** Input
The input is a series of lines, each containing a pair of coordinates.
#+BEGIN_EXAMPLE
turn on 0,0 through 999,999
turn off 1,1 through 998,998
#+END_EXAMPLE
I'll use parseq for this one though it's a little bit of
overkill. PPCRE would've handled this nicely.
#+NAME: parse-line
#+BEGIN_SRC lisp :results silent
  (defun parse-line (line)
    (with-local-rules
      (defrule coord () (+ digit) (:string) (:function #'parse-integer))
      (defrule coordinates () (and coord "," coord) (:choose 0 2))
      (defrule range () (and coordinates " through " coordinates) (:choose 0 2))
      (defrule on () "turn on " (:constant :on))
      (defrule off () "turn off " (:constant :off))
      (defrule toggle () "toggle " (:constant :toggle))
      (defrule command () (and (or toggle on off) range))
      (parseq 'command line)))
#+END_SRC
I initially missed the toggle command. I added it to the parser rules
with a slight refactoring and all is well again.
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  <<parse-line>>
  <<read-input>>
  (defparameter *input*
    (read-input "input/06.txt"))
#+END_SRC
** Part 1
There will be a 1000x1000 grid of lights to be turned on or off per
the supplied commands. To handle this I'll create an array and use
nil/t to represent on and off. This function will return the array
itself.
#+NAME: execute-commands
#+BEGIN_SRC lisp :results silent
  (defun execute-commands (commands &optional (dimensions '(1000 1000)))
    (let ((lights (make-array dimensions :initial-element nil)))
      (iter (for (command ((minx miny) (maxx maxy))) in commands)
            (iter (for x from minx to maxx)
                  (iter (for y from miny to maxy)
                        (case command
                          (:toggle (setf (aref lights x y) (not (aref lights x y))))
                          (:on (setf (aref lights x y) t))
                          (:off (setf (aref lights x y) nil))))))
      lights))
#+END_SRC
The actual problem is to count the number of lights which are *on*
after all the commands have been executed.
#+NAME: count-lights
#+BEGIN_SRC lisp :results silent
  (defun count-lights (lights)
    (destructuring-bind (maxx maxy) (array-dimensions lights)
      (iter outer
            (for x from 0 below maxx)
            (iter (for y from 0 below  maxy)
                  (in outer
                      (count (aref lights x y)))))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 06 A: ~a~%" (count-lights (execute-commands *input*))))
#+END_SRC
** Part 2
The same code structure works, but instead of turning the lights
on/off we make the brighter/dimmer. The answer this time is the sum of
their brightness.
#+NAME: revised-commands
#+BEGIN_SRC lisp :results silent
  (defun revised-commands (commands &optional (dimensions '(1000 1000)))
    (let ((lights (make-array dimensions :initial-element 0)))
      (iter (for (command ((minx miny) (maxx maxy))) in commands)
            (iter (for x from minx to maxx)
                  (iter (for y from miny to maxy)
                        (case command
                          (:toggle (incf (aref lights x y) 2))
                          (:on (incf (aref lights x y) 1))
                          (:off (unless (= 0 (aref lights x y)) (decf (aref lights x y))))))))
      lights))
#+END_SRC
The actual problem is to count the number of lights which are *on*
after all the commands have been executed.
#+NAME: count-brightness
#+BEGIN_SRC lisp :results silent
  (defun count-brightness (lights)
    (destructuring-bind (maxx maxy) (array-dimensions lights)
      (iter outer
            (for x from 0 below maxx)
            (iter (for y from 0 below  maxy)
                  (in outer
                      (sum (aref lights x y)))))))
#+END_SRC
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 06 B: ~a~%" (count-brightness (revised-commands *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<execute-commands>>
  <<count-lights>>
  <<revised-commands>>
  <<count-brightness>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.06.lisp
  <<initialize>>
  <<input>>
  <<functions>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 06 A: 377891
: Problem 06 B: 14110788
** Thoughts
