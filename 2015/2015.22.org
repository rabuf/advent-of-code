#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 22
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-22)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-22
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-22)
#+END_SRC
** Input
In this case the input is simple, the boss's stats. We can skip
parsing the input if we'd like, and we do like.
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  (defparameter *input* (list 51 9))
#+END_SRC
** Part 1
The player character is now a wizard. It has 5 spells, each has a
different effect and cost. The player begins with 500 mana and 50 hit
points. The player loses if either their HP drops below 1, or they
have insufficient mana to cast a spell.

The challenge is to select the series of spells that will kill the
boss using the least mana.

The spells:
- Magic Missile :: Cost 53, 4 damage, Duration 0
- Drain :: Cost 73, 2 damage, 2 healng, duration 0
- Shield :: Cost 113, armor +7, duration 6
- Poison :: Cost 173, 3 damage/turn, duration 6
- Recharge :: Cost 229, 101 mana/turn, duration 5

"turn" means both player and boss turns. So a spell with duration 6
will hit the boss on his turn, then again on the player's turn, and so
on.

A spell cannot be cast if it's already active (so if the =recharge=
effect is in place, the spell cannot be cast yet).
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 22 A: ~a~%" (identity *input*)))
#+END_SRC
** Part 2
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 22 B: ~a~%" (identity *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.22.lisp
  <<initialize>>
  <<structs>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 4a: 101194
: Problem 4b: 102095
** Test Cases
#+NAME: test-cases
#+BEGIN_SRC lisp :results output :exports both
  (def-suite aoc.2015.22)
  (in-suite aoc.2015.22)

  (run! 'aoc.2015.22)
#+END_SRC
** Test Results
#+RESULTS: test-cases
** Thoughts
