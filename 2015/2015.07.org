#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 07
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-07)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-07
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-07)
#+END_SRC
** Input
The input file today consists of a series of lines each being a
command or direct. The generalized form is:
#+BEGIN_EXAMPLE
  source -> sink
#+END_EXAMPLE
Source is one of:
- =<<val>>= :: a number
- =<<var>>= :: a string identifier
- =l binop r= :: =l= and =r= are =val= or =var=, =binop= is one of:
  - =RSHIFT= :: right shift
  - =LSHIFT= :: left shift
  - =AND= :: bitwise and
  - =OR= :: bitwise or
- =NOT r= :: bitwise not of =r= (=val= or =var=)
Sink is a =<<var>>=.

This is a pretty straightforward grammar. Before I create any structs
(CL gets a bit upset if you redefine structs) I'll start some basic
parsing with parseq (seems very appropriate this time).

Before we actually parse, though, let's split the input strings on
spaces.
#+NAME: split-line
#+BEGIN_SRC lisp :results silent
  (defun replace-strings-with-numbers (list)
    (iter (for l in list)
          (collect (or (parse-integer l :junk-allowed t) l))))
  (defun split-line (line)
    (ppcre:split "\\s+" line))
#+END_SRC
That was easy enough. Now we need to actually parse this.
#+NAME: parse-line
#+BEGIN_SRC lisp :results silent
  (defun int-bit-array (int &optional (size 16))
    (let ((result (make-array  size :initial-element 0 :element-type 'bit)))
      (iter (for i from 0 below 16)
            (setf (aref result i) (mod int 2))
            (setf int (ash int -1)))
      (reverse result)))
  (defun parse-line (line)
    (with-local-rules
      (defrule value () number); (:function #'int-bit-array))
      (defrule variable () string)
      (defrule output () string)
      (defrule arrow () "->")
      (defrule not () "NOT" (:constant :NOT))
      (defrule unaryop () (and not (or value variable)))
      (defrule lshift () "LSHIFT" (:constant :LSHIFT))
      (defrule rshift () "RSHIFT" (:constant :RSHIFT))
      (defrule shiftop () (and (or value variable)
                             (or lshift rshift)
                             number) (:choose 1 0 2))
      (defrule and () "AND" (:constant :AND))
      (defrule or () "OR" (:constant :OR))
      (defrule logop () (and (or value variable)
                             (or and or)
                             (or value variable)) (:choose 1 0 2))
      (defrule command () (or logop shiftop unaryop value variable))
      (defrule wiring () (and command arrow output) (:choose 0 2))
      (parseq 'wiring line)))
#+END_SRC
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line (replace-strings-with-numbers (split-line line))))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  <<parse-line>>
  <<split-line>>
  <<read-input>>
  (defparameter *input*
    (read-input "input/07.txt"))
#+END_SRC
** Part 1
The input is now converted to a useful set of information. Each input
is a list containing a command (first element) and a sink. I will move
everything into a hashtable using the sink as the key.
#+NAME: wiring-table
#+BEGIN_SRC lisp :results none
  (defun wiring-table (wiring)
    (let ((table (make-hash-table :test #'equal)))
      (iter (for (cmd sink) in wiring)
            (setf (gethash sink table) cmd))
      table))
#+END_SRC
Alright, so now everything is directly queryable. I'm going to
recursively call over this table. The challenge problem is to know the
value of the wire 'a' based on the wiring diagram. So we will start there.
#+NAME: wire-value
#+BEGIN_SRC lisp :results none
  (defun wire-value (wire diagram)
    (let* ((cmd (gethash wire diagram))
           (values (when (listp cmd)
                     (iter (for v in (cdr cmd))
                           (collect (if (stringp v)
                                        (wire-value v diagram)
                                        v)))))
           (result 0))
      ;;(format t "~a -> ~a~%" cmd wire)
      (setf result
            (cond ((stringp cmd) (wire-value cmd diagram))
                  ((numberp cmd) cmd)
                  ((eql :NOT (car cmd)) (boole boole-and (lognot (first values))
                                               #xffff))
                  ((eql :AND (car cmd)) (boole boole-and
                                               (first values)
                                               (second values)))
                  ((eql :OR (car cmd)) (boole boole-ior
                                              (first values)
                                              (second values)))
                  ((eql :LSHIFT (car cmd)) (boole boole-and (ash (first values)
                                                                 (second values))
                                                  #xFFFF))
                  ((eql :RSHIFT (car cmd)) (boole boole-and (ash (first values)
                                                                 (- (second values)))
                                                  #xFFFF))))
      (setf (gethash wire diagram) result)
      result))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 07 A: ~a~%" (wire-value "a" (wiring-table *input*))))
#+END_SRC
** Part 2
They want the value from "a" above to be used as the input for "b"
now, and otherwise reset the simulator. This isn't so bad.
#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun solve-b (wires)
    (let ((diagram (wiring-table wires)))
      (setf (gethash "b" diagram) 46065)
      (wire-value "a" diagram)))
  (defun problem-b () (format t "Problem 07 B: ~a~%" (solve-b *input*)))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<wiring-table>>
  <<wire-value>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.07.lisp
  <<initialize>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 07 A: 46065
: Problem 07 B: 14134
** Thoughts
