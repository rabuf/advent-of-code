#+STARTUP: indent contents
#+OPTIONS: num:nil toc:nil
* Day 09
** Executing this code
If you have a lisp installation, emacs, org-mode, and org-babel
support for lisp installed you can run this by:
1. Starting slime (=M-x slime=)
2. Typing =C-c C-c= in the block [[initialize][initialize]].
3. In the repl type =(in-package :aoc-2015-09)=
4. Typing =C-c C-c= in the block [[answers][answers]]
** Initial stuffs
*** Packages to load
#+NAME: packages
#+BEGIN_SRC lisp :results silent
  (unless (find-package :cl-ppcre)
    (ql:quickload "cl-ppcre"))
  (unless (find-package :iterate)
    (ql:quickload "iterate"))
  (unless (find-package :parseq)
    (ql:quickload "parseq"))
  (unless (find-package :fiveam)
    (ql:quickload "fiveam"))
#+END_SRC
*** Create package for this day
#+NAME: initialize
#+BEGIN_SRC lisp :noweb yes :results silent
  <<packages>>
  (defpackage :aoc-2015-09
    (:use :common-lisp
          :iterate
          :parseq
          :fiveam)
    (:export :problem-a
             :problem-b))
  (in-package :aoc-2015-09)
#+END_SRC
** Input
The input is a list of pairs and the distances between them. I'll go
ahead and use parseq for this for some practice.
#+BEGIN_EXAMPLE
London to Dublin = 464
London to Belfast = 518
Dublin to Belfast = 141
#+END_EXAMPLE
#+NAME: parse-line
#+BEGIN_SRC lisp :results silent
  (defun parse-line (line)
    (with-local-rules
      (defrule distance () string (:function #'parse-integer))
      (defrule location () string)
      (defrule line () (and location "to" location "=" distance)
        (:choose 0 2 4))
      (parseq 'line (ppcre:split "\\s+" line))))
#+END_SRC
#+NAME: read-input
#+BEGIN_SRC lisp :results silent
  (defun read-input (file)
    (iter (for line in-file file using #'read-line)
          (collect (parse-line line))))
#+END_SRC
#+NAME: input
#+BEGIN_SRC lisp :noweb yes :results silent
  <<read-input>>
  (defparameter *input*
    (read-input "input/09.txt"))
#+END_SRC
** Part 1
The problem is to find the shortest path traveling through all the
locations *exactly* once. This is also known as a Hamiltonian path.

The input is an undirected graph, so it can be traversed in any
direction.
#+NAME: make-graph
#+BEGIN_SRC lisp :results silent
  (defun make-graph (edges)
    (let ((graph (make-hash-table :test 'equal)))
      (iter (for (n0 n1 w) in edges)
            (setf (gethash (list n0 n1) graph) w)
            (setf (gethash (list n1 n0) graph) w))
      graph))
#+END_SRC

#+NAME: all-permutations
#+BEGIN_SRC lisp :results silent
  (defun all-permutations (list)
    (cond ((null list) nil)
          ((null (cdr list)) (list list))
          (t (loop for element in list
               append (mapcar (lambda (l) (cons element l))
                              (all-permutations (remove element list)))))))
#+END_SRC

I'm cheating a bit. When I examined the description, it's a complete
graph. This means that we can test all possible permutations of the
nodes since that's guaranteed to be a Hamiltonian path in our
graph. There are 7 inputs so this will generate and test 5040
paths. That shouldn't take too long.

#+NAME: shortest-path
#+BEGIN_SRC lisp :results none
  (defun path-length (path graph)
    (iter (for from in path)
          (for to in (cdr path))
          (sum (gethash (list from to) graph))))
  (defun shortest-path (graph)
    (let* ((names (remove-duplicates (iter (for (k v) in-hashtable graph)
                                           (collect (car k)))
                                     :test #'equal))
           (paths (all-permutations names)))
      (iter (for path in paths)
            (minimize (path-length path graph)))))
#+END_SRC
#+NAME: problem-a
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-a () (format t "Problem 09 A: ~a~%" (shortest-path (make-graph *input*))))
#+END_SRC
** Part 2
Now Santa wants the longest path.
#+NAME: longest-path
#+BEGIN_SRC lisp :results silent
  (defun longest-path (graph)
    (let* ((names (remove-duplicates (iter (for (k v) in-hashtable graph)
                                           (collect (car k)))
                                     :test #'equal))
           (paths (all-permutations names)))
      (iter (for path in paths)
            (maximize (path-length path graph)))))
#+END_SRC

#+NAME: problem-b
#+BEGIN_SRC lisp :noweb yes :results silent
  (defun problem-b () (format t "Problem 09 B: ~a~%" (longest-path (make-graph *input*))))
#+END_SRC
** Putting it all together
#+NAME: structs
#+BEGIN_SRC lisp :noweb yes :results silent

#+END_SRC
#+NAME: functions
#+BEGIN_SRC lisp :noweb yes :results silent
  <<make-graph>>
  <<all-permutations>>
  <<shortest-path>>
  <<longest-path>>
  <<parse-line>>
#+END_SRC
#+NAME: answers
#+BEGIN_SRC lisp :results output :exports both :noweb yes :tangle 2015.09.lisp
  <<initialize>>
  <<functions>>
  <<input>>
  <<problem-a>>
  <<problem-b>>
  (problem-a)
  (problem-b)
#+END_SRC
** Answer
#+RESULTS: answers
: Problem 09 A: 117
: Problem 09 B: 909
** Thoughts
I'm satisfied in that I answered the question, but this required an
assumption (validated by examining my input) that the graph was a
complete graph. If there were any missing edges I'd need code to
generate paths properly.
